{"version":3,"file":"transformer-lcp.js","sourceRoot":"","sources":["../../../../src/transform/transformer-lcp.ts"],"names":[],"mappings":";;;AAGA,wEAAkH;AAQlH;IAAA;IAkBA,CAAC;IAhBU,iCAAQ,GAAf,UAAgB,WAAwB,EAAE,IAAU;QAChD,OAAO,CAAC,OAAO,WAAW,CAAC,GAAG,KAAK,WAAW,CAAC;YAC3C,0BAAS,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IACzE,CAAC;IAEY,wCAAe,GAA5B,UACI,WAAwB,EACxB,IAAU,EACV,MAAwB,EACxB,yBAAkC,EAClC,gBAAwB,EACxB,cAAsB;;;gBAEtB,WAAO,iCAAgB,CAAC,WAAW,CAAC,GAAU,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,EAC5E,MAAM,EAAE,yBAAyB,EAAE,gBAAgB,EAAE,cAAc,CAAC,EAAC;;;KAChF;IACL,qBAAC;AAAD,CAAC,AAlBD,IAkBC;AAlBY,wCAAc","sourcesContent":["import { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { LCP } from \"@r2-lcp-js/parser/epub/lcp\";\nimport { supports as supports_, transformStream as transformStream_ } from \"@r2-lcp-js/transform/transformer-lcp\";\nimport { IStreamAndLength } from \"@utils/zip/zip\";\n\nimport { ITransformer } from \"./transformer\";\n\n// import * as debug_ from \"debug\";\n// const debug = debug_(\"r2:shared#transform/transformer-lcp\");\n\nexport class TransformerLCP implements ITransformer {\n\n    public supports(publication: Publication, link: Link): boolean {\n        return (typeof publication.LCP !== \"undefined\") &&\n            supports_(publication.LCP, link.Href, link.Properties.Encrypted);\n    }\n\n    public async transformStream(\n        publication: Publication,\n        link: Link,\n        stream: IStreamAndLength,\n        isPartialByteRangeRequest: boolean,\n        partialByteBegin: number,\n        partialByteEnd: number): Promise<IStreamAndLength> {\n\n        return transformStream_(publication.LCP as LCP, link.Href, link.Properties.Encrypted,\n                stream, isPartialByteRangeRequest, partialByteBegin, partialByteEnd);\n    }\n}\n"]}