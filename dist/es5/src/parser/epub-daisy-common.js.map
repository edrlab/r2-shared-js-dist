{"version":3,"file":"epub-daisy-common.js","sourceRoot":"","sources":["../../../../src/parser/epub-daisy-common.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as moment from \"moment\";\nimport * as path from \"path\";\nimport * as xmldom from \"xmldom\";\n\nimport { MediaOverlayNode, timeStrToSeconds } from \"@models/media-overlay\";\nimport { DirectionEnum } from \"@models/metadata\";\nimport { Contributor } from \"@models/metadata-contributor\";\nimport { MediaOverlay } from \"@models/metadata-media-overlay\";\nimport { IStringMap } from \"@models/metadata-multilang\";\nimport { Properties } from \"@models/metadata-properties\";\nimport { Subject } from \"@models/metadata-subject\";\nimport { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { DelinearizeAccessModeSufficient } from \"@models/ta-json-string-tokens-converter\";\nimport { encodeURIComponent_RFC3986 } from \"@r2-utils-js/_utils/http/UrlUtils\";\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\nimport { XML } from \"@r2-utils-js/_utils/xml-js-mapper\";\nimport { IStreamAndLength, IZip } from \"@r2-utils-js/_utils/zip/zip\";\n\nimport { zipHasEntry } from \"../_utils/zipHasEntry\";\nimport { Rootfile } from \"./epub/container-rootfile\";\nimport { NCX } from \"./epub/ncx\";\nimport { NavPoint } from \"./epub/ncx-navpoint\";\nimport { OPF } from \"./epub/opf\";\nimport { Author } from \"./epub/opf-author\";\nimport { Manifest } from \"./epub/opf-manifest\";\nimport { Metafield } from \"./epub/opf-metafield\";\nimport { Title } from \"./epub/opf-title\";\n\nconst debug = debug_(\"r2:shared#parser/epub-daisy-common\");\n\nconst epub3 = \"3.0\";\nconst epub301 = \"3.0.1\";\nconst epub31 = \"3.1\";\n// const epub2 = \"2.0\";\n// const epub201 = \"2.0.1\";\n\nexport const mediaOverlayURLPath = \"media-overlay.json\";\nexport const mediaOverlayURLParam = \"resource\";\n\n// https://github.com/readium/webpub-manifest/issues/52#issuecomment-601686135\nexport const BCP47_UNKNOWN_LANG = \"und\";\n\nexport const parseSpaceSeparatedString = (str: string | undefined | null): string[] => {\n    return str ? str.trim().split(\" \").map((role) => {\n        return role.trim();\n    }).filter((role) => {\n        return role.length > 0;\n    }) : [];\n};\n\nconst getEpubVersion = (rootfile: Rootfile, opf: OPF): string | undefined => {\n\n    if (rootfile.Version) {\n        return rootfile.Version;\n    } else if (opf.Version) {\n        return opf.Version;\n    }\n\n    return undefined;\n};\n\nexport const isEpub3OrMore = (rootfile: Rootfile, opf: OPF): boolean => {\n\n    const version = getEpubVersion(rootfile, opf);\n    return (version === epub3 || version === epub301 || version === epub31);\n};\n\nexport const fillPublicationDate = (publication: Publication, rootfile: Rootfile | undefined, opf: OPF) => {\n\n    const opfMetadataDate =\n        opf.Metadata?.DCMetadata?.Date?.length ?\n            opf.Metadata.DCMetadata.Date :\n            (opf.Metadata?.Date?.length ?\n                opf.Metadata.Date :\n                undefined);\n\n    if (opfMetadataDate) {\n\n        if ((!rootfile || isEpub3OrMore(rootfile, opf)) &&\n            opfMetadataDate[0] && opfMetadataDate[0].Data) {\n\n            const token = opfMetadataDate[0].Data;\n            try {\n                const mom = moment(token);\n                if (mom.isValid()) {\n                    publication.Metadata.PublicationDate = mom.toDate();\n                }\n            } catch (err) {\n                debug(\"INVALID DATE/TIME? \" + token);\n            }\n            return;\n        }\n\n        opfMetadataDate.forEach((date) => {\n            if (date.Data && date.Event && date.Event.indexOf(\"publication\") >= 0) {\n                const token = date.Data;\n                try {\n                    const mom = moment(token);\n                    if (mom.isValid()) {\n                        publication.Metadata.PublicationDate = mom.toDate();\n                    }\n                } catch (err) {\n                    debug(\"INVALID DATE/TIME? \" + token);\n                }\n            }\n        });\n    }\n};\n\nexport const fillSubject = (publication: Publication, opf: OPF) => {\n\n    const opfMetadataSubject =\n        opf.Metadata?.DCMetadata?.Subject?.length ?\n            opf.Metadata.DCMetadata.Subject :\n            (opf.Metadata?.Subject?.length ?\n                opf.Metadata.Subject :\n                undefined);\n\n    if (opfMetadataSubject) {\n        opfMetadataSubject.forEach((s) => {\n            const sub = new Subject();\n            if (s.Lang) {\n                sub.Name = {} as IStringMap;\n                sub.Name[s.Lang] = s.Data;\n            } else {\n                sub.Name = s.Data;\n            }\n            sub.Code = s.Term;\n            sub.Scheme = s.Authority;\n            if (!publication.Metadata.Subject) {\n                publication.Metadata.Subject = [];\n            }\n            publication.Metadata.Subject.push(sub);\n        });\n    }\n};\n\nexport const findContributorInMeta = (publication: Publication, rootfile: Rootfile | undefined, opf: OPF) => {\n    if (!rootfile || isEpub3OrMore(rootfile, opf)) {\n        const func = (meta: Metafield) => {\n            if (meta.Property === \"dcterms:creator\" || meta.Property === \"dcterms:contributor\") {\n                const cont = new Author();\n                cont.Data = meta.Data;\n                cont.ID = meta.ID;\n                addContributor(publication, rootfile, opf, cont, undefined);\n            }\n        };\n        if (opf.Metadata?.XMetadata?.Meta?.length) {\n            opf.Metadata.XMetadata.Meta.forEach(func);\n        }\n        if (opf.Metadata?.Meta?.length) {\n            opf.Metadata.Meta.forEach(func);\n        }\n    }\n};\n\nexport const addContributor = (\n    publication: Publication, rootfile: Rootfile | undefined,\n    opf: OPF, cont: Author, forcedRole: string | undefined) => {\n\n    const contributor = new Contributor();\n    let role: string | undefined;\n\n    // const epubVersion = getEpubVersion(rootfile, opf);\n\n    if (rootfile && isEpub3OrMore(rootfile, opf)) {\n\n        if (cont.FileAs) {\n            contributor.SortAs = cont.FileAs;\n        } else {\n            const metaFileAs = findMetaByRefineAndProperty(opf, cont.ID, \"file-as\");\n            if (metaFileAs && metaFileAs.Property === \"file-as\") {\n                contributor.SortAs = metaFileAs.Data;\n            }\n        }\n\n        const metaRole = findMetaByRefineAndProperty(opf, cont.ID, \"role\");\n        if (metaRole && metaRole.Property === \"role\") {\n            role = metaRole.Data;\n        }\n        if (!role && forcedRole) {\n            role = forcedRole;\n        }\n\n        const metaAlt = findAllMetaByRefineAndProperty(opf, cont.ID, \"alternate-script\");\n        if (metaAlt && metaAlt.length) {\n            contributor.Name = {} as IStringMap;\n\n            metaAlt.forEach((m) => {\n                if (m.Lang) {\n                    (contributor.Name as IStringMap)[m.Lang] = m.Data;\n                }\n            });\n\n            // https://github.com/readium/architecture/blob/master/streamer/parser/metadata.md#title\n            const xmlLang: string = cont.Lang || opf.Lang;\n            if (xmlLang) {\n                contributor.Name[xmlLang.toLowerCase()] = cont.Data;\n            } else if (publication.Metadata &&\n                publication.Metadata.Language &&\n                publication.Metadata.Language.length &&\n                !contributor.Name[publication.Metadata.Language[0].toLowerCase()]) {\n                contributor.Name[publication.Metadata.Language[0].toLowerCase()] = cont.Data;\n            } else {\n                // tslint:disable-next-line: no-string-literal\n                contributor.Name[BCP47_UNKNOWN_LANG] = cont.Data;\n            }\n        } else {\n            contributor.Name = cont.Data;\n        }\n    } else {\n        contributor.Name = cont.Data;\n        role = cont.Role;\n        if (!role && forcedRole) {\n            role = forcedRole;\n        }\n    }\n\n    if (role) {\n        switch (role) {\n            case \"aut\": {\n                if (!publication.Metadata.Author) {\n                    publication.Metadata.Author = [];\n                }\n                publication.Metadata.Author.push(contributor);\n                break;\n            }\n            case \"trl\": {\n                if (!publication.Metadata.Translator) {\n                    publication.Metadata.Translator = [];\n                }\n                publication.Metadata.Translator.push(contributor);\n                break;\n            }\n            case \"art\": {\n                if (!publication.Metadata.Artist) {\n                    publication.Metadata.Artist = [];\n                }\n                publication.Metadata.Artist.push(contributor);\n                break;\n            }\n            case \"edt\": {\n                if (!publication.Metadata.Editor) {\n                    publication.Metadata.Editor = [];\n                }\n                publication.Metadata.Editor.push(contributor);\n                break;\n            }\n            case \"ill\": {\n                if (!publication.Metadata.Illustrator) {\n                    publication.Metadata.Illustrator = [];\n                }\n                publication.Metadata.Illustrator.push(contributor);\n                break;\n            }\n            case \"ltr\": {\n                if (!publication.Metadata.Letterer) {\n                    publication.Metadata.Letterer = [];\n                }\n                publication.Metadata.Letterer.push(contributor);\n                break;\n            }\n            case \"pen\": {\n                if (!publication.Metadata.Penciler) {\n                    publication.Metadata.Penciler = [];\n                }\n                publication.Metadata.Penciler.push(contributor);\n                break;\n            }\n            case \"clr\": {\n                if (!publication.Metadata.Colorist) {\n                    publication.Metadata.Colorist = [];\n                }\n                publication.Metadata.Colorist.push(contributor);\n                break;\n            }\n            case \"ink\": {\n                if (!publication.Metadata.Inker) {\n                    publication.Metadata.Inker = [];\n                }\n                publication.Metadata.Inker.push(contributor);\n                break;\n            }\n            case \"nrt\": {\n                if (!publication.Metadata.Narrator) {\n                    publication.Metadata.Narrator = [];\n                }\n                publication.Metadata.Narrator.push(contributor);\n                break;\n            }\n            case \"pbl\": {\n                if (!publication.Metadata.Publisher) {\n                    publication.Metadata.Publisher = [];\n                }\n                publication.Metadata.Publisher.push(contributor);\n                break;\n            }\n            default: {\n                contributor.Role = [role];\n\n                if (!publication.Metadata.Contributor) {\n                    publication.Metadata.Contributor = [];\n                }\n                publication.Metadata.Contributor.push(contributor);\n            }\n        }\n    }\n};\n\nexport const findMetaByRefineAndProperty = (opf: OPF, ID: string, property: string): Metafield | undefined => {\n\n    const ret = findAllMetaByRefineAndProperty(opf, ID, property);\n    if (ret.length) {\n        return ret[0];\n    }\n    return undefined;\n};\n\nexport const findAllMetaByRefineAndProperty = (opf: OPF, ID: string, property: string): Metafield[] => {\n\n    const metas: Metafield[] = [];\n\n    const refineID = \"#\" + ID;\n\n    const func = (metaTag: Metafield) => {\n        if (metaTag.Refine === refineID && metaTag.Property === property) {\n            metas.push(metaTag);\n        }\n    };\n    if (opf.Metadata?.XMetadata?.Meta?.length) {\n        opf.Metadata.XMetadata.Meta.forEach(func);\n    }\n    if (opf.Metadata?.Meta?.length) {\n        opf.Metadata.Meta.forEach(func);\n    }\n\n    return metas;\n};\n\nexport const findInSpineByHref = (publication: Publication, href: string): Link | undefined => {\n\n    if (publication.Spine && publication.Spine.length) {\n        const ll = publication.Spine.find((l) => {\n            if (l.HrefDecoded === href) {\n                return true;\n            }\n            return false;\n        });\n        if (ll) {\n            return ll;\n        }\n    }\n\n    return undefined;\n};\n\ntype FuncType = (\n    publication: Publication, rootfile: Rootfile | undefined,\n    opf: OPF, zip: IZip, linkItem: Link, item: Manifest) => Promise<void>;\n\nexport const findInManifestByID = async (\n    publication: Publication, rootfile: Rootfile | undefined, opf: OPF, ID: string, zip: IZip,\n    addLinkData: FuncType): Promise<Link> => {\n\n    if (opf.Manifest && opf.Manifest.length) {\n        const item = opf.Manifest.find((manItem) => {\n            if (manItem.ID === ID) {\n                return true;\n            }\n            return false;\n        });\n        if (item && opf.ZipPath) {\n            const linkItem = new Link();\n            linkItem.TypeLink = item.MediaType;\n\n            const itemHrefDecoded = item.HrefDecoded;\n            if (!itemHrefDecoded) {\n                return Promise.reject(\"item.Href?!\");\n            }\n            linkItem.setHrefDecoded(path.join(path.dirname(opf.ZipPath), itemHrefDecoded)\n                .replace(/\\\\/g, \"/\"));\n\n            await addLinkData(publication, rootfile, opf, zip, linkItem, item);\n\n            return linkItem;\n        }\n    }\n    return Promise.reject(`ID ${ID} not found`);\n};\n\nexport const fillSpineAndResource = async (\n    publication: Publication, rootfile: Rootfile | undefined, opf: OPF, zip: IZip,\n    addLinkData: FuncType) => {\n\n    if (!opf.ZipPath) {\n        return;\n    }\n\n    if (opf.Spine && opf.Spine.Items && opf.Spine.Items.length) {\n        for (const item of opf.Spine.Items) {\n\n            if (!item.Linear || item.Linear === \"yes\") {\n\n                let linkItem: Link;\n                try {\n                    linkItem = await findInManifestByID(publication, rootfile, opf, item.IDref, zip, addLinkData);\n                } catch (err) {\n                    debug(err);\n                    continue;\n                }\n\n                if (linkItem && linkItem.Href) {\n                    if (!publication.Spine) {\n                        publication.Spine = [];\n                    }\n                    publication.Spine.push(linkItem);\n                }\n            }\n        }\n    }\n\n    if (opf.Manifest && opf.Manifest.length) {\n\n        for (const item of opf.Manifest) {\n\n            const itemHrefDecoded = item.HrefDecoded;\n            if (!itemHrefDecoded) {\n                debug(\"!? item.Href\");\n                continue;\n            }\n            const zipPath = path.join(path.dirname(opf.ZipPath), itemHrefDecoded)\n                .replace(/\\\\/g, \"/\");\n            const linkSpine = findInSpineByHref(publication, zipPath);\n            if (!linkSpine || !linkSpine.Href) {\n\n                const linkItem = new Link();\n                linkItem.TypeLink = item.MediaType;\n\n                linkItem.setHrefDecoded(zipPath);\n\n                await addLinkData(publication, rootfile, opf, zip, linkItem, item);\n\n                if (!publication.Resources) {\n                    publication.Resources = [];\n                }\n                publication.Resources.push(linkItem);\n            }\n        }\n    }\n};\n\nexport const addLanguage = (publication: Publication, opf: OPF) => {\n\n    const opfMetadataLanguage =\n        opf.Metadata?.DCMetadata?.Language?.length ?\n            opf.Metadata.DCMetadata.Language :\n            (opf.Metadata?.Language?.length ?\n                opf.Metadata.Language :\n                undefined);\n\n    if (opfMetadataLanguage) {\n        publication.Metadata.Language = opfMetadataLanguage;\n    }\n};\n\nexport const addIdentifier = (publication: Publication, opf: OPF) => {\n\n    const opfMetadataIdentifier =\n        opf.Metadata?.DCMetadata?.Identifier?.length ?\n            opf.Metadata.DCMetadata.Identifier :\n            (opf.Metadata?.Identifier?.length ?\n                opf.Metadata.Identifier :\n                undefined);\n\n    if (opfMetadataIdentifier) {\n        if (opf.UniqueIdentifier && opfMetadataIdentifier.length > 1) {\n            opfMetadataIdentifier.forEach((iden) => {\n                if (iden.ID === opf.UniqueIdentifier) {\n                    publication.Metadata.Identifier = iden.Data;\n                }\n            });\n        } else if (opfMetadataIdentifier.length > 0) {\n            publication.Metadata.Identifier = opfMetadataIdentifier[0].Data;\n        }\n    }\n};\n\nexport const addTitle = (publication: Publication, rootfile: Rootfile | undefined, opf: OPF) => {\n\n    const opfMetadataTitle =\n        opf.Metadata?.DCMetadata?.Title?.length ?\n            opf.Metadata.DCMetadata.Title :\n            (opf.Metadata?.Title?.length ?\n                opf.Metadata.Title :\n                undefined);\n\n    if (rootfile && isEpub3OrMore(rootfile, opf)) {\n        let mainTitle: Title | undefined;\n        let subTitle: Title | undefined;\n        let subTitleDisplaySeq = 0;\n\n        if (opfMetadataTitle) {\n\n            if (opf.Metadata?.Meta || opf.Metadata?.XMetadata?.Meta) {\n                const tt = opfMetadataTitle.find((title) => {\n                    const refineID = \"#\" + title.ID;\n\n                    const func0 = (meta: Metafield) => {\n                        // meta.Property === \"title-type\"\n                        if (meta.Data === \"main\" && meta.Refine === refineID) {\n                            return true;\n                        }\n                        return false;\n                    };\n                    let m = opf.Metadata?.Meta ? opf.Metadata.Meta.find(func0) : undefined;\n                    if (!m && opf.Metadata?.XMetadata?.Meta) {\n                        m = opf.Metadata.XMetadata.Meta.find(func0);\n                    }\n                    if (m) {\n                        return true;\n                    }\n                    return false;\n                });\n                if (tt) {\n                    mainTitle = tt;\n                }\n\n                opfMetadataTitle.forEach((title) => {\n                    const refineID = \"#\" + title.ID;\n\n                    const func1 = (meta: Metafield) => {\n                        // meta.Property === \"title-type\"\n                        if (meta.Data === \"subtitle\" && meta.Refine === refineID) {\n                            return true;\n                        }\n                        return false;\n                    };\n                    let m = opf.Metadata?.Meta ? opf.Metadata.Meta.find(func1) : undefined;\n                    if (!m && opf.Metadata?.XMetadata?.Meta) {\n                        m = opf.Metadata.XMetadata.Meta.find(func1);\n                    }\n                    if (m) {\n                        let titleDisplaySeq = 0;\n                        const func2 = (meta: Metafield) => {\n                            if (meta.Property === \"display-seq\" && meta.Refine === refineID) {\n                                return true;\n                            }\n                            return false;\n                        };\n                        let mds = opf.Metadata?.Meta ? opf.Metadata.Meta.find(func2) : undefined;\n                        if (!mds && opf.Metadata?.XMetadata?.Meta) {\n                            mds = opf.Metadata.XMetadata.Meta.find(func2);\n                        }\n                        if (mds) {\n                            try {\n                                titleDisplaySeq = parseInt(mds.Data, 10);\n                            } catch (err) {\n                                debug(err);\n                                debug(mds.Data);\n                                titleDisplaySeq = 0;\n                            }\n                            if (isNaN(titleDisplaySeq)) {\n                                debug(\"NaN\");\n                                debug(mds.Data);\n                                titleDisplaySeq = 0;\n                            }\n                        } else {\n                            titleDisplaySeq = 0;\n                        }\n                        if (!subTitle || titleDisplaySeq < subTitleDisplaySeq) {\n                            subTitle = title;\n                            subTitleDisplaySeq = titleDisplaySeq;\n                        }\n                    }\n                });\n            }\n\n            if (!mainTitle) {\n                mainTitle = opfMetadataTitle[0];\n            }\n        }\n\n        if (mainTitle) {\n            const metaAlt = findAllMetaByRefineAndProperty(opf, mainTitle.ID, \"alternate-script\");\n            if (metaAlt && metaAlt.length) {\n                publication.Metadata.Title = {} as IStringMap;\n\n                metaAlt.forEach((m) => {\n                    if (m.Lang) {\n                        (publication.Metadata.Title as IStringMap)[m.Lang.toLowerCase()] = m.Data;\n                    }\n                });\n\n                // https://github.com/readium/architecture/blob/master/streamer/parser/metadata.md#title\n                const xmlLang: string = mainTitle.Lang || opf.Lang;\n                if (xmlLang) {\n                    publication.Metadata.Title[xmlLang.toLowerCase()] = mainTitle.Data;\n                } else if (publication.Metadata.Language &&\n                    publication.Metadata.Language.length &&\n                    !publication.Metadata.Title[publication.Metadata.Language[0].toLowerCase()]) {\n                    publication.Metadata.Title[publication.Metadata.Language[0].toLowerCase()] = mainTitle.Data;\n                } else {\n                    // tslint:disable-next-line: no-string-literal\n                    publication.Metadata.Title[BCP47_UNKNOWN_LANG] = mainTitle.Data;\n                }\n\n            } else {\n                publication.Metadata.Title = mainTitle.Data;\n            }\n        }\n\n        if (subTitle) {\n            const metaAlt = findAllMetaByRefineAndProperty(opf, subTitle.ID, \"alternate-script\");\n            if (metaAlt && metaAlt.length) {\n                publication.Metadata.SubTitle = {} as IStringMap;\n\n                metaAlt.forEach((m) => {\n                    if (m.Lang) {\n                        (publication.Metadata.SubTitle as IStringMap)[m.Lang.toLowerCase()] = m.Data;\n                    }\n                });\n\n                // https://github.com/readium/architecture/blob/master/streamer/parser/metadata.md#title\n                const xmlLang: string = subTitle.Lang || opf.Lang;\n                if (xmlLang) {\n                    publication.Metadata.SubTitle[xmlLang.toLowerCase()] = subTitle.Data;\n                } else if (publication.Metadata.Language &&\n                    publication.Metadata.Language.length &&\n                    !publication.Metadata.SubTitle[publication.Metadata.Language[0].toLowerCase()]) {\n                    publication.Metadata.SubTitle[publication.Metadata.Language[0].toLowerCase()] = subTitle.Data;\n                } else {\n                    // tslint:disable-next-line: no-string-literal\n                    publication.Metadata.SubTitle[BCP47_UNKNOWN_LANG] = subTitle.Data;\n                }\n\n            } else {\n                publication.Metadata.SubTitle = subTitle.Data;\n            }\n        }\n\n    } else {\n        if (opfMetadataTitle) {\n            publication.Metadata.Title = opfMetadataTitle[0].Data;\n        }\n    }\n};\n\nexport const setPublicationDirection = (publication: Publication, opf: OPF) => {\n\n    if (opf.Spine && opf.Spine.PageProgression) {\n        switch (opf.Spine.PageProgression) {\n            case \"auto\": {\n                publication.Metadata.Direction = DirectionEnum.Auto;\n                break;\n            }\n            case \"ltr\": {\n                publication.Metadata.Direction = DirectionEnum.LTR;\n                break;\n            }\n            case \"rtl\": {\n                publication.Metadata.Direction = DirectionEnum.RTL;\n                break;\n            }\n        }\n    }\n\n    if (publication.Metadata.Language && publication.Metadata.Language.length &&\n        (!publication.Metadata.Direction || publication.Metadata.Direction === DirectionEnum.Auto)) {\n\n        const lang = publication.Metadata.Language[0].toLowerCase();\n        if ((lang === \"ar\" || lang.startsWith(\"ar-\") ||\n            lang === \"he\" || lang.startsWith(\"he-\") ||\n            lang === \"fa\" || lang.startsWith(\"fa-\")) ||\n            lang === \"zh-Hant\" ||\n            lang === \"zh-TW\") {\n\n            publication.Metadata.Direction = DirectionEnum.RTL;\n        }\n    }\n};\n\nexport const getNcx = async (ncxManItem: Manifest, opf: OPF, zip: IZip): Promise<NCX> => {\n\n    if (!opf.ZipPath) {\n        return Promise.reject(\"?!!opf.ZipPath\");\n    }\n\n    const dname = path.dirname(opf.ZipPath);\n    const ncxManItemHrefDecoded = ncxManItem.HrefDecoded;\n    if (!ncxManItemHrefDecoded) {\n        return Promise.reject(\"?!ncxManItem.Href\");\n    }\n    const ncxFilePath = path.join(dname, ncxManItemHrefDecoded).replace(/\\\\/g, \"/\");\n\n    const has = await zipHasEntry(zip, ncxFilePath, undefined);\n    if (!has) {\n        const err = `NOT IN ZIP (NCX): ${ncxManItem.Href} --- ${ncxFilePath}`;\n        debug(err);\n        const zipEntries = await zip.getEntries();\n        for (const zipEntry of zipEntries) {\n            debug(zipEntry);\n        }\n        return Promise.reject(err);\n    }\n\n    let ncxZipStream_: IStreamAndLength;\n    try {\n        ncxZipStream_ = await zip.entryStreamPromise(ncxFilePath);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n    const ncxZipStream = ncxZipStream_.stream;\n\n    let ncxZipData: Buffer;\n    try {\n        ncxZipData = await streamToBufferPromise(ncxZipStream);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    const ncxStr = ncxZipData.toString(\"utf8\");\n    const ncxDoc = new xmldom.DOMParser().parseFromString(ncxStr);\n    const ncx = XML.deserialize<NCX>(ncxDoc, NCX);\n    ncx.ZipPath = ncxFilePath;\n\n    // breakLength: 100  maxArrayLength: undefined\n    // debug(util.inspect(ncx,\n    //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n    return ncx;\n};\n\nexport const getOpf = async (zip: IZip, rootfilePathDecoded: string, rootfilePath: string): Promise<OPF> => {\n\n    // let timeBegin = process.hrtime();\n    const has = await zipHasEntry(zip, rootfilePathDecoded, rootfilePath);\n    if (!has) {\n        const err = `NOT IN ZIP (container OPF rootfile): ${rootfilePath} --- ${rootfilePathDecoded}`;\n        debug(err);\n        const zipEntries = await zip.getEntries();\n        for (const zipEntry of zipEntries) {\n            debug(zipEntry);\n        }\n        return Promise.reject(err);\n    }\n\n    let opfZipStream_: IStreamAndLength;\n    try {\n        opfZipStream_ = await zip.entryStreamPromise(rootfilePathDecoded);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n    const opfZipStream = opfZipStream_.stream;\n\n    // const timeElapsed1 = process.hrtime(timeBegin);\n    // debug(`1) ${timeElapsed1[0]} seconds + ${timeElapsed1[1]} nanoseconds`);\n    // timeBegin = process.hrtime();\n\n    let opfZipData: Buffer;\n    try {\n        opfZipData = await streamToBufferPromise(opfZipStream);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    // debug(`${opfZipData.length} bytes`);\n\n    // const timeElapsed2 = process.hrtime(timeBegin);\n    // debug(`2) ${timeElapsed2[0]} seconds + ${timeElapsed2[1]} nanoseconds`);\n    // timeBegin = process.hrtime();\n\n    const opfStr = opfZipData.toString(\"utf8\");\n\n    // const timeElapsed3 = process.hrtime(timeBegin);\n    // debug(`3) ${timeElapsed3[0]} seconds + ${timeElapsed3[1]} nanoseconds`);\n    // timeBegin = process.hrtime();\n\n    // TODO: this takes some time with large OPF XML data\n    // (typically: many manifest items),\n    // but it remains acceptable.\n    // e.g. BasicTechnicalMathWithCalculus.epub with 2.5MB OPF!\n    const opfDoc = new xmldom.DOMParser().parseFromString(opfStr);\n\n    // const timeElapsed4 = process.hrtime(timeBegin);\n    // debug(`4) ${timeElapsed4[0]} seconds + ${timeElapsed4[1]} nanoseconds`);\n    // const timeBegin = process.hrtime();\n\n    // tslint:disable-next-line:no-string-literal\n    // process.env[\"OPF_PARSE\"] = \"true\";\n    // TODO: this takes a MASSIVE amount of time with large OPF XML data\n    // (typically: many manifest items)\n    // e.g. BasicTechnicalMathWithCalculus.epub with 2.5MB OPF!\n    // culprit: XPath lib ... so we use our own mini XPath parser/matcher\n    // (=> performance gain in orders of magnitude!)\n    const opf = XML.deserialize<OPF>(opfDoc, OPF);\n    // tslint:disable-next-line:no-string-literal\n    // process.env[\"OPF_PARSE\"] = \"false\";\n\n    // const timeElapsed5 = process.hrtime(timeBegin);\n    // debug(`5) ${timeElapsed5[0]} seconds + ${timeElapsed5[1]} nanoseconds`);\n\n    opf.ZipPath = rootfilePathDecoded;\n\n    // breakLength: 100  maxArrayLength: undefined\n    // debug(util.inspect(opf,\n    //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n    return opf;\n};\n\nexport const addOtherMetadata = (publication: Publication, rootfile: Rootfile | undefined, opf: OPF) => {\n\n    if (!opf.Metadata?.DCMetadata) {\n        return;\n    }\n\n    const opfMetadataRights =\n        opf.Metadata?.DCMetadata?.Rights?.length ?\n            opf.Metadata.DCMetadata.Rights :\n            (opf.Metadata?.Rights?.length ?\n                opf.Metadata.Rights :\n                undefined);\n    if (opfMetadataRights) {\n        publication.Metadata.Rights = opfMetadataRights.join(\" \");\n    }\n\n    const opfMetadataDescription =\n        opf.Metadata?.DCMetadata?.Description?.length ?\n            opf.Metadata.DCMetadata.Description :\n            (opf.Metadata?.Description?.length ?\n                opf.Metadata.Description :\n                undefined);\n    if (opfMetadataDescription) {\n        publication.Metadata.Description = opfMetadataDescription[0];\n    }\n\n    const opfMetadataPublisher =\n        opf.Metadata?.DCMetadata?.Publisher?.length ?\n            opf.Metadata.DCMetadata.Publisher :\n            (opf.Metadata?.Publisher?.length ?\n                opf.Metadata.Publisher :\n                undefined);\n    if (opfMetadataPublisher) {\n        publication.Metadata.Publisher = [];\n\n        opfMetadataPublisher.forEach((pub) => {\n            const contrib = new Contributor();\n            contrib.Name = pub;\n            publication.Metadata.Publisher.push(contrib);\n        });\n    }\n\n    const opfMetadataSource =\n        opf.Metadata?.DCMetadata?.Source?.length ?\n            opf.Metadata.DCMetadata.Source :\n            (opf.Metadata?.Source?.length ?\n                opf.Metadata.Source :\n                undefined);\n    if (opfMetadataSource) {\n        publication.Metadata.Source = opfMetadataSource[0];\n    }\n\n    const opfMetadataContributor =\n        opf.Metadata?.DCMetadata?.Contributor?.length ?\n            opf.Metadata.DCMetadata.Contributor :\n            (opf.Metadata?.Contributor?.length ?\n                opf.Metadata.Contributor :\n                undefined);\n    if (opfMetadataContributor) {\n        opfMetadataContributor.forEach((cont) => {\n            addContributor(publication, rootfile, opf, cont, undefined);\n        });\n    }\n\n    const opfMetadataCreator =\n        opf.Metadata?.DCMetadata?.Creator?.length ?\n            opf.Metadata.DCMetadata.Creator :\n            (opf.Metadata?.Creator?.length ?\n                opf.Metadata.Creator :\n                undefined);\n    if (opfMetadataCreator) {\n        opfMetadataCreator.forEach((cont) => {\n            addContributor(publication, rootfile, opf, cont, \"aut\");\n        });\n    }\n\n    if (opf.Metadata?.Link) {\n        opf.Metadata.Link.forEach((metaLink) => {\n            if (metaLink.Property === \"a11y:certifierCredential\") {\n                let val = metaLink.Href;\n                if (!val) {\n                    return; // continue\n                }\n                val = val.trim();\n                if (!val) {\n                    return; // continue\n                }\n                if (!publication.Metadata.CertifierCredential) {\n                    publication.Metadata.CertifierCredential = [];\n                }\n                publication.Metadata.CertifierCredential.push(val);\n            } else if (metaLink.Property === \"a11y:certifierReport\") {\n                let val = metaLink.Href;\n                if (!val) {\n                    return; // continue\n                }\n                val = val.trim();\n                if (!val) {\n                    return; // continue\n                }\n                if (!publication.Metadata.CertifierReport) {\n                    publication.Metadata.CertifierReport = [];\n                }\n                publication.Metadata.CertifierReport.push(val);\n            } else if (metaLink.Property === \"dcterms:conformsTo\") {\n                let val = metaLink.Href;\n                if (!val) {\n                    return; // continue\n                }\n                val = val.trim();\n                if (!val) {\n                    return; // continue\n                }\n                if (!publication.Metadata.ConformsTo) {\n                    publication.Metadata.ConformsTo = [];\n                }\n                publication.Metadata.ConformsTo.push(val);\n            }\n        });\n    }\n    if (opf.Metadata.Meta || opf.Metadata.XMetadata.Meta) {\n\n        interface IMetaTagValue {\n            metaTag: Metafield;\n            val: string;\n        }\n        const AccessibilitySummarys: IMetaTagValue[] = [];\n\n        const metaFunc = (metaTag: Metafield) => {\n            if (metaTag.Name === \"schema:accessMode\" ||\n                metaTag.Property === \"schema:accessMode\") {\n                let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                if (!val) {\n                    return; // continue\n                }\n                val = val.trim();\n                if (!val) {\n                    return; // continue\n                }\n                if (!publication.Metadata.AccessMode) {\n                    publication.Metadata.AccessMode = [];\n                }\n                publication.Metadata.AccessMode.push(val);\n            } else if (metaTag.Name === \"schema:accessibilityFeature\" ||\n                metaTag.Property === \"schema:accessibilityFeature\") {\n                let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                if (!val) {\n                    return; // continue\n                }\n                val = val.trim();\n                if (!val) {\n                    return; // continue\n                }\n                if (!publication.Metadata.AccessibilityFeature) {\n                    publication.Metadata.AccessibilityFeature = [];\n                }\n                publication.Metadata.AccessibilityFeature.push(val);\n            } else if (metaTag.Name === \"schema:accessibilityHazard\" ||\n                metaTag.Property === \"schema:accessibilityHazard\") {\n                let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                if (!val) {\n                    return; // continue\n                }\n                val = val.trim();\n                if (!val) {\n                    return; // continue\n                }\n                if (!publication.Metadata.AccessibilityHazard) {\n                    publication.Metadata.AccessibilityHazard = [];\n                }\n                publication.Metadata.AccessibilityHazard.push(val);\n            } else if (metaTag.Name === \"schema:accessibilitySummary\" ||\n                metaTag.Property === \"schema:accessibilitySummary\") {\n                let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                if (!val) {\n                    return; // continue\n                }\n                val = val.trim();\n                if (!val) {\n                    return; // continue\n                }\n                AccessibilitySummarys.push({\n                    metaTag,\n                    val,\n                });\n            } else if (metaTag.Name === \"schema:accessModeSufficient\" ||\n                metaTag.Property === \"schema:accessModeSufficient\") {\n                let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                if (!val) {\n                    return; // continue\n                }\n                val = val.trim();\n                if (!val) {\n                    return; // continue\n                }\n                if (!publication.Metadata.AccessModeSufficient) {\n                    publication.Metadata.AccessModeSufficient = [];\n                }\n                publication.Metadata.AccessModeSufficient.push(DelinearizeAccessModeSufficient(val));\n            } else if (metaTag.Name === \"schema:accessibilityAPI\" ||\n                metaTag.Property === \"schema:accessibilityAPI\") {\n                let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                if (!val) {\n                    return; // continue\n                }\n                val = val.trim();\n                if (!val) {\n                    return; // continue\n                }\n                if (!publication.Metadata.AccessibilityAPI) {\n                    publication.Metadata.AccessibilityAPI = [];\n                }\n                publication.Metadata.AccessibilityAPI.push(val);\n            } else if (metaTag.Name === \"schema:accessibilityControl\" ||\n                metaTag.Property === \"schema:accessibilityControl\") {\n                let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                if (!val) {\n                    return; // continue\n                }\n                val = val.trim();\n                if (!val) {\n                    return; // continue\n                }\n                if (!publication.Metadata.AccessibilityControl) {\n                    publication.Metadata.AccessibilityControl = [];\n                }\n                publication.Metadata.AccessibilityControl.push(val);\n            } else if (metaTag.Name === \"a11y:certifiedBy\" ||\n                metaTag.Property === \"a11y:certifiedBy\") {\n                let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                if (!val) {\n                    return; // continue\n                }\n                val = val.trim();\n                if (!val) {\n                    return; // continue\n                }\n                if (!publication.Metadata.CertifiedBy) {\n                    publication.Metadata.CertifiedBy = [];\n                }\n                publication.Metadata.CertifiedBy.push(val);\n            } else if (metaTag.Name === \"a11y:certifierCredential\" || // may be link in EPUB3\n                metaTag.Property === \"a11y:certifierCredential\") {\n                let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                if (!val) {\n                    return; // continue\n                }\n                val = val.trim();\n                if (!val) {\n                    return; // continue\n                }\n                if (!publication.Metadata.CertifierCredential) {\n                    publication.Metadata.CertifierCredential = [];\n                }\n                publication.Metadata.CertifierCredential.push(val);\n            }\n        };\n\n        if (opf.Metadata.Meta) {\n            opf.Metadata.Meta.forEach(metaFunc);\n        }\n        if (opf.Metadata.XMetadata.Meta) {\n            opf.Metadata.XMetadata.Meta.forEach(metaFunc);\n        }\n\n        if (AccessibilitySummarys.length === 1) {\n            const tuple = AccessibilitySummarys[0];\n            if (tuple.metaTag.Lang) {\n                publication.Metadata.AccessibilitySummary = {} as IStringMap;\n                // tslint:disable-next-line: max-line-length\n                (publication.Metadata.AccessibilitySummary as IStringMap)[tuple.metaTag.Lang.toLowerCase()] = tuple.val;\n            } else {\n                publication.Metadata.AccessibilitySummary = tuple.val;\n            }\n        } else if (AccessibilitySummarys.length) {\n            publication.Metadata.AccessibilitySummary = {} as IStringMap;\n\n            AccessibilitySummarys.forEach((tuple) => {\n                // https://github.com/readium/architecture/blob/master/streamer/parser/metadata.md#title\n                const xmlLang: string = tuple.metaTag.Lang || opf.Lang;\n                if (xmlLang) {\n                    // tslint:disable-next-line: max-line-length\n                    (publication.Metadata.AccessibilitySummary as IStringMap)[xmlLang.toLowerCase()] = tuple.val;\n                } else if (publication.Metadata.Language &&\n                    publication.Metadata.Language.length &&\n                    // tslint:disable-next-line: max-line-length\n                    !(publication.Metadata.AccessibilitySummary as IStringMap)[publication.Metadata.Language[0].toLowerCase()]) {\n                    // tslint:disable-next-line: max-line-length\n                    (publication.Metadata.AccessibilitySummary as IStringMap)[publication.Metadata.Language[0].toLowerCase()] = tuple.val;\n                } else {\n                    // tslint:disable-next-line: no-string-literal, max-line-length\n                    (publication.Metadata.AccessibilitySummary as IStringMap)[BCP47_UNKNOWN_LANG] = tuple.val;\n                }\n            });\n        }\n\n        const metasDuration: Metafield[] = [];\n        const metasNarrator: Metafield[] = [];\n        const metasActiveClass: Metafield[] = [];\n        const metasPlaybackActiveClass: Metafield[] = [];\n\n        const mFunc = (metaTag: Metafield) => {\n\n            if (metaTag.Name === \"dtb:totalTime\") {\n                metasDuration.push(metaTag);\n            }\n\n            if (metaTag.Name === \"dtb:multimediaType\" || // audioFullText\n                metaTag.Name === \"dtb:multimediaContent\") { // audio,text\n\n                if (!publication.Metadata.AdditionalJSON) {\n                    publication.Metadata.AdditionalJSON = {};\n                }\n                publication.Metadata.AdditionalJSON[metaTag.Name] = metaTag.Content;\n            }\n\n            if (metaTag.Property === \"media:duration\" && !metaTag.Refine) {\n                metasDuration.push(metaTag);\n            }\n            if (metaTag.Property === \"media:narrator\") {\n                metasNarrator.push(metaTag);\n            }\n            if (metaTag.Property === \"media:active-class\") {\n                metasActiveClass.push(metaTag);\n            }\n            if (metaTag.Property === \"media:playback-active-class\") {\n                metasPlaybackActiveClass.push(metaTag);\n            }\n        };\n        if (opf.Metadata.Meta) {\n            opf.Metadata.Meta.forEach(mFunc);\n        }\n        if (opf.Metadata.XMetadata.Meta) {\n            opf.Metadata.XMetadata.Meta.forEach(mFunc);\n        }\n\n        if (metasDuration.length) {\n            publication.Metadata.Duration = timeStrToSeconds(\n                metasDuration[0].Property ? metasDuration[0].Data : metasDuration[0].Content);\n        }\n\n        if (metasNarrator.length) {\n            if (!publication.Metadata.Narrator) {\n                publication.Metadata.Narrator = [];\n            }\n            metasNarrator.forEach((metaNarrator) => {\n                const cont = new Contributor();\n                cont.Name = metaNarrator.Data;\n                publication.Metadata.Narrator.push(cont);\n            });\n        }\n        if (metasActiveClass.length) {\n            if (!publication.Metadata.MediaOverlay) {\n                publication.Metadata.MediaOverlay = new MediaOverlay();\n            }\n            publication.Metadata.MediaOverlay.ActiveClass = metasActiveClass[0].Data;\n        }\n        if (metasPlaybackActiveClass.length) {\n            if (!publication.Metadata.MediaOverlay) {\n                publication.Metadata.MediaOverlay = new MediaOverlay();\n            }\n            publication.Metadata.MediaOverlay.PlaybackActiveClass = metasPlaybackActiveClass[0].Data;\n        }\n    }\n};\n\nexport const loadFileStrFromZipPath = async (\n    linkHref: string, linkHrefDecoded: string, zip: IZip): Promise<string | undefined> => {\n\n    let zipData: Buffer | undefined;\n    try {\n        zipData = await loadFileBufferFromZipPath(linkHref, linkHrefDecoded, zip);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n    if (zipData) {\n        return zipData.toString(\"utf8\");\n    }\n    return Promise.reject(\"?!zipData loadFileStrFromZipPath()\");\n};\n\nexport const loadFileBufferFromZipPath = async (\n    linkHref: string, linkHrefDecoded: string, zip: IZip): Promise<Buffer | undefined> => {\n\n    if (!linkHrefDecoded) {\n        debug(\"!?link.HrefDecoded\");\n        return undefined;\n    }\n    const has = await zipHasEntry(zip, linkHrefDecoded, linkHref);\n    if (!has) {\n        debug(`NOT IN ZIP (loadFileBufferFromZipPath): ${linkHref} --- ${linkHrefDecoded}`);\n        const zipEntries = await zip.getEntries();\n        for (const zipEntry of zipEntries) {\n            debug(zipEntry);\n        }\n        return undefined;\n    }\n\n    let zipStream_: IStreamAndLength;\n    try {\n        zipStream_ = await zip.entryStreamPromise(linkHrefDecoded);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n    const zipStream = zipStream_.stream;\n\n    let zipData: Buffer;\n    try {\n        zipData = await streamToBufferPromise(zipStream);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    return zipData;\n};\n\nconst fillLandmarksFromGuide = (publication: Publication, opf: OPF) => {\n    if (opf.Guide && opf.Guide.length) {\n        opf.Guide.forEach((ref) => {\n            if (ref.Href && opf.ZipPath) {\n                const refHrefDecoded = ref.HrefDecoded;\n                if (!refHrefDecoded) {\n                    debug(\"ref.Href?!\");\n                    return; // foreach\n                }\n                const link = new Link();\n                const zipPath = path.join(path.dirname(opf.ZipPath), refHrefDecoded)\n                    .replace(/\\\\/g, \"/\");\n\n                link.setHrefDecoded(zipPath);\n\n                link.Title = ref.Title;\n                if (!publication.Landmarks) {\n                    publication.Landmarks = [];\n                }\n                publication.Landmarks.push(link);\n            }\n        });\n    }\n};\n\nconst fillTOCFromNCX = (publication: Publication, ncx: NCX) => {\n    if (ncx.Points && ncx.Points.length) {\n        ncx.Points.forEach((point) => {\n            if (!publication.TOC) {\n                publication.TOC = [];\n            }\n            fillTOCFromNavPoint(publication, ncx, point, publication.TOC);\n        });\n    }\n};\n\nconst fillTOCFromNavPoint =\n    (publication: Publication, ncx: NCX, point: NavPoint, node: Link[]) => {\n\n        const srcDecoded = point.Content.SrcDecoded;\n        if (!srcDecoded) {\n            debug(\"?!point.Content.Src\");\n            return;\n        }\n        const link = new Link();\n        const zipPath = path.join(path.dirname(ncx.ZipPath), srcDecoded)\n            .replace(/\\\\/g, \"/\");\n\n        link.setHrefDecoded(zipPath);\n\n        link.Title = point.Text;\n\n        if (point.Points && point.Points.length) {\n            point.Points.forEach((p) => {\n                if (!link.Children) {\n                    link.Children = [];\n                }\n                fillTOCFromNavPoint(publication, ncx, p, link.Children);\n            });\n        }\n\n        node.push(link);\n    };\n\nconst fillPageListFromNCX = (publication: Publication, ncx: NCX) => {\n    if (ncx.PageList && ncx.PageList.PageTarget && ncx.PageList.PageTarget.length) {\n        ncx.PageList.PageTarget.forEach((pageTarget) => {\n            const link = new Link();\n            const srcDecoded = pageTarget.Content.SrcDecoded;\n            if (!srcDecoded) {\n                debug(\"!?srcDecoded\");\n                return; // foreach\n            }\n            const zipPath = path.join(path.dirname(ncx.ZipPath), srcDecoded)\n                .replace(/\\\\/g, \"/\");\n\n            link.setHrefDecoded(zipPath);\n\n            link.Title = pageTarget.Text;\n            if (!publication.PageList) {\n                publication.PageList = [];\n            }\n            publication.PageList.push(link);\n        });\n    }\n};\n\nexport const fillTOC = (publication: Publication, opf: OPF, ncx: NCX | undefined) => {\n\n    if (ncx) {\n        fillTOCFromNCX(publication, ncx);\n        if (!publication.PageList) {\n            fillPageListFromNCX(publication, ncx);\n        }\n    }\n    fillLandmarksFromGuide(publication, opf);\n};\n\nexport const addMediaOverlaySMIL = async (link: Link, manItemSmil: Manifest, opf: OPF, zip: IZip) => {\n\n    if (manItemSmil && manItemSmil.MediaType && manItemSmil.MediaType.startsWith(\"application/smil\")) {\n        if (opf.ZipPath) {\n            const manItemSmilHrefDecoded = manItemSmil.HrefDecoded;\n            if (!manItemSmilHrefDecoded) {\n                debug(\"!?manItemSmil.HrefDecoded\");\n                return;\n            }\n            const smilFilePath = path.join(path.dirname(opf.ZipPath), manItemSmilHrefDecoded)\n                .replace(/\\\\/g, \"/\");\n\n            const has = await zipHasEntry(zip, smilFilePath, smilFilePath);\n            if (!has) {\n                debug(`NOT IN ZIP (addMediaOverlay): ${smilFilePath}`);\n                const zipEntries = await zip.getEntries();\n                for (const zipEntry of zipEntries) {\n                    debug(zipEntry);\n                }\n                return;\n            }\n\n            const mo = new MediaOverlayNode();\n            mo.SmilPathInZip = smilFilePath;\n            mo.initialized = false;\n            link.MediaOverlays = mo;\n\n            const moURL = mediaOverlayURLPath + \"?\" +\n                mediaOverlayURLParam + \"=\" +\n                encodeURIComponent_RFC3986(link.HrefDecoded ? link.HrefDecoded : link.Href);\n\n            // legacy method:\n            if (!link.Properties) {\n                link.Properties = new Properties();\n            }\n            link.Properties.MediaOverlay = moURL;\n\n            // new method:\n            // https://w3c.github.io/sync-media-pub/incorporating-synchronized-narration.html#with-webpub\n            if (!link.Alternate) {\n                link.Alternate = [];\n            }\n            const moLink = new Link();\n            moLink.Href = moURL;\n            moLink.TypeLink = \"application/vnd.syncnarr+json\";\n            moLink.Duration = link.Duration;\n            link.Alternate.push(moLink);\n\n            if (link.Properties && link.Properties.Encrypted) {\n                debug(\"ENCRYPTED SMIL MEDIA OVERLAY: \" + (link.HrefDecoded ? link.HrefDecoded : link.Href));\n            }\n            // LAZY\n            // await lazyLoadMediaOverlays(publication, mo);\n        }\n    }\n};\n"]}