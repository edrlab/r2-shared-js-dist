{"version":3,"file":"publication-parser.js","sourceRoot":"","sources":["../../../../src/parser/publication-parser.ts"],"names":[],"mappings":";;;;AAOA,2BAA6B;AAG7B,+CAA+F;AAC/F,mCAAgE;AAChE,uCAAsE;AACtE,qCAAgE;AAEhE,mCAA6E;AAE7E,SAAsB,uBAAuB,CAAC,QAAgB;;;;;;yBAGnD,qBAAc,CAAC,QAAQ,CAAC,EAAxB,cAAwB;oBAAG,KAAA,uBAAgB,CAAC,QAAQ,CAAC,CAAA;;;yBACvD,sBAAgB,CAAC,QAAQ,CAAC,EAA1B,cAA0B;oBAAG,KAAA,qBAAe,CAAC,QAAQ,CAAC,CAAA;;wBAEtC,WAAM,4BAAmB,CAAC,QAAQ,CAAC,EAAA;;yBAA/C,CAAC,QAAQ,GAAG,SAAmC,CAAC,EAAhD,cAAgD;oBAAG,KAAA,2BAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAA;;;yBAErF,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,EAArE,cAAqE;oBAAG,KAAA,2BAAkB,CAAC,QAAQ,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,iBAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,iBAAQ,CAAC,WAAW,CAAC,EAAE,QAAQ,CAAC,CAAA;;;yBAE5L,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,EAApE,cAAoE;oBAAG,KAAA,2BAAkB,CAAC,QAAQ,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,iBAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,iBAAQ,CAAC,WAAW,CAAC,EAAE,KAAK,CAAC,CAAA;;wBACxL,WAAM,0BAAkB,CAAC,QAAQ,CAAC,EAAA;;0BAAlC,SAAkC;oBAAG,KAAA,yBAAiB,CAAC,QAAQ,CAAC,CAAA;;wBAElD,WAAM,kCAAsB,CAAC,QAAQ,CAAC,EAAA;;oBAAjD,KAAA,CAAC,OAAO,GAAG,SAAsC,CAAC,CAAC,CAAC,CAAC,iCAAqB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;wBAC3F,OAAO,CAAC,MAAM,CAAC,mCAAiC,QAAU,CAAC,CAAA;;;oBAHnE,KAAA,IAGoE,CAAA;;;oBAJxE,KAAA,IAIyE,CAAA;;;oBAN7E,KAAA,IAM8E,CAAA;;;oBARlF,KAAA,IAQmF,CAAA;;;oBAVvF,KAAA,IAUwF,CAAA;;yBAX5F,eAW6F;;;;CAChG;AAfD,0DAeC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as path from \"path\";\n\nimport { Publication } from \"@models/publication\";\nimport { AudioBookParsePromise, AudioBookis, isAudioBookPublication } from \"@parser/audiobook\";\nimport { CbzParsePromise, isCBZPublication } from \"@parser/cbz\";\nimport { DaisyParsePromise, isDaisyPublication } from \"@parser/daisy\";\nimport { EpubParsePromise, isEPUBlication } from \"@parser/epub\";\n\nimport { DivinaParsePromise, Divinais, isDivinaPublication } from \"./divina\";\n\nexport async function PublicationParsePromise(filePath: string): Promise<Publication> {\n    let isAudio: AudioBookis | undefined;\n    let isDivina: Divinais | undefined;\n    return isEPUBlication(filePath) ? EpubParsePromise(filePath) :\n        (isCBZPublication(filePath) ? CbzParsePromise(filePath) :\n            // tslint:disable-next-line: no-conditional-assignment\n            ((isDivina = await isDivinaPublication(filePath)) ? DivinaParsePromise(filePath, isDivina) :\n                // tslint:disable-next-line:max-line-length\n                (/\\.webpub$/.test(path.extname(path.basename(filePath)).toLowerCase()) ? DivinaParsePromise(filePath, (/^http[s]?:\\/\\//.test(filePath) ? Divinais.RemotePacked : Divinais.LocalPacked), \"webpub\") :\n                    // tslint:disable-next-line:max-line-length\n                    (/\\.lcpdf$/.test(path.extname(path.basename(filePath)).toLowerCase()) ? DivinaParsePromise(filePath, (/^http[s]?:\\/\\//.test(filePath) ? Divinais.RemotePacked : Divinais.LocalPacked), \"pdf\") :\n                        (await isDaisyPublication(filePath) ? DaisyParsePromise(filePath) :\n                            // tslint:disable-next-line: no-conditional-assignment max-line-length\n                            (isAudio = await isAudioBookPublication(filePath)) ? AudioBookParsePromise(filePath, isAudio) :\n                                Promise.reject(`Unrecognized publication type ${filePath}`))))));\n}\n"]}