{"version":3,"file":"metadata-collection-json-converter.js","sourceRoot":"","sources":["../../../../src/models/metadata-collection-json-converter.ts"],"names":[],"mappings":";;AAAA,mCAIiB;AAEjB,6DAAmD;AAEnD;IAAA;IA2BA,CAAC;IA1BU,2CAAS,GAAhB,UAAiB,QAAoB;QAGjC,OAAO,cAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;IAEM,6CAAW,GAAlB,UAAmB,KAAgB;QAQ/B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,IAAM,CAAC,GAAG,IAAI,gCAAU,EAAE,CAAC;YAC3B,CAAC,CAAC,IAAI,GAAG,KAAe,CAAC;YACzB,OAAO,CAAC,CAAC;SACZ;aAAM;YACH,OAAO,cAAM,CAAC,WAAW,CAAa,KAAK,EAAE,gCAAU,CAAC,CAAC;SAC5D;IACL,CAAC;IAEM,6DAA2B,GAAlC;QACI,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,8BAAC;AAAD,CAAC,AA3BD,IA2BC;AA3BY,0DAAuB","sourcesContent":["import {\n    IPropertyConverter,\n    JSON as TAJSON,\n    JsonValue,\n} from \"ta-json\";\n\nimport { Collection } from \"./metadata-collection\";\n\nexport class JsonCollectionConverter implements IPropertyConverter {\n    public serialize(property: Collection): JsonValue {\n        // console.log(\"JsonCollectionConverter.serialize()\");\n\n        return TAJSON.serialize(property);\n    }\n\n    public deserialize(value: JsonValue): Collection {\n        // console.log(\"JsonCollectionConverter.deserialize()\");\n\n        // if (value instanceof Array) {\n        //     return value.map((v) => {\n        //         return this.deserialize(v);\n        //     }) as Collection[];\n        // } else\n        if (typeof value === \"string\") {\n            const c = new Collection();\n            c.Name = value as string;\n            return c;\n        } else {\n            return TAJSON.deserialize<Collection>(value, Collection);\n        }\n    }\n\n    public collapseArrayWithSingleItem(): boolean {\n        return true;\n    }\n}\n"]}