{"version":3,"file":"publication-parser.js","sourceRoot":"","sources":["../../../../src/parser/publication-parser.ts"],"names":[],"mappings":";;;;AAOA,6BAA6B;AAG7B,iDAA+F;AAC/F,qCAAgE;AAChE,yCAAsE;AACtE,uCAAgE;AAChE,qCAAmE;AAEnE,SAAsB,uBAAuB,CAAC,QAAgB;;QAC1D,IAAI,OAAgC,CAAC;QACrC,OAAO,qBAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,uBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC1D,CAAC,sBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,qBAAe,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACrD,CAAC,CAAA,MAAM,4BAAmB,CAAC,QAAQ,CAAC,EAAC,CAAC,CAAC,2BAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACjE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,2BAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACnG,CAAC,CAAA,MAAM,0BAAkB,CAAC,QAAQ,CAAC,EAAC,CAAC,CAAC,yBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC;4BAE/D,CAAC,OAAO,GAAG,MAAM,kCAAsB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,iCAAqB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;gCAC3F,OAAO,CAAC,MAAM,CAAC,iCAAiC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5F,CAAC;CAAA;AAVD,0DAUC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as path from \"path\";\n\nimport { Publication } from \"@models/publication\";\nimport { AudioBookParsePromise, AudioBookis, isAudioBookPublication } from \"@parser/audiobook\";\nimport { CbzParsePromise, isCBZPublication } from \"@parser/cbz\";\nimport { DaisyParsePromise, isDaisyPublication } from \"@parser/daisy\";\nimport { EpubParsePromise, isEPUBlication } from \"@parser/epub\";\nimport { DivinaParsePromise, isDivinaPublication } from \"./divina\";\n\nexport async function PublicationParsePromise(filePath: string): Promise<Publication> {\n    let isAudio: AudioBookis | undefined;\n    return isEPUBlication(filePath) ? EpubParsePromise(filePath) :\n        (isCBZPublication(filePath) ? CbzParsePromise(filePath) :\n            (await isDivinaPublication(filePath) ? DivinaParsePromise(filePath) :\n                (/\\.webpub$/.test(path.extname(path.basename(filePath)).toLowerCase()) ? DivinaParsePromise(filePath) :\n                    (await isDaisyPublication(filePath) ? DaisyParsePromise(filePath) :\n                        // tslint:disable-next-line: no-conditional-assignment\n                        (isAudio = await isAudioBookPublication(filePath)) ? AudioBookParsePromise(filePath, isAudio) :\n                            Promise.reject(`Unrecognized publication type ${filePath}`)))));\n}\n"]}