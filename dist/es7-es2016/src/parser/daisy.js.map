{"version":3,"file":"daisy.js","sourceRoot":"","sources":["../../../../src/parser/daisy.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as fs from \"fs\";\nimport * as moment from \"moment\";\nimport * as path from \"path\";\n\nimport { Metadata } from \"@models/metadata\";\nimport { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { isHTTP } from \"@r2-utils-js/_utils/http/UrlUtils\";\nimport { IZip } from \"@r2-utils-js/_utils/zip/zip\";\nimport { zipLoadPromise } from \"@r2-utils-js/_utils/zip/zipFactory\";\n\nimport { zipHasEntry } from \"../_utils/zipHasEntry\";\nimport {\n    addIdentifier, addLanguage, addMediaOverlaySMIL, addOtherMetadata, addTitle,\n    fillPublicationDate, fillSpineAndResource, fillSubject, fillTOC, findContributorInMeta, getNcx,\n    getOpf, lazyLoadMediaOverlays, setPublicationDirection, updateDurations,\n} from \"./epub-daisy-common\";\nimport { Rootfile } from \"./epub/container-rootfile\";\nimport { NCX } from \"./epub/ncx\";\nimport { OPF } from \"./epub/opf\";\nimport { Manifest } from \"./epub/opf-manifest\";\n\nconst debug = debug_(\"r2:shared#parser/daisy\");\n\nexport enum DaisyBookis {\n    LocalExploded = \"LocalExploded\",\n    LocalPacked = \"LocalPacked\",\n    RemoteExploded = \"RemoteExploded\",\n    RemotePacked = \"RemotePacked\",\n}\n\nexport async function isDaisyPublication(urlOrPath: string): Promise<DaisyBookis | undefined> {\n    let p = urlOrPath;\n    const http = isHTTP(urlOrPath);\n    if (http) {\n        const url = new URL(urlOrPath);\n        p = url.pathname;\n        return undefined; // remote DAISY not supported\n    } else if (/\\.daisy[23]?$/.test(path.extname(path.basename(p)).toLowerCase())) {\n\n        return DaisyBookis.LocalPacked;\n\n    } else if (fs.existsSync(path.join(urlOrPath, \"package.opf\")) ||\n        fs.existsSync(path.join(urlOrPath, \"Book.opf\")) ||\n        fs.existsSync(path.join(urlOrPath, \"speechgen.opf\"))\n    ) {\n        if (!fs.existsSync(path.join(urlOrPath, \"META-INF\", \"container.xml\"))) {\n\n            return DaisyBookis.LocalExploded;\n        }\n    } else {\n        let zip: IZip;\n        try {\n            zip = await zipLoadPromise(urlOrPath);\n        } catch (err) {\n            debug(err);\n            return Promise.reject(err);\n        }\n\n        if (!await zipHasEntry(zip, \"META-INF/container.xml\", undefined)) {\n\n            // if (await zipHasEntry(zip, \"package.opf\", undefined) ||\n            //     await zipHasEntry(zip, \"Book.opf\", undefined) ||\n            //     await zipHasEntry(zip, \"speechgen.opf\", undefined)) {\n            //     return DaisyBookis.LocalPacked;\n            // }\n\n            const entries = await zip.getEntries();\n            const opfZipEntryPath = entries.find((entry) => {\n                // regexp fails?!\n                // return /[^/]+\\.opf$/.test(entry);\n                return entry.endsWith(\".opf\"); // && entry.indexOf(\"/\") < 0 && entry.indexOf(\"\\\\\") < 0;\n            });\n            if (!opfZipEntryPath) {\n                return undefined;\n            }\n\n            // TODO: check for <dc:Format>ANSI/NISO Z39.86-2005</dc:Format> ?\n            return DaisyBookis.LocalPacked;\n        }\n    }\n    return undefined;\n}\n\n// const isFileValid = (files: string[]) => {\n//     // const keys = Object.keys(files);\n\n//     if (files.some((file) => file.match(/\\.xml$/)) === false) {\n//         return [false, \"No xml file found.\"];\n//     }\n\n//     if (files.some((file) => file.match(/\\/ncc\\.html$/))) {\n//         return [false, \"DAISY 2 format is not supported.\"];\n//     }\n\n//     // if (files.some((file) => file.match(/\\.mp3$/)) === false) {\n//     //   console.log(\"mp3\");\n//     //   return [false];\n//     // }\n//     // if (files.some((file) => file.match(/\\.smil$/)) === false) {\n//     //   console.log(\"smil\");\n//     //   return [false];\n//     // }\n\n//     return [true];\n// };\n\nexport async function DaisyParsePromise(filePath: string): Promise<Publication> {\n\n    // const isDaisy = await isDaisyPublication(filePath);\n\n    let zip: IZip;\n    try {\n        zip = await zipLoadPromise(filePath);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    if (!zip.hasEntries()) {\n        return Promise.reject(\"Daisy zip empty\");\n    }\n\n    const publication = new Publication();\n    publication.Context = [\"https://readium.org/webpub-manifest/context.jsonld\"];\n    publication.Metadata = new Metadata();\n    publication.Metadata.RDFType = \"http://schema.org/Book\";\n    publication.Metadata.Modified = moment(Date.now()).toDate();\n\n    publication.AddToInternal(\"filename\", path.basename(filePath));\n\n    publication.AddToInternal(\"type\", \"daisy\");\n    publication.AddToInternal(\"zip\", zip);\n\n    // note: does not work in RemoteExploded\n    const entries = await zip.getEntries();\n\n    // const [valid, message] = isFileValid(entries);\n    // if (!valid) {\n    //     return Promise.reject(message || \"File validation failed.\");\n    // }\n\n    // generic \"text/xml\" content type\n    // manifest/item@media-type\n    const opfZipEntryPath = entries.find((entry) => {\n        // regexp fails?!\n        // return /[^/]+\\.opf$/.test(entry);\n        return entry.endsWith(\".opf\"); // && entry.indexOf(\"/\") < 0 && entry.indexOf(\"\\\\\") < 0;\n    });\n    if (!opfZipEntryPath) {\n        return Promise.reject(\"OPF package XML file cannot be found.\");\n    }\n\n    const rootfilePathDecoded = opfZipEntryPath; // || \"package.opf\";\n    if (!rootfilePathDecoded) {\n        return Promise.reject(\"?!rootfile.PathDecoded\");\n    }\n\n    const opf = await getOpf(zip, rootfilePathDecoded, opfZipEntryPath);\n\n    addLanguage(publication, opf);\n\n    addTitle(publication, undefined, opf);\n\n    addIdentifier(publication, opf);\n\n    addOtherMetadata(publication, undefined, opf);\n\n    setPublicationDirection(publication, opf);\n\n    findContributorInMeta(publication, undefined, opf);\n\n    await fillSpineAndResource(publication, undefined, opf, zip, addLinkData);\n\n    let ncx: NCX | undefined;\n    if (opf.Manifest) {\n        let ncxManItem = opf.Manifest.find((manifestItem) => {\n            return manifestItem.MediaType === \"application/x-dtbncx+xml\";\n        });\n        if (!ncxManItem) {\n            ncxManItem = opf.Manifest.find((manifestItem) => {\n                return manifestItem.MediaType === \"text/xml\" &&\n                    manifestItem.Href && manifestItem.Href.endsWith(\".ncx\");\n            });\n        }\n        if (ncxManItem) {\n            ncx = await getNcx(ncxManItem, opf, zip);\n        }\n    }\n\n    fillTOC(publication, opf, ncx);\n\n    fillSubject(publication, opf);\n\n    fillPublicationDate(publication, undefined, opf);\n\n    return publication;\n}\n\nconst addLinkData = async (\n    publication: Publication, _rootfile: Rootfile | undefined,\n    opf: OPF, zip: IZip, linkItem: Link, item: Manifest) => {\n\n    if (publication.Metadata?.AdditionalJSON) {\n\n        // dtb:multimediaContent ==> audio,text\n        const isFullTextAudio = publication.Metadata.AdditionalJSON[\"dtb:multimediaType\"] === \"audioFullText\";\n\n        // dtb:multimediaContent ==> text\n        const isTextOnly = publication.Metadata.AdditionalJSON[\"dtb:multimediaType\"] === \"textNCX\";\n\n        // dtb:multimediaContent ==> audio\n        const isAudioOnly = publication.Metadata.AdditionalJSON[\"dtb:multimediaType\"] === \"audioNCX\";\n\n        if (isFullTextAudio || isTextOnly || isAudioOnly) {\n            await addMediaOverlaySMIL(linkItem, item, opf, zip);\n\n            if (linkItem.MediaOverlays && !linkItem.MediaOverlays.initialized) {\n\n                // mo.initialized true/false is automatically handled\n                await lazyLoadMediaOverlays(publication, linkItem.MediaOverlays);\n\n                if (isFullTextAudio || isAudioOnly) {\n                    updateDurations(linkItem.MediaOverlays.duration, linkItem);\n                }\n            }\n        }\n    }\n};\n"]}