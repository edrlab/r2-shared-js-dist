{"version":3,"file":"transformer-lcp.js","sourceRoot":"","sources":["../../../../src/transform/transformer-lcp.ts"],"names":[],"mappings":";;;AAEA,0EAA2F;AAE3F,gCAAgC;AAIhC,MAAM,KAAK,GAAG,MAAM,CAAC,oBAAoB,CAAC,CAAC;AAG3C;IAEW,QAAQ,CAAC,WAAwB,EAAE,IAAU;QAEhD,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC7B,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACxB,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,KAAK,gCAAgC;eAC5E,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,KAAK,sCAAsC;gBAC5E,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,KAAK,oCAAoC,CAAC;eAC5E,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,KAAK,6CAA6C,CACvF;QACL,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACT,KAAK,CAAC,gCAAgC,CAAC,CAAC;YACxC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACxC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACzC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YAC3C,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEY,eAAe,CACxB,WAAwB,EACxB,IAAU,EACV,MAAwB,EACxB,yBAAkC,EAClC,gBAAwB,EACxB,cAAsB;;YAEtB,MAAM,CAAC,iCAAgB,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,EACzE,MAAM,EAAE,yBAAyB,EAAE,gBAAgB,EAAE,cAAc,CAAC,CAAC;QAC7E,CAAC;KAAA;CACJ;AAxCD,wCAwCC","sourcesContent":["import { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { transformStream as transformStream_ } from \"@r2-lcp-js/transform/transformer-lcp\";\nimport { IStreamAndLength } from \"@utils/zip/zip\";\nimport * as debug_ from \"debug\";\n\nimport { ITransformer } from \"./transformer\";\n\nconst debug = debug_(\"r2:transformer:lcp\");\n// const debugx = debug_(\"r2:transformer:stream:lcp\");\n\nexport class TransformerLCP implements ITransformer {\n\n    public supports(publication: Publication, link: Link): boolean {\n\n        if (!publication.LCP) {\n            return false;\n        }\n\n        if (!publication.LCP.isReady()) {\n            debug(\"LCP not ready!\");\n            return false;\n        }\n\n        const check = link.Properties.Encrypted.Scheme === \"http://readium.org/2014/01/lcp\"\n            && (link.Properties.Encrypted.Profile === \"http://readium.org/lcp/basic-profile\" ||\n                link.Properties.Encrypted.Profile === \"http://readium.org/lcp/profile-1.0\")\n            && link.Properties.Encrypted.Algorithm === \"http://www.w3.org/2001/04/xmlenc#aes256-cbc\"\n            ;\n        if (!check) {\n            debug(\"Incorrect resource LCP fields.\");\n            debug(link.Properties.Encrypted.Scheme);\n            debug(link.Properties.Encrypted.Profile);\n            debug(link.Properties.Encrypted.Algorithm);\n            return false;\n        }\n\n        return true;\n    }\n\n    public async transformStream(\n        publication: Publication,\n        link: Link,\n        stream: IStreamAndLength,\n        isPartialByteRangeRequest: boolean,\n        partialByteBegin: number,\n        partialByteEnd: number): Promise<IStreamAndLength> {\n\n        return transformStream_(publication.LCP, link.Href, link.Properties.Encrypted,\n            stream, isPartialByteRangeRequest, partialByteBegin, partialByteEnd);\n    }\n}\n"]}