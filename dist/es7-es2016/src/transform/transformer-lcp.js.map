{"version":3,"file":"transformer-lcp.js","sourceRoot":"","sources":["../../../../src/transform/transformer-lcp.ts"],"names":[],"mappings":";;;AAEA,0EAAkH;AASlH;IAEW,QAAQ,CAAC,WAAwB,EAAE,IAAU;QAChD,MAAM,CAAC,0BAAS,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IAC5E,CAAC;IAEY,eAAe,CACxB,WAAwB,EACxB,IAAU,EACV,MAAwB,EACxB,yBAAkC,EAClC,gBAAwB,EACxB,cAAsB;;YAEtB,MAAM,CAAC,iCAAgB,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,EACzE,MAAM,EAAE,yBAAyB,EAAE,gBAAgB,EAAE,cAAc,CAAC,CAAC;QAC7E,CAAC;KAAA;CACJ;AAjBD,wCAiBC","sourcesContent":["import { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { supports as supports_, transformStream as transformStream_ } from \"@r2-lcp-js/transform/transformer-lcp\";\nimport { IStreamAndLength } from \"@utils/zip/zip\";\n\nimport { ITransformer } from \"./transformer\";\n\n// import * as debug_ from \"debug\";\n// const debug = debug_(\"r2:transformer:lcp\");\n// const debugx = debug_(\"r2:transformer:stream:lcp\");\n\nexport class TransformerLCP implements ITransformer {\n\n    public supports(publication: Publication, link: Link): boolean {\n        return supports_(publication.LCP, link.Href, link.Properties.Encrypted);\n    }\n\n    public async transformStream(\n        publication: Publication,\n        link: Link,\n        stream: IStreamAndLength,\n        isPartialByteRangeRequest: boolean,\n        partialByteBegin: number,\n        partialByteEnd: number): Promise<IStreamAndLength> {\n\n        return transformStream_(publication.LCP, link.Href, link.Properties.Encrypted,\n            stream, isPartialByteRangeRequest, partialByteBegin, partialByteEnd);\n    }\n}\n"]}