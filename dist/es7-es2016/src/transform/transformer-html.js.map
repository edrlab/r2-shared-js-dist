{"version":3,"file":"transformer-html.js","sourceRoot":"","sources":["../../../../src/transform/transformer-html.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { bufferToStream, streamToBufferPromise } from \"@utils/stream/BufferUtils\";\nimport { IStreamAndLength } from \"@utils/zip/zip\";\nimport * as mime from \"mime-types\";\nimport * as xmldom from \"xmldom\";\nimport { ITransformer } from \"./transformer\";\n\nimport * as debug_ from \"debug\";\nconst debug = debug_(\"r2:shared#transform/transformer-html\");\n\nexport class TransformerHTML implements ITransformer {\n    public supports(publication: Publication, link: Link): boolean {\n\n        let mediaType = mime.lookup(link.Href);\n        if (link && link.TypeLink) {\n            mediaType = link.TypeLink;\n        }\n\n        if (mediaType === \"text/html\" || mediaType === \"application/xhtml+xml\") {\n            const pubDefinesLayout = publication.Metadata && publication.Metadata.Rendition\n                && publication.Metadata.Rendition.Layout;\n            const pubIsFixed = pubDefinesLayout && publication.Metadata.Rendition.Layout === \"fixed\";\n\n            const linkDefinesLayout = link.Properties && link.Properties.Layout;\n            const linkIsFixed = linkDefinesLayout && link.Properties.Layout === \"fixed\";\n\n            if (linkIsFixed || pubIsFixed) {\n                return false;\n            }\n\n            return true; // pass: reflow doc\n        }\n\n        return false;\n    }\n\n    public async transformStream(\n        publication: Publication, link: Link,\n        stream: IStreamAndLength,\n        _isPartialByteRangeRequest: boolean,\n        _partialByteBegin: number, _partialByteEnd: number): Promise<IStreamAndLength> {\n\n        let data: Buffer;\n        try {\n            data = await streamToBufferPromise(stream.stream);\n        } catch (err) {\n            return Promise.reject(err);\n        }\n\n        let buff: Buffer;\n        try {\n            buff = await this.transformBuffer(publication, link, data);\n        } catch (err) {\n            return Promise.reject(err);\n        }\n\n        const sal: IStreamAndLength = {\n            length: buff.length,\n            reset: async () => {\n                return Promise.resolve(sal);\n            },\n            stream: bufferToStream(buff),\n        };\n        return Promise.resolve(sal);\n    }\n\n    private async transformBuffer(_publication: Publication, link: Link, data: Buffer): Promise<Buffer> {\n\n        let mediaType = mime.lookup(link.Href);\n        if (link && link.TypeLink) {\n            mediaType = link.TypeLink;\n        }\n\n        try {\n            const str = data.toString(\"utf8\");\n\n            const dom = typeof mediaType === \"string\" ?\n                new xmldom.DOMParser().parseFromString(str, mediaType) :\n                new xmldom.DOMParser().parseFromString(str);\n\n            // TODO\n\n            const str_ = new xmldom.XMLSerializer().serializeToString(dom) + \"\\n\\n<!-- JUST TESTING -->\";\n            return Promise.resolve(Buffer.from(str_));\n        } catch (err) {\n            debug(\"TransformerHTML fail => no change\");\n            debug(err);\n            return Promise.resolve(data); //  no change\n        }\n    }\n}\n"]}