{"version":3,"file":"epub.js","sourceRoot":"","sources":["../../../../src/parser/epub.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as fs from \"fs\";\nimport { imageSize } from \"image-size\";\nimport { ISize } from \"image-size/dist/types/interface\";\nimport * as moment from \"moment\";\nimport * as path from \"path\";\nimport { URL } from \"url\";\nimport * as xmldom from \"xmldom\";\nimport * as xpath from \"xpath\";\n\nimport { MediaOverlayNode, timeStrToSeconds } from \"@models/media-overlay\";\nimport { DirectionEnum, Metadata } from \"@models/metadata\";\nimport { BelongsTo } from \"@models/metadata-belongsto\";\nimport { Contributor } from \"@models/metadata-contributor\";\nimport { MediaOverlay } from \"@models/metadata-media-overlay\";\nimport { IStringMap } from \"@models/metadata-multilang\";\nimport {\n    LayoutEnum, OrientationEnum, OverflowEnum, PageEnum, Properties, SpreadEnum,\n} from \"@models/metadata-properties\";\nimport { Subject } from \"@models/metadata-subject\";\nimport { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { DelinearizeAccessModeSufficient } from \"@models/ta-json-string-tokens-converter\";\nimport { Encrypted } from \"@r2-lcp-js/models/metadata-encrypted\";\nimport { LCP } from \"@r2-lcp-js/parser/epub/lcp\";\nimport { TaJsonDeserialize } from \"@r2-lcp-js/serializable\";\nimport { encodeURIComponent_RFC3986, isHTTP } from \"@r2-utils-js/_utils/http/UrlUtils\";\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\nimport { XML } from \"@r2-utils-js/_utils/xml-js-mapper\";\nimport { IStreamAndLength, IZip } from \"@r2-utils-js/_utils/zip/zip\";\nimport { zipLoadPromise } from \"@r2-utils-js/_utils/zip/zipFactory\";\nimport { Transformers } from \"@transform/transformer\";\n\nimport { tryDecodeURI } from \"../_utils/decodeURI\";\nimport { zipHasEntry } from \"../_utils/zipHasEntry\";\nimport { Container } from \"./epub/container\";\nimport { Rootfile } from \"./epub/container-rootfile\";\nimport { DisplayOptions } from \"./epub/display-options\";\nimport { Encryption } from \"./epub/encryption\";\nimport { NCX } from \"./epub/ncx\";\nimport { NavPoint } from \"./epub/ncx-navpoint\";\nimport { OPF } from \"./epub/opf\";\nimport { Author } from \"./epub/opf-author\";\nimport { Manifest } from \"./epub/opf-manifest\";\nimport { Metafield } from \"./epub/opf-metafield\";\nimport { Title } from \"./epub/opf-title\";\nimport { SMIL } from \"./epub/smil\";\nimport { Par } from \"./epub/smil-par\";\nimport { Seq } from \"./epub/smil-seq\";\nimport { SeqOrPar } from \"./epub/smil-seq-or-par\";\n\nconst debug = debug_(\"r2:shared#parser/epub\");\n\nconst epub3 = \"3.0\";\nconst epub301 = \"3.0.1\";\nconst epub31 = \"3.1\";\n// const epub2 = \"2.0\";\n// const epub201 = \"2.0.1\";\n\nexport const mediaOverlayURLPath = \"media-overlay.json\";\nexport const mediaOverlayURLParam = \"resource\";\n\n// https://github.com/readium/webpub-manifest/issues/52#issuecomment-601686135\nexport const BCP47_UNKNOWN_LANG = \"und\";\n\nfunction parseSpaceSeparatedString(str: string | undefined | null): string[] {\n    return str ? str.trim().split(\" \").map((role) => {\n        return role.trim();\n    }).filter((role) => {\n        return role.length > 0;\n    }) : [];\n}\n\nexport const addCoverDimensions = async (publication: Publication, coverLink: Link) => {\n\n    const zipInternal = publication.findFromInternal(\"zip\");\n    if (zipInternal) {\n        const zip = zipInternal.Value as IZip;\n\n        const coverLinkHrefDecoded = coverLink.HrefDecoded;\n        if (!coverLinkHrefDecoded) {\n            return;\n        }\n        const has = await zipHasEntry(zip, coverLinkHrefDecoded, coverLink.Href);\n        if (!has) {\n            debug(`NOT IN ZIP (addCoverDimensions): ${coverLink.Href} --- ${coverLinkHrefDecoded}`);\n            const zipEntries = await zip.getEntries();\n            for (const zipEntry of zipEntries) {\n                debug(zipEntry);\n            }\n            return;\n        }\n        let zipStream: IStreamAndLength;\n        try {\n            zipStream = await zip.entryStreamPromise(coverLinkHrefDecoded);\n        } catch (err) {\n            debug(coverLinkHrefDecoded);\n            debug(coverLink.TypeLink);\n            debug(err);\n            return;\n        }\n\n        let zipData: Buffer;\n        try {\n            zipData = await streamToBufferPromise(zipStream.stream);\n\n            const imageInfo = imageSize(zipData) as ISize;\n            if (imageInfo && imageInfo.width && imageInfo.height) {\n                coverLink.Width = imageInfo.width;\n                coverLink.Height = imageInfo.height;\n\n                if (coverLink.TypeLink &&\n                    coverLink.TypeLink.replace(\"jpeg\", \"jpg\").replace(\"+xml\", \"\")\n                    !== (\"image/\" + imageInfo.type)) {\n                    debug(`Wrong image type? ${coverLink.TypeLink} -- ${imageInfo.type}`);\n                }\n            }\n        } catch (err) {\n            debug(coverLinkHrefDecoded);\n            debug(coverLink.TypeLink);\n            debug(err);\n        }\n    }\n};\n\nexport enum EPUBis {\n    LocalExploded = \"LocalExploded\",\n    LocalPacked = \"LocalPacked\",\n    RemoteExploded = \"RemoteExploded\",\n    RemotePacked = \"RemotePacked\",\n}\nexport function isEPUBlication(urlOrPath: string): EPUBis | undefined {\n    let p = urlOrPath;\n    const http = isHTTP(urlOrPath);\n    if (http) {\n        const url = new URL(urlOrPath);\n        p = url.pathname;\n    } else if (fs.existsSync(path.join(urlOrPath, \"META-INF\", \"container.xml\"))) {\n        return EPUBis.LocalExploded;\n    }\n    const fileName = path.basename(p);\n    const ext = path.extname(fileName).toLowerCase();\n\n    const epub = /\\.epub[3]?$/.test(ext);\n    if (epub) {\n        return http ? EPUBis.RemotePacked : EPUBis.LocalPacked;\n    }\n\n    // filePath.replace(/\\//, \"/\").endsWith(\"META-INF/container.xml\")\n    if (/META-INF[\\/|\\\\]container.xml$/.test(p)) {\n        return http ? EPUBis.RemoteExploded : EPUBis.LocalExploded;\n    }\n\n    return undefined;\n}\n\nexport async function EpubParsePromise(filePath: string): Promise<Publication> {\n\n    const isAnEPUB = isEPUBlication(filePath);\n\n    // // excludes EPUBis.RemoteExploded\n    // const canLoad = isAnEPUB === EPUBis.LocalExploded ||\n    //     isAnEPUB === EPUBis.LocalPacked ||\n    //     isAnEPUB === EPUBis.RemotePacked;\n    // if (!canLoad) {\n    //     // TODO? r2-utils-js zip-ext.ts => variant for HTTP without directory listing? (no deterministic zip entries)\n    //     const err = \"Cannot load exploded remote EPUB (needs filesystem access to list directory contents).\";\n    //     debug(err);\n    //     return Promise.reject(err);\n    // }\n\n    let filePathToLoad = filePath;\n    if (isAnEPUB === EPUBis.LocalExploded) { // (must ensure is directory/folder)\n        filePathToLoad = filePathToLoad.replace(/META-INF[\\/|\\\\]container.xml$/, \"\");\n    } else if (isAnEPUB === EPUBis.RemoteExploded) {\n        const url = new URL(filePathToLoad);\n        url.pathname = url.pathname.replace(/META-INF[\\/|\\\\]container.xml$/, \"\");\n        // contains trailing slash\n        filePathToLoad = url.toString();\n    }\n    let zip: IZip;\n    try {\n        zip = await zipLoadPromise(filePathToLoad);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    if (!zip.hasEntries()) {\n        return Promise.reject(\"EPUB zip empty\");\n    }\n\n    const publication = new Publication();\n    publication.Context = [\"https://readium.org/webpub-manifest/context.jsonld\"];\n    publication.Metadata = new Metadata();\n    publication.Metadata.RDFType = \"http://schema.org/Book\";\n    publication.Metadata.Modified = moment(Date.now()).toDate();\n\n    publication.AddToInternal(\"filename\", path.basename(filePath));\n\n    publication.AddToInternal(\"type\", \"epub\");\n    publication.AddToInternal(\"zip\", zip);\n\n    let lcpl: LCP | undefined;\n    const lcplZipPath = \"META-INF/license.lcpl\";\n    let has = await zipHasEntry(zip, lcplZipPath, undefined);\n    if (has) {\n        let lcplZipStream_: IStreamAndLength;\n        try {\n            lcplZipStream_ = await zip.entryStreamPromise(lcplZipPath);\n        } catch (err) {\n            debug(err);\n            return Promise.reject(err);\n        }\n        const lcplZipStream = lcplZipStream_.stream;\n\n        let lcplZipData: Buffer;\n        try {\n            lcplZipData = await streamToBufferPromise(lcplZipStream);\n        } catch (err) {\n            debug(err);\n            return Promise.reject(err);\n        }\n\n        const lcplStr = lcplZipData.toString(\"utf8\");\n        const lcplJson = global.JSON.parse(lcplStr);\n        // debug(lcplJson);\n        lcpl = TaJsonDeserialize<LCP>(lcplJson, LCP);\n        lcpl.ZipPath = lcplZipPath;\n        lcpl.JsonSource = lcplStr;\n        lcpl.init();\n\n        // breakLength: 100  maxArrayLength: undefined\n        // debug(util.inspect(lcpl,\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n        publication.LCP = lcpl;\n\n        // // breakLength: 100  maxArrayLength: undefined\n        // debug(util.inspect(this.LCP,\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n        // https://github.com/readium/readium-lcp-specs/issues/15#issuecomment-358247286\n        // application/vnd.readium.lcp.license-1.0+json (LEGACY)\n        // application/vnd.readium.lcp.license.v1.0+json (NEW)\n        // application/vnd.readium.license.status.v1.0+json (LSD)\n        const mime = \"application/vnd.readium.lcp.license.v1.0+json\";\n        publication.AddLink(mime, [\"license\"], lcpl.ZipPath, undefined);\n    }\n\n    let encryption: Encryption | undefined;\n    const encZipPath = \"META-INF/encryption.xml\";\n    has = await zipHasEntry(zip, encZipPath, undefined);\n    if (has) {\n        let encryptionXmlZipStream_: IStreamAndLength;\n        try {\n            encryptionXmlZipStream_ = await zip.entryStreamPromise(encZipPath);\n        } catch (err) {\n            debug(err);\n            return Promise.reject(err);\n        }\n        const encryptionXmlZipStream = encryptionXmlZipStream_.stream;\n\n        let encryptionXmlZipData: Buffer;\n        try {\n            encryptionXmlZipData = await streamToBufferPromise(encryptionXmlZipStream);\n        } catch (err) {\n            debug(err);\n            return Promise.reject(err);\n        }\n\n        const encryptionXmlStr = encryptionXmlZipData.toString(\"utf8\");\n        const encryptionXmlDoc = new xmldom.DOMParser().parseFromString(encryptionXmlStr);\n\n        encryption = XML.deserialize<Encryption>(encryptionXmlDoc, Encryption);\n        encryption.ZipPath = encZipPath;\n\n        // breakLength: 100  maxArrayLength: undefined\n        // debug(util.inspect(encryption,\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n    }\n\n    const containerZipPath = \"META-INF/container.xml\";\n\n    let containerXmlZipStream_: IStreamAndLength;\n    try {\n        containerXmlZipStream_ = await zip.entryStreamPromise(containerZipPath);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n    const containerXmlZipStream = containerXmlZipStream_.stream;\n\n    let containerXmlZipData: Buffer;\n    try {\n        containerXmlZipData = await streamToBufferPromise(containerXmlZipStream);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    const containerXmlStr = containerXmlZipData.toString(\"utf8\");\n    const containerXmlDoc = new xmldom.DOMParser().parseFromString(containerXmlStr);\n\n    // debug(containerXmlDoc);\n    // debug(containerXmlStr);\n    // const containerXmlRootElement = xpath.select1(\"/\", containerXmlDoc);\n    // debug(containerXmlRootElement.toString());\n\n    const container = XML.deserialize<Container>(containerXmlDoc, Container);\n    container.ZipPath = containerZipPath;\n    // breakLength: 100  maxArrayLength: undefined\n    // debug(util.inspect(container,\n    //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n    const rootfile = container.Rootfile[0];\n\n    const rootfilePathDecoded = rootfile.PathDecoded;\n    if (!rootfilePathDecoded) {\n        return Promise.reject(\"?!rootfile.PathDecoded\");\n    }\n\n    // let timeBegin = process.hrtime();\n    has = await zipHasEntry(zip, rootfilePathDecoded, rootfile.Path);\n    if (!has) {\n        const err = `NOT IN ZIP (container OPF rootfile): ${rootfile.Path} --- ${rootfilePathDecoded}`;\n        debug(err);\n        const zipEntries = await zip.getEntries();\n        for (const zipEntry of zipEntries) {\n            debug(zipEntry);\n        }\n        return Promise.reject(err);\n    }\n\n    let opfZipStream_: IStreamAndLength;\n    try {\n        opfZipStream_ = await zip.entryStreamPromise(rootfilePathDecoded);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n    const opfZipStream = opfZipStream_.stream;\n\n    // const timeElapsed1 = process.hrtime(timeBegin);\n    // debug(`1) ${timeElapsed1[0]} seconds + ${timeElapsed1[1]} nanoseconds`);\n    // timeBegin = process.hrtime();\n\n    let opfZipData: Buffer;\n    try {\n        opfZipData = await streamToBufferPromise(opfZipStream);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    // debug(`${opfZipData.length} bytes`);\n\n    // const timeElapsed2 = process.hrtime(timeBegin);\n    // debug(`2) ${timeElapsed2[0]} seconds + ${timeElapsed2[1]} nanoseconds`);\n    // timeBegin = process.hrtime();\n\n    const opfStr = opfZipData.toString(\"utf8\");\n\n    // const timeElapsed3 = process.hrtime(timeBegin);\n    // debug(`3) ${timeElapsed3[0]} seconds + ${timeElapsed3[1]} nanoseconds`);\n    // timeBegin = process.hrtime();\n\n    // TODO: this takes some time with large OPF XML data\n    // (typically: many manifest items),\n    // but it remains acceptable.\n    // e.g. BasicTechnicalMathWithCalculus.epub with 2.5MB OPF!\n    const opfDoc = new xmldom.DOMParser().parseFromString(opfStr);\n\n    // const timeElapsed4 = process.hrtime(timeBegin);\n    // debug(`4) ${timeElapsed4[0]} seconds + ${timeElapsed4[1]} nanoseconds`);\n    // const timeBegin = process.hrtime();\n\n    // tslint:disable-next-line:no-string-literal\n    // process.env[\"OPF_PARSE\"] = \"true\";\n    // TODO: this takes a MASSIVE amount of time with large OPF XML data\n    // (typically: many manifest items)\n    // e.g. BasicTechnicalMathWithCalculus.epub with 2.5MB OPF!\n    // culprit: XPath lib ... so we use our own mini XPath parser/matcher\n    // (=> performance gain in orders of magnitude!)\n    const opf = XML.deserialize<OPF>(opfDoc, OPF);\n    // tslint:disable-next-line:no-string-literal\n    // process.env[\"OPF_PARSE\"] = \"false\";\n\n    // const timeElapsed5 = process.hrtime(timeBegin);\n    // debug(`5) ${timeElapsed5[0]} seconds + ${timeElapsed5[1]} nanoseconds`);\n\n    opf.ZipPath = rootfilePathDecoded;\n\n    // breakLength: 100  maxArrayLength: undefined\n    // debug(util.inspect(opf,\n    //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n    // const epubVersion = getEpubVersion(rootfile, opf);\n\n    let ncx: NCX | undefined;\n    if (opf.Spine.Toc) {\n        const ncxManItem = opf.Manifest.find((manifestItem) => {\n            return manifestItem.ID === opf.Spine.Toc;\n        });\n        if (ncxManItem) {\n            const dname = path.dirname(opf.ZipPath);\n            const ncxManItemHrefDecoded = ncxManItem.HrefDecoded;\n            if (!ncxManItemHrefDecoded) {\n                return Promise.reject(\"?!ncxManItem.Href\");\n            }\n            const ncxFilePath = path.join(dname, ncxManItemHrefDecoded).replace(/\\\\/g, \"/\");\n\n            has = await zipHasEntry(zip, ncxFilePath, undefined);\n            if (!has) {\n                const err = `NOT IN ZIP (NCX): ${ncxManItem.Href} --- ${ncxFilePath}`;\n                debug(err);\n                const zipEntries = await zip.getEntries();\n                for (const zipEntry of zipEntries) {\n                    debug(zipEntry);\n                }\n                return Promise.reject(err);\n            }\n\n            let ncxZipStream_: IStreamAndLength;\n            try {\n                ncxZipStream_ = await zip.entryStreamPromise(ncxFilePath);\n            } catch (err) {\n                debug(err);\n                return Promise.reject(err);\n            }\n            const ncxZipStream = ncxZipStream_.stream;\n\n            let ncxZipData: Buffer;\n            try {\n                ncxZipData = await streamToBufferPromise(ncxZipStream);\n            } catch (err) {\n                debug(err);\n                return Promise.reject(err);\n            }\n\n            const ncxStr = ncxZipData.toString(\"utf8\");\n            const ncxDoc = new xmldom.DOMParser().parseFromString(ncxStr);\n            ncx = XML.deserialize<NCX>(ncxDoc, NCX);\n            ncx.ZipPath = ncxFilePath;\n\n            // breakLength: 100  maxArrayLength: undefined\n            // debug(util.inspect(ncx,\n            //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n        }\n    }\n\n    if (opf.Metadata) {\n        if (opf.Metadata.Language) {\n            publication.Metadata.Language = opf.Metadata.Language;\n        }\n    }\n\n    addTitle(publication, rootfile, opf);\n\n    addIdentifier(publication, rootfile, opf);\n\n    if (opf.Metadata) {\n        if (opf.Metadata.Rights && opf.Metadata.Rights.length) {\n            publication.Metadata.Rights = opf.Metadata.Rights.join(\" \");\n        }\n        if (opf.Metadata.Description && opf.Metadata.Description.length) {\n            publication.Metadata.Description = opf.Metadata.Description[0];\n        }\n        if (opf.Metadata.Publisher && opf.Metadata.Publisher.length) {\n            publication.Metadata.Publisher = [];\n\n            opf.Metadata.Publisher.forEach((pub) => {\n                const contrib = new Contributor();\n                contrib.Name = pub;\n                publication.Metadata.Publisher.push(contrib);\n            });\n        }\n        if (opf.Metadata.Source && opf.Metadata.Source.length) {\n            publication.Metadata.Source = opf.Metadata.Source[0];\n        }\n\n        if (opf.Metadata.Contributor && opf.Metadata.Contributor.length) {\n            opf.Metadata.Contributor.forEach((cont) => {\n                addContributor(publication, rootfile, opf, cont, undefined);\n            });\n        }\n        if (opf.Metadata.Creator && opf.Metadata.Creator.length) {\n            opf.Metadata.Creator.forEach((cont) => {\n                addContributor(publication, rootfile, opf, cont, \"aut\");\n            });\n        }\n\n        if (opf.Metadata.Link) {\n            opf.Metadata.Link.forEach((metaLink) => {\n                if (metaLink.Property === \"a11y:certifierCredential\") {\n                    let val = metaLink.Href;\n                    if (!val) {\n                        return; // continue\n                    }\n                    val = val.trim();\n                    if (!val) {\n                        return; // continue\n                    }\n                    if (!publication.Metadata.CertifierCredential) {\n                        publication.Metadata.CertifierCredential = [];\n                    }\n                    publication.Metadata.CertifierCredential.push(val);\n                } else if (metaLink.Property === \"a11y:certifierReport\") {\n                    let val = metaLink.Href;\n                    if (!val) {\n                        return; // continue\n                    }\n                    val = val.trim();\n                    if (!val) {\n                        return; // continue\n                    }\n                    if (!publication.Metadata.CertifierReport) {\n                        publication.Metadata.CertifierReport = [];\n                    }\n                    publication.Metadata.CertifierReport.push(val);\n                } else if (metaLink.Property === \"dcterms:conformsTo\") {\n                    let val = metaLink.Href;\n                    if (!val) {\n                        return; // continue\n                    }\n                    val = val.trim();\n                    if (!val) {\n                        return; // continue\n                    }\n                    if (!publication.Metadata.ConformsTo) {\n                        publication.Metadata.ConformsTo = [];\n                    }\n                    publication.Metadata.ConformsTo.push(val);\n                }\n            });\n        }\n        if (opf.Metadata.Meta) {\n            interface IMetaTagValue {\n                metaTag: Metafield;\n                val: string;\n            }\n            const AccessibilitySummarys: IMetaTagValue[] = [];\n\n            opf.Metadata.Meta.forEach((metaTag) => {\n                if (metaTag.Name === \"schema:accessMode\" ||\n                    metaTag.Property === \"schema:accessMode\") {\n                    let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                    if (!val) {\n                        return; // continue\n                    }\n                    val = val.trim();\n                    if (!val) {\n                        return; // continue\n                    }\n                    if (!publication.Metadata.AccessMode) {\n                        publication.Metadata.AccessMode = [];\n                    }\n                    publication.Metadata.AccessMode.push(val);\n                } else if (metaTag.Name === \"schema:accessibilityFeature\" ||\n                    metaTag.Property === \"schema:accessibilityFeature\") {\n                    let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                    if (!val) {\n                        return; // continue\n                    }\n                    val = val.trim();\n                    if (!val) {\n                        return; // continue\n                    }\n                    if (!publication.Metadata.AccessibilityFeature) {\n                        publication.Metadata.AccessibilityFeature = [];\n                    }\n                    publication.Metadata.AccessibilityFeature.push(val);\n                } else if (metaTag.Name === \"schema:accessibilityHazard\" ||\n                    metaTag.Property === \"schema:accessibilityHazard\") {\n                    let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                    if (!val) {\n                        return; // continue\n                    }\n                    val = val.trim();\n                    if (!val) {\n                        return; // continue\n                    }\n                    if (!publication.Metadata.AccessibilityHazard) {\n                        publication.Metadata.AccessibilityHazard = [];\n                    }\n                    publication.Metadata.AccessibilityHazard.push(val);\n                } else if (metaTag.Name === \"schema:accessibilitySummary\" ||\n                    metaTag.Property === \"schema:accessibilitySummary\") {\n                    let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                    if (!val) {\n                        return; // continue\n                    }\n                    val = val.trim();\n                    if (!val) {\n                        return; // continue\n                    }\n                    AccessibilitySummarys.push({\n                        metaTag,\n                        val,\n                    });\n                } else if (metaTag.Name === \"schema:accessModeSufficient\" ||\n                    metaTag.Property === \"schema:accessModeSufficient\") {\n                    let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                    if (!val) {\n                        return; // continue\n                    }\n                    val = val.trim();\n                    if (!val) {\n                        return; // continue\n                    }\n                    if (!publication.Metadata.AccessModeSufficient) {\n                        publication.Metadata.AccessModeSufficient = [];\n                    }\n                    publication.Metadata.AccessModeSufficient.push(DelinearizeAccessModeSufficient(val));\n                } else if (metaTag.Name === \"schema:accessibilityAPI\" ||\n                    metaTag.Property === \"schema:accessibilityAPI\") {\n                    let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                    if (!val) {\n                        return; // continue\n                    }\n                    val = val.trim();\n                    if (!val) {\n                        return; // continue\n                    }\n                    if (!publication.Metadata.AccessibilityAPI) {\n                        publication.Metadata.AccessibilityAPI = [];\n                    }\n                    publication.Metadata.AccessibilityAPI.push(val);\n                } else if (metaTag.Name === \"schema:accessibilityControl\" ||\n                    metaTag.Property === \"schema:accessibilityControl\") {\n                    let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                    if (!val) {\n                        return; // continue\n                    }\n                    val = val.trim();\n                    if (!val) {\n                        return; // continue\n                    }\n                    if (!publication.Metadata.AccessibilityControl) {\n                        publication.Metadata.AccessibilityControl = [];\n                    }\n                    publication.Metadata.AccessibilityControl.push(val);\n                } else if (metaTag.Name === \"a11y:certifiedBy\" ||\n                    metaTag.Property === \"a11y:certifiedBy\") {\n                    let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                    if (!val) {\n                        return; // continue\n                    }\n                    val = val.trim();\n                    if (!val) {\n                        return; // continue\n                    }\n                    if (!publication.Metadata.CertifiedBy) {\n                        publication.Metadata.CertifiedBy = [];\n                    }\n                    publication.Metadata.CertifiedBy.push(val);\n                } else if (metaTag.Name === \"a11y:certifierCredential\" || // may be link in EPUB3\n                    metaTag.Property === \"a11y:certifierCredential\") {\n                    let val = metaTag.Property ? metaTag.Data : metaTag.Content;\n                    if (!val) {\n                        return; // continue\n                    }\n                    val = val.trim();\n                    if (!val) {\n                        return; // continue\n                    }\n                    if (!publication.Metadata.CertifierCredential) {\n                        publication.Metadata.CertifierCredential = [];\n                    }\n                    publication.Metadata.CertifierCredential.push(val);\n                }\n            });\n            if (AccessibilitySummarys.length === 1) {\n                const tuple = AccessibilitySummarys[0];\n                if (tuple.metaTag.Lang) {\n                    publication.Metadata.AccessibilitySummary = {} as IStringMap;\n                    // tslint:disable-next-line: max-line-length\n                    (publication.Metadata.AccessibilitySummary as IStringMap)[tuple.metaTag.Lang.toLowerCase()] = tuple.val;\n                } else {\n                    publication.Metadata.AccessibilitySummary = tuple.val;\n                }\n            } else if (AccessibilitySummarys.length) {\n                publication.Metadata.AccessibilitySummary = {} as IStringMap;\n\n                AccessibilitySummarys.forEach((tuple) => {\n                    // https://github.com/readium/architecture/blob/master/streamer/parser/metadata.md#title\n                    const xmlLang: string = tuple.metaTag.Lang || opf.Lang;\n                    if (xmlLang) {\n                        // tslint:disable-next-line: max-line-length\n                        (publication.Metadata.AccessibilitySummary as IStringMap)[xmlLang.toLowerCase()] = tuple.val;\n                    } else if (publication.Metadata.Language &&\n                        publication.Metadata.Language.length &&\n                        // tslint:disable-next-line: max-line-length\n                        !(publication.Metadata.AccessibilitySummary as IStringMap)[publication.Metadata.Language[0].toLowerCase()]) {\n                        // tslint:disable-next-line: max-line-length\n                        (publication.Metadata.AccessibilitySummary as IStringMap)[publication.Metadata.Language[0].toLowerCase()] = tuple.val;\n                    } else {\n                        // tslint:disable-next-line: no-string-literal, max-line-length\n                        (publication.Metadata.AccessibilitySummary as IStringMap)[BCP47_UNKNOWN_LANG] = tuple.val;\n                    }\n                });\n            }\n\n            const metasDuration: Metafield[] = [];\n            const metasNarrator: Metafield[] = [];\n            const metasActiveClass: Metafield[] = [];\n            const metasPlaybackActiveClass: Metafield[] = [];\n\n            opf.Metadata.Meta.forEach((metaTag) => {\n                if (metaTag.Property === \"media:duration\" && !metaTag.Refine) {\n                    metasDuration.push(metaTag);\n                }\n                if (metaTag.Property === \"media:narrator\") {\n                    metasNarrator.push(metaTag);\n                }\n                if (metaTag.Property === \"media:active-class\") {\n                    metasActiveClass.push(metaTag);\n                }\n                if (metaTag.Property === \"media:playback-active-class\") {\n                    metasPlaybackActiveClass.push(metaTag);\n                }\n            });\n\n            if (metasDuration.length) {\n                publication.Metadata.Duration = timeStrToSeconds(metasDuration[0].Data);\n            }\n            if (metasNarrator.length) {\n                if (!publication.Metadata.Narrator) {\n                    publication.Metadata.Narrator = [];\n                }\n                metasNarrator.forEach((metaNarrator) => {\n                    const cont = new Contributor();\n                    cont.Name = metaNarrator.Data;\n                    publication.Metadata.Narrator.push(cont);\n                });\n            }\n            if (metasActiveClass.length) {\n                if (!publication.Metadata.MediaOverlay) {\n                    publication.Metadata.MediaOverlay = new MediaOverlay();\n                }\n                publication.Metadata.MediaOverlay.ActiveClass = metasActiveClass[0].Data;\n            }\n            if (metasPlaybackActiveClass.length) {\n                if (!publication.Metadata.MediaOverlay) {\n                    publication.Metadata.MediaOverlay = new MediaOverlay();\n                }\n                publication.Metadata.MediaOverlay.PlaybackActiveClass = metasPlaybackActiveClass[0].Data;\n            }\n        }\n    }\n\n    if (opf.Spine && opf.Spine.PageProgression) {\n        switch (opf.Spine.PageProgression) {\n            case \"auto\": {\n                publication.Metadata.Direction = DirectionEnum.Auto;\n                break;\n            }\n            case \"ltr\": {\n                publication.Metadata.Direction = DirectionEnum.LTR;\n                break;\n            }\n            case \"rtl\": {\n                publication.Metadata.Direction = DirectionEnum.RTL;\n                break;\n            }\n        }\n    }\n\n    if (publication.Metadata.Language && publication.Metadata.Language.length &&\n        (!publication.Metadata.Direction || publication.Metadata.Direction === DirectionEnum.Auto)) {\n\n        const lang = publication.Metadata.Language[0].toLowerCase();\n        if ((lang === \"ar\" || lang.startsWith(\"ar-\") ||\n            lang === \"he\" || lang.startsWith(\"he-\") ||\n            lang === \"fa\" || lang.startsWith(\"fa-\")) ||\n            lang === \"zh-Hant\" ||\n            lang === \"zh-TW\") {\n\n            publication.Metadata.Direction = DirectionEnum.RTL;\n        }\n    }\n\n    if (isEpub3OrMore(rootfile, opf)) {\n        findContributorInMeta(publication, rootfile, opf);\n    }\n    await fillSpineAndResource(publication, rootfile, opf, zip);\n\n    await addRendition(publication, rootfile, opf, zip);\n\n    await addCoverRel(publication, rootfile, opf, zip);\n\n    if (encryption) {\n        fillEncryptionInfo(publication, rootfile, opf, encryption, lcpl);\n    }\n\n    await fillTOCFromNavDoc(publication, rootfile, opf, zip);\n\n    if (!publication.TOC || !publication.TOC.length) {\n        if (ncx) {\n            fillTOCFromNCX(publication, rootfile, opf, ncx);\n            if (!publication.PageList) {\n                fillPageListFromNCX(publication, rootfile, opf, ncx);\n            }\n        }\n        fillLandmarksFromGuide(publication, rootfile, opf);\n    }\n\n    if (!publication.PageList && publication.Resources) {\n        // EPUB extended with Adobe Digital Editions page map\n        //  https://wiki.mobileread.com/wiki/Adobe_Digital_Editions#Page-map\n        const pageMapLink = publication.Resources.find((item: Link): boolean => {\n            return item.TypeLink === \"application/oebps-page-map+xml\";\n        });\n        if (pageMapLink) {\n            await fillPageListFromAdobePageMap(publication, rootfile, opf, zip, pageMapLink);\n        }\n    }\n\n    fillCalibreSerieInfo(publication, rootfile, opf);\n    fillSubject(publication, rootfile, opf);\n\n    fillPublicationDate(publication, rootfile, opf);\n\n    // await fillMediaOverlay(publication, rootfile, opf, zip);\n\n    return publication;\n}\n\n// private filePathToTitle(filePath: string): string {\n//     const fileName = path.basename(filePath);\n//     return slugify(fileName, \"_\").replace(/[\\.]/g, \"_\");\n// }\n\nexport async function getAllMediaOverlays(publication: Publication): Promise<MediaOverlayNode[]> {\n    const mos: MediaOverlayNode[] = [];\n\n    const links: Link[] = ([] as Link[]).\n        concat(publication.Spine ? publication.Spine : []).\n        concat(publication.Resources ? publication.Resources : []);\n\n    for (const link of links) {\n        if (link.MediaOverlays) {\n            const mo = link.MediaOverlays;\n            if (!mo.initialized) {\n                try {\n                    await lazyLoadMediaOverlays(publication, mo);\n                } catch (err) {\n                    return Promise.reject(err);\n                }\n            }\n            mos.push(mo);\n        }\n    }\n\n    return Promise.resolve(mos);\n}\n\nexport async function getMediaOverlay(publication: Publication, spineHref: string): Promise<MediaOverlayNode> {\n\n    const links: Link[] = ([] as Link[]).\n        concat(publication.Spine ? publication.Spine : []).\n        concat(publication.Resources ? publication.Resources : []);\n\n    for (const link of links) {\n        if (link.MediaOverlays && link.Href.indexOf(spineHref) >= 0) {\n            const mo = link.MediaOverlays;\n            if (!mo.initialized) {\n                try {\n                    await lazyLoadMediaOverlays(publication, mo);\n                } catch (err) {\n                    return Promise.reject(err);\n                }\n            }\n            return Promise.resolve(mo);\n        }\n    }\n\n    return Promise.reject(`No Media Overlays ${spineHref}`);\n}\n\nexport const lazyLoadMediaOverlays =\n    async (publication: Publication, mo: MediaOverlayNode) => {\n\n    if (mo.initialized || !mo.SmilPathInZip) {\n        return;\n    }\n\n    let link: Link | undefined;\n    if (publication.Resources) {\n\n        link = publication.Resources.find((l) => {\n            if (l.Href === mo.SmilPathInZip) {\n                return true;\n            }\n            return false;\n        });\n        if (!link) {\n            if (publication.Spine) {\n                link = publication.Spine.find((l) => {\n                    if (l.Href === mo.SmilPathInZip) {\n                        return true;\n                    }\n                    return false;\n                });\n            }\n        }\n        if (!link) {\n            const err = \"Asset not declared in publication spine/resources! \" + mo.SmilPathInZip;\n            debug(err);\n            return Promise.reject(err);\n        }\n    }\n\n    const zipInternal = publication.findFromInternal(\"zip\");\n    if (!zipInternal) {\n        return;\n    }\n    const zip = zipInternal.Value as IZip;\n\n    const has = await zipHasEntry(zip, mo.SmilPathInZip, undefined);\n    if (!has) {\n        const err = `NOT IN ZIP (lazyLoadMediaOverlays): ${mo.SmilPathInZip}`;\n        debug(err);\n        const zipEntries = await zip.getEntries();\n        for (const zipEntry of zipEntries) {\n            debug(zipEntry);\n        }\n        return Promise.reject(err);\n    }\n\n    let smilZipStream_: IStreamAndLength;\n    try {\n        smilZipStream_ = await zip.entryStreamPromise(mo.SmilPathInZip);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    if (link && link.Properties && link.Properties.Encrypted) {\n        let decryptFail = false;\n        let transformedStream: IStreamAndLength;\n        try {\n            transformedStream = await Transformers.tryStream(\n                publication, link, undefined,\n                smilZipStream_,\n                false,\n                0,\n                0,\n                undefined,\n            );\n        } catch (err) {\n            debug(err);\n            return Promise.reject(err);\n        }\n        if (transformedStream) {\n            smilZipStream_ = transformedStream;\n        } else {\n            decryptFail = true;\n        }\n\n        if (decryptFail) {\n            const err = \"Encryption scheme not supported.\";\n            debug(err);\n            return Promise.reject(err);\n        }\n    }\n\n    const smilZipStream = smilZipStream_.stream;\n\n    let smilZipData: Buffer;\n    try {\n        smilZipData = await streamToBufferPromise(smilZipStream);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    const smilStr = smilZipData.toString(\"utf8\");\n    const smilXmlDoc = new xmldom.DOMParser().parseFromString(smilStr);\n    const smil = XML.deserialize<SMIL>(smilXmlDoc, SMIL);\n    smil.ZipPath = mo.SmilPathInZip;\n\n    mo.initialized = true;\n    debug(\"PARSED SMIL: \" + mo.SmilPathInZip);\n\n    // breakLength: 100  maxArrayLength: undefined\n    // debug(util.inspect(smil,\n    //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n    mo.Role = [];\n    mo.Role.push(\"section\");\n\n    if (smil.Body) {\n        if (smil.Body.EpubType) {\n            const roles = parseSpaceSeparatedString(smil.Body.EpubType);\n            for (const role of roles) {\n                if (!role.length) {\n                    return;\n                }\n                if (mo.Role.indexOf(role) < 0) {\n                    mo.Role.push(role);\n                }\n            }\n        }\n        if (smil.Body.TextRef) {\n            const smilBodyTextRefDecoded = smil.Body.TextRefDecoded;\n            if (!smilBodyTextRefDecoded) {\n                debug(\"!?smilBodyTextRefDecoded\");\n            } else {\n                const zipPath = path.join(path.dirname(smil.ZipPath), smilBodyTextRefDecoded)\n                    .replace(/\\\\/g, \"/\");\n                mo.Text = zipPath;\n            }\n        }\n        if (smil.Body.Children && smil.Body.Children.length) {\n            smil.Body.Children.forEach((seqChild) => {\n                if (!mo.Children) {\n                    mo.Children = [];\n                }\n                addSeqToMediaOverlay(smil, publication, mo, mo.Children, seqChild);\n            });\n        }\n    }\n\n    return;\n};\n\n// const fillMediaOverlay =\n//     async (publication: Publication, rootfile: Rootfile, opf: OPF, zip: IZip) => {\n\n//         if (!publication.Resources) {\n//             return;\n//         }\n\n//         for (const item of publication.Resources) {\n//             if (item.TypeLink !== \"application/smil+xml\") {\n//                 continue;\n//             }\n\n//             const itemHrefDecoded = item.HrefDecoded;\n//             if (!itemHrefDecoded) {\n//                 debug(\"?!item.HrefDecoded\");\n//                 continue;\n//             }\n//             const has = await zipHasEntry(zip, itemHrefDecoded, item.Href);\n//             if (!has) {\n//                 debug(`NOT IN ZIP (fillMediaOverlay): ${item.HrefDecoded} --- ${itemHrefDecoded}`);\n//                 const zipEntries = await zip.getEntries();\n//                 for (const zipEntry of zipEntries) {\n//                     debug(zipEntry);\n//                 }\n//                 continue;\n//             }\n\n//             const manItemsHtmlWithSmil: Manifest[] = [];\n//             opf.Manifest.forEach((manItemHtmlWithSmil) => {\n//                 if (manItemHtmlWithSmil.MediaOverlay) { // HTML\n//                     const manItemSmil = opf.Manifest.find((mi) => {\n//                         if (mi.ID === manItemHtmlWithSmil.MediaOverlay) {\n//                             return true;\n//                         }\n//                         return false;\n//                     });\n//                     if (manItemSmil && opf.ZipPath) {\n//                         const manItemSmilHrefDecoded = manItemSmil.HrefDecoded;\n//                         if (!manItemSmilHrefDecoded) {\n//                             debug(\"!?manItemSmil.HrefDecoded\");\n//                             return; // foreach\n//                         }\n//                         const smilFilePath = path.join(path.dirname(opf.ZipPath), manItemSmilHrefDecoded)\n//                                 .replace(/\\\\/g, \"/\");\n//                         if (smilFilePath === itemHrefDecoded) {\n//                             manItemsHtmlWithSmil.push(manItemHtmlWithSmil);\n//                         } else {\n//                             debug(`smilFilePath !== itemHrefDecoded ?! ${smilFilePath} ${itemHrefDecoded}`);\n//                         }\n//                     }\n//                 }\n//             });\n\n//             const mo = new MediaOverlayNode();\n//             mo.SmilPathInZip = itemHrefDecoded;\n//             mo.initialized = false;\n\n//             manItemsHtmlWithSmil.forEach((manItemHtmlWithSmil) => {\n\n//                 if (!opf.ZipPath) {\n//                     return;\n//                 }\n//                 const manItemHtmlWithSmilHrefDecoded = manItemHtmlWithSmil.HrefDecoded;\n//                 if (!manItemHtmlWithSmilHrefDecoded) {\n//                     debug(\"?!manItemHtmlWithSmil.HrefDecoded\");\n//                     return; // foreach\n//                 }\n//                 const htmlPathInZip = path.join(path.dirname(opf.ZipPath), manItemHtmlWithSmilHrefDecoded)\n//                     .replace(/\\\\/g, \"/\");\n\n//                 const link = findLinKByHref(publication, rootfile, opf, htmlPathInZip);\n//                 if (link) {\n//                     if (link.MediaOverlays) {\n//                         debug(`#### MediaOverlays?! ${htmlPathInZip} => ${link.MediaOverlays.SmilPathInZip}`);\n//                         return; // continue for each\n//                     }\n\n//                     const moURL = mediaOverlayURLPath + \"?\" +\n//                         mediaOverlayURLParam + \"=\" + encodeURIComponent_RFC3986(link.Href);\n\n//                     // legacy method:\n//                     if (!link.Properties) {\n//                         link.Properties = new Properties();\n//                     }\n//                     link.Properties.MediaOverlay = moURL;\n\n//                     // new method:\n//                     // https://w3c.github.io/sync-media-pub/incorporating-synchronized-narration.html#with-webpub\n//                     if (!link.Alternate) {\n//                         link.Alternate = [];\n//                     }\n//                     const moLink = new Link();\n//                     moLink.Href = moURL;\n//                     moLink.TypeLink = \"application/vnd.syncnarr+json\";\n//                     moLink.Duration = link.Duration;\n//                     link.Alternate.push(moLink);\n//                 }\n//             });\n\n//             if (item.Properties && item.Properties.Encrypted) {\n//                 debug(\"ENCRYPTED SMIL MEDIA OVERLAY: \" + item.Href);\n//                 continue;\n//             }\n//             // LAZY\n//             // await lazyLoadMediaOverlays(publication, mo);\n//         }\n\n//         return;\n//     };\n\nconst addSeqToMediaOverlay = (\n    smil: SMIL, publication: Publication,\n    rootMO: MediaOverlayNode, mo: MediaOverlayNode[], seqChild: SeqOrPar) => {\n\n    if (!smil.ZipPath) {\n        return;\n    }\n\n    const moc = new MediaOverlayNode();\n    moc.initialized = rootMO.initialized;\n    mo.push(moc);\n\n    if (seqChild instanceof Seq) {\n        moc.Role = [];\n        moc.Role.push(\"section\");\n\n        const seq = seqChild as Seq;\n\n        if (seq.EpubType) {\n            const roles = parseSpaceSeparatedString(seq.EpubType);\n            for (const role of roles) {\n                if (!role.length) {\n                    return;\n                }\n                if (moc.Role.indexOf(role) < 0) {\n                    moc.Role.push(role);\n                }\n            }\n        }\n\n        if (seq.TextRef) {\n            const seqTextRefDecoded = seq.TextRefDecoded;\n            if (!seqTextRefDecoded) {\n                debug(\"!?seqTextRefDecoded\");\n            } else {\n                const zipPath = path.join(path.dirname(smil.ZipPath), seqTextRefDecoded)\n                    .replace(/\\\\/g, \"/\");\n                moc.Text = zipPath;\n            }\n        }\n\n        if (seq.Children && seq.Children.length) {\n            seq.Children.forEach((child) => {\n                if (!moc.Children) {\n                    moc.Children = [];\n                }\n                addSeqToMediaOverlay(smil, publication, rootMO, moc.Children, child);\n            });\n        }\n    } else { // Par\n        const par = seqChild as Par;\n\n        if (par.EpubType) {\n            const roles = parseSpaceSeparatedString(par.EpubType);\n            for (const role of roles) {\n                if (!role.length) {\n                    return;\n                }\n                if (!moc.Role) {\n                    moc.Role = [];\n                }\n                if (moc.Role.indexOf(role) < 0) {\n                    moc.Role.push(role);\n                }\n            }\n        }\n\n        if (par.Text && par.Text.Src) {\n            const parTextSrcDcoded = par.Text.SrcDecoded;\n            if (!parTextSrcDcoded) {\n                debug(\"?!parTextSrcDcoded\");\n            } else {\n                const zipPath = path.join(path.dirname(smil.ZipPath), parTextSrcDcoded)\n                    .replace(/\\\\/g, \"/\");\n                moc.Text = zipPath;\n            }\n        }\n        if (par.Audio && par.Audio.Src) {\n            const parAudioSrcDcoded = par.Audio.SrcDecoded;\n            if (!parAudioSrcDcoded) {\n                debug(\"?!parAudioSrcDcoded\");\n            } else {\n                const zipPath = path.join(path.dirname(smil.ZipPath), parAudioSrcDcoded)\n                    .replace(/\\\\/g, \"/\");\n                moc.Audio = zipPath;\n                moc.Audio += \"#t=\";\n                moc.Audio += par.Audio.ClipBegin ? timeStrToSeconds(par.Audio.ClipBegin) : \"0\";\n                if (par.Audio.ClipEnd) {\n                    moc.Audio += \",\";\n                    moc.Audio += timeStrToSeconds(par.Audio.ClipEnd);\n                }\n            }\n        }\n    }\n};\n\nconst fillPublicationDate = (publication: Publication, rootfile: Rootfile, opf: OPF) => {\n\n    if (opf.Metadata && opf.Metadata.Date && opf.Metadata.Date.length) {\n\n        if (isEpub3OrMore(rootfile, opf) && opf.Metadata.Date[0] && opf.Metadata.Date[0].Data) {\n            const token = opf.Metadata.Date[0].Data;\n            try {\n                const mom = moment(token);\n                if (mom.isValid()) {\n                    publication.Metadata.PublicationDate = mom.toDate();\n                }\n            } catch (err) {\n                debug(\"INVALID DATE/TIME? \" + token);\n            }\n            return;\n        }\n\n        opf.Metadata.Date.forEach((date) => {\n            if (date.Data && date.Event && date.Event.indexOf(\"publication\") >= 0) {\n                const token = date.Data;\n                try {\n                    const mom = moment(token);\n                    if (mom.isValid()) {\n                        publication.Metadata.PublicationDate = mom.toDate();\n                    }\n                } catch (err) {\n                    debug(\"INVALID DATE/TIME? \" + token);\n                }\n            }\n        });\n    }\n};\n\nconst findContributorInMeta = (publication: Publication, rootfile: Rootfile, opf: OPF) => {\n\n    if (opf.Metadata && opf.Metadata.Meta) {\n        opf.Metadata.Meta.forEach((meta) => {\n            if (meta.Property === \"dcterms:creator\" || meta.Property === \"dcterms:contributor\") {\n                const cont = new Author();\n                cont.Data = meta.Data;\n                cont.ID = meta.ID;\n                addContributor(publication, rootfile, opf, cont, undefined);\n            }\n        });\n    }\n};\n\nconst addContributor = (\n    publication: Publication, rootfile: Rootfile, opf: OPF, cont: Author, forcedRole: string | undefined) => {\n\n    const contributor = new Contributor();\n    let role: string | undefined;\n\n    // const epubVersion = getEpubVersion(rootfile, opf);\n\n    if (isEpub3OrMore(rootfile, opf)) {\n\n        if (cont.FileAs) {\n            contributor.SortAs = cont.FileAs;\n        } else {\n            const metaFileAs = findMetaByRefineAndProperty(rootfile, opf, cont.ID, \"file-as\");\n            if (metaFileAs && metaFileAs.Property === \"file-as\") {\n                contributor.SortAs = metaFileAs.Data;\n            }\n        }\n\n        const metaRole = findMetaByRefineAndProperty(rootfile, opf, cont.ID, \"role\");\n        if (metaRole && metaRole.Property === \"role\") {\n            role = metaRole.Data;\n        }\n        if (!role && forcedRole) {\n            role = forcedRole;\n        }\n\n        const metaAlt = findAllMetaByRefineAndProperty(rootfile, opf, cont.ID, \"alternate-script\");\n        if (metaAlt && metaAlt.length) {\n            contributor.Name = {} as IStringMap;\n\n            metaAlt.forEach((m) => {\n                if (m.Lang) {\n                    (contributor.Name as IStringMap)[m.Lang] = m.Data;\n                }\n            });\n\n            // https://github.com/readium/architecture/blob/master/streamer/parser/metadata.md#title\n            const xmlLang: string = cont.Lang || opf.Lang;\n            if (xmlLang) {\n                contributor.Name[xmlLang.toLowerCase()] = cont.Data;\n            } else if (publication.Metadata &&\n                publication.Metadata.Language &&\n                publication.Metadata.Language.length &&\n                !contributor.Name[publication.Metadata.Language[0].toLowerCase()]) {\n                contributor.Name[publication.Metadata.Language[0].toLowerCase()] = cont.Data;\n            } else {\n                // tslint:disable-next-line: no-string-literal\n                contributor.Name[BCP47_UNKNOWN_LANG] = cont.Data;\n            }\n        } else {\n            contributor.Name = cont.Data;\n        }\n    } else {\n        contributor.Name = cont.Data;\n        role = cont.Role;\n        if (!role && forcedRole) {\n            role = forcedRole;\n        }\n    }\n\n    if (role) {\n        switch (role) {\n            case \"aut\": {\n                if (!publication.Metadata.Author) {\n                    publication.Metadata.Author = [];\n                }\n                publication.Metadata.Author.push(contributor);\n                break;\n            }\n            case \"trl\": {\n                if (!publication.Metadata.Translator) {\n                    publication.Metadata.Translator = [];\n                }\n                publication.Metadata.Translator.push(contributor);\n                break;\n            }\n            case \"art\": {\n                if (!publication.Metadata.Artist) {\n                    publication.Metadata.Artist = [];\n                }\n                publication.Metadata.Artist.push(contributor);\n                break;\n            }\n            case \"edt\": {\n                if (!publication.Metadata.Editor) {\n                    publication.Metadata.Editor = [];\n                }\n                publication.Metadata.Editor.push(contributor);\n                break;\n            }\n            case \"ill\": {\n                if (!publication.Metadata.Illustrator) {\n                    publication.Metadata.Illustrator = [];\n                }\n                publication.Metadata.Illustrator.push(contributor);\n                break;\n            }\n            case \"ltr\": {\n                if (!publication.Metadata.Letterer) {\n                    publication.Metadata.Letterer = [];\n                }\n                publication.Metadata.Letterer.push(contributor);\n                break;\n            }\n            case \"pen\": {\n                if (!publication.Metadata.Penciler) {\n                    publication.Metadata.Penciler = [];\n                }\n                publication.Metadata.Penciler.push(contributor);\n                break;\n            }\n            case \"clr\": {\n                if (!publication.Metadata.Colorist) {\n                    publication.Metadata.Colorist = [];\n                }\n                publication.Metadata.Colorist.push(contributor);\n                break;\n            }\n            case \"ink\": {\n                if (!publication.Metadata.Inker) {\n                    publication.Metadata.Inker = [];\n                }\n                publication.Metadata.Inker.push(contributor);\n                break;\n            }\n            case \"nrt\": {\n                if (!publication.Metadata.Narrator) {\n                    publication.Metadata.Narrator = [];\n                }\n                publication.Metadata.Narrator.push(contributor);\n                break;\n            }\n            case \"pbl\": {\n                if (!publication.Metadata.Publisher) {\n                    publication.Metadata.Publisher = [];\n                }\n                publication.Metadata.Publisher.push(contributor);\n                break;\n            }\n            default: {\n                contributor.Role = [role];\n\n                if (!publication.Metadata.Contributor) {\n                    publication.Metadata.Contributor = [];\n                }\n                publication.Metadata.Contributor.push(contributor);\n            }\n        }\n    }\n};\n\nconst addIdentifier = (publication: Publication, _rootfile: Rootfile, opf: OPF) => {\n    if (opf.Metadata && opf.Metadata.Identifier) {\n        if (opf.UniqueIdentifier && opf.Metadata.Identifier.length > 1) {\n            opf.Metadata.Identifier.forEach((iden) => {\n                if (iden.ID === opf.UniqueIdentifier) {\n                    publication.Metadata.Identifier = iden.Data;\n                }\n            });\n        } else if (opf.Metadata.Identifier.length > 0) {\n            publication.Metadata.Identifier = opf.Metadata.Identifier[0].Data;\n        }\n    }\n};\n\nconst addTitle = (publication: Publication, rootfile: Rootfile, opf: OPF) => {\n\n    if (isEpub3OrMore(rootfile, opf)) {\n        let mainTitle: Title | undefined;\n        let subTitle: Title | undefined;\n        let subTitleDisplaySeq = 0;\n\n        if (opf.Metadata &&\n            opf.Metadata.Title &&\n            opf.Metadata.Title.length) {\n\n            if (opf.Metadata.Meta) {\n                const tt = opf.Metadata.Title.find((title) => {\n                    const refineID = \"#\" + title.ID;\n\n                    const m = opf.Metadata.Meta.find((meta) => {\n                        // meta.Property === \"title-type\"\n                        if (meta.Data === \"main\" && meta.Refine === refineID) {\n                            return true;\n                        }\n                        return false;\n                    });\n                    if (m) {\n                        return true;\n                    }\n                    return false;\n                });\n                if (tt) {\n                    mainTitle = tt;\n                }\n\n                opf.Metadata.Title.forEach((title) => {\n                    const refineID = \"#\" + title.ID;\n\n                    const m = opf.Metadata.Meta.find((meta) => {\n                        // meta.Property === \"title-type\"\n                        if (meta.Data === \"subtitle\" && meta.Refine === refineID) {\n                            return true;\n                        }\n                        return false;\n                    });\n                    if (m) {\n                        let titleDisplaySeq = 0;\n                        const mds = opf.Metadata.Meta.find((meta) => {\n                            if (meta.Property === \"display-seq\" && meta.Refine === refineID) {\n                                return true;\n                            }\n                            return false;\n                        });\n                        if (mds) {\n                            try {\n                                titleDisplaySeq = parseInt(mds.Data, 10);\n                            } catch (err) {\n                                debug(err);\n                                debug(mds.Data);\n                                titleDisplaySeq = 0;\n                            }\n                            if (isNaN(titleDisplaySeq)) {\n                                debug(\"NaN\");\n                                debug(mds.Data);\n                                titleDisplaySeq = 0;\n                            }\n                        } else {\n                            titleDisplaySeq = 0;\n                        }\n                        if (!subTitle || titleDisplaySeq < subTitleDisplaySeq) {\n                            subTitle = title;\n                            subTitleDisplaySeq = titleDisplaySeq;\n                        }\n                    }\n                });\n            }\n\n            if (!mainTitle) {\n                mainTitle = opf.Metadata.Title[0];\n            }\n        }\n\n        if (mainTitle) {\n            const metaAlt = findAllMetaByRefineAndProperty(rootfile, opf, mainTitle.ID, \"alternate-script\");\n            if (metaAlt && metaAlt.length) {\n                publication.Metadata.Title = {} as IStringMap;\n\n                metaAlt.forEach((m) => {\n                    if (m.Lang) {\n                        (publication.Metadata.Title as IStringMap)[m.Lang.toLowerCase()] = m.Data;\n                    }\n                });\n\n                // https://github.com/readium/architecture/blob/master/streamer/parser/metadata.md#title\n                const xmlLang: string = mainTitle.Lang || opf.Lang;\n                if (xmlLang) {\n                    publication.Metadata.Title[xmlLang.toLowerCase()] = mainTitle.Data;\n                } else if (publication.Metadata.Language &&\n                    publication.Metadata.Language.length &&\n                    !publication.Metadata.Title[publication.Metadata.Language[0].toLowerCase()]) {\n                    publication.Metadata.Title[publication.Metadata.Language[0].toLowerCase()] = mainTitle.Data;\n                } else {\n                    // tslint:disable-next-line: no-string-literal\n                    publication.Metadata.Title[BCP47_UNKNOWN_LANG] = mainTitle.Data;\n                }\n\n            } else {\n                publication.Metadata.Title = mainTitle.Data;\n            }\n        }\n\n        if (subTitle) {\n            const metaAlt = findAllMetaByRefineAndProperty(rootfile, opf, subTitle.ID, \"alternate-script\");\n            if (metaAlt && metaAlt.length) {\n                publication.Metadata.SubTitle = {} as IStringMap;\n\n                metaAlt.forEach((m) => {\n                    if (m.Lang) {\n                        (publication.Metadata.SubTitle as IStringMap)[m.Lang.toLowerCase()] = m.Data;\n                    }\n                });\n\n                // https://github.com/readium/architecture/blob/master/streamer/parser/metadata.md#title\n                const xmlLang: string = subTitle.Lang || opf.Lang;\n                if (xmlLang) {\n                    publication.Metadata.SubTitle[xmlLang.toLowerCase()] = subTitle.Data;\n                } else if (publication.Metadata.Language &&\n                    publication.Metadata.Language.length &&\n                    !publication.Metadata.SubTitle[publication.Metadata.Language[0].toLowerCase()]) {\n                    publication.Metadata.SubTitle[publication.Metadata.Language[0].toLowerCase()] = subTitle.Data;\n                } else {\n                    // tslint:disable-next-line: no-string-literal\n                    publication.Metadata.SubTitle[BCP47_UNKNOWN_LANG] = subTitle.Data;\n                }\n\n            } else {\n                publication.Metadata.SubTitle = subTitle.Data;\n            }\n        }\n\n    } else {\n        if (opf.Metadata &&\n            opf.Metadata.Title &&\n            opf.Metadata.Title.length) {\n\n            publication.Metadata.Title = opf.Metadata.Title[0].Data;\n        }\n    }\n};\n\nconst addRelAndPropertiesToLink =\n    async (publication: Publication, link: Link, linkEpub: Manifest, rootfile: Rootfile, opf: OPF) => {\n\n        if (linkEpub.Properties) {\n            await addToLinkFromProperties(publication, link, linkEpub.Properties);\n        }\n        const spineProperties = findPropertiesInSpineForManifest(linkEpub, rootfile, opf);\n        if (spineProperties) {\n            await addToLinkFromProperties(publication, link, spineProperties);\n        }\n    };\n\nconst addToLinkFromProperties = async (publication: Publication, link: Link, propertiesString: string) => {\n\n    const properties = parseSpaceSeparatedString(propertiesString);\n    const propertiesStruct = new Properties();\n\n    // https://idpf.github.io/epub-vocabs/rendition/\n\n    for (const p of properties) {\n        switch (p) {\n            case \"cover-image\": {\n                link.AddRel(\"cover\");\n                await addCoverDimensions(publication, link);\n                break;\n            }\n            case \"nav\": {\n                link.AddRel(\"contents\");\n                break;\n            }\n            case \"scripted\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"js\");\n                break;\n            }\n            case \"mathml\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"mathml\");\n                break;\n            }\n            case \"onix-record\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"onix\");\n                break;\n            }\n            case \"svg\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"svg\");\n                break;\n            }\n            case \"xmp-record\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"xmp\");\n                break;\n            }\n            case \"remote-resources\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"remote-resources\");\n                break;\n            }\n            case \"page-spread-left\": {\n                propertiesStruct.Page = PageEnum.Left;\n                break;\n            }\n            case \"page-spread-right\": {\n                propertiesStruct.Page = PageEnum.Right;\n                break;\n            }\n            case \"page-spread-center\": {\n                propertiesStruct.Page = PageEnum.Center;\n                break;\n            }\n            case \"rendition:spread-none\": {\n                propertiesStruct.Spread = SpreadEnum.None;\n                break;\n            }\n            case \"rendition:spread-auto\": {\n                propertiesStruct.Spread = SpreadEnum.Auto;\n                break;\n            }\n            case \"rendition:spread-landscape\": {\n                propertiesStruct.Spread = SpreadEnum.Landscape;\n                break;\n            }\n            case \"rendition:spread-portrait\": {\n                propertiesStruct.Spread = SpreadEnum.Both; // https://github.com/readium/webpub-manifest/issues/24\n                break;\n            }\n            case \"rendition:spread-both\": {\n                propertiesStruct.Spread = SpreadEnum.Both;\n                break;\n            }\n            case \"rendition:layout-reflowable\": {\n                propertiesStruct.Layout = LayoutEnum.Reflowable;\n                break;\n            }\n            case \"rendition:layout-pre-paginated\": {\n                propertiesStruct.Layout = LayoutEnum.Fixed;\n                break;\n            }\n            case \"rendition:orientation-auto\": {\n                propertiesStruct.Orientation = OrientationEnum.Auto;\n                break;\n            }\n            case \"rendition:orientation-landscape\": {\n                propertiesStruct.Orientation = OrientationEnum.Landscape;\n                break;\n            }\n            case \"rendition:orientation-portrait\": {\n                propertiesStruct.Orientation = OrientationEnum.Portrait;\n                break;\n            }\n            case \"rendition:flow-auto\": {\n                propertiesStruct.Overflow = OverflowEnum.Auto;\n                break;\n            }\n            case \"rendition:flow-paginated\": {\n                propertiesStruct.Overflow = OverflowEnum.Paginated;\n                break;\n            }\n            case \"rendition:flow-scrolled-continuous\": {\n                propertiesStruct.Overflow = OverflowEnum.ScrolledContinuous;\n                break;\n            }\n            case \"rendition:flow-scrolled-doc\": {\n                propertiesStruct.Overflow = OverflowEnum.Scrolled;\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n\n        if (propertiesStruct.Layout ||\n            propertiesStruct.Orientation ||\n            propertiesStruct.Overflow ||\n            propertiesStruct.Page ||\n            propertiesStruct.Spread ||\n            (propertiesStruct.Contains && propertiesStruct.Contains.length)) {\n\n            link.Properties = propertiesStruct;\n        }\n    }\n};\n\nconst addMediaOverlay = async (link: Link, linkEpub: Manifest, rootfile: Rootfile, opf: OPF, zip: IZip) => {\n    if (linkEpub.MediaOverlay) {\n        const meta = findMetaByRefineAndProperty(rootfile, opf, linkEpub.MediaOverlay, \"media:duration\");\n        if (meta) {\n            link.Duration = timeStrToSeconds(meta.Data);\n        }\n\n        const manItemSmil = opf.Manifest.find((mi) => {\n            if (mi.ID === linkEpub.MediaOverlay) {\n                return true;\n            }\n            return false;\n        });\n        if (manItemSmil && manItemSmil.MediaType === \"application/smil+xml\") {\n            if (opf.ZipPath) {\n                const manItemSmilHrefDecoded = manItemSmil.HrefDecoded;\n                if (!manItemSmilHrefDecoded) {\n                    debug(\"!?manItemSmil.HrefDecoded\");\n                    return;\n                }\n                const smilFilePath = path.join(path.dirname(opf.ZipPath), manItemSmilHrefDecoded)\n                        .replace(/\\\\/g, \"/\");\n\n                const has = await zipHasEntry(zip, smilFilePath, smilFilePath);\n                if (!has) {\n                    debug(`NOT IN ZIP (addMediaOverlay): ${smilFilePath}`);\n                    const zipEntries = await zip.getEntries();\n                    for (const zipEntry of zipEntries) {\n                        debug(zipEntry);\n                    }\n                    return;\n                }\n\n                const mo = new MediaOverlayNode();\n                mo.SmilPathInZip = smilFilePath;\n                mo.initialized = false;\n                link.MediaOverlays = mo;\n\n                const moURL = mediaOverlayURLPath + \"?\" +\n                    mediaOverlayURLParam + \"=\" +\n                    encodeURIComponent_RFC3986(link.HrefDecoded ? link.HrefDecoded : link.Href);\n\n                // legacy method:\n                if (!link.Properties) {\n                    link.Properties = new Properties();\n                }\n                link.Properties.MediaOverlay = moURL;\n\n                // new method:\n                // https://w3c.github.io/sync-media-pub/incorporating-synchronized-narration.html#with-webpub\n                if (!link.Alternate) {\n                    link.Alternate = [];\n                }\n                const moLink = new Link();\n                moLink.Href = moURL;\n                moLink.TypeLink = \"application/vnd.syncnarr+json\";\n                moLink.Duration = link.Duration;\n                link.Alternate.push(moLink);\n\n                if (link.Properties && link.Properties.Encrypted) {\n                    debug(\"ENCRYPTED SMIL MEDIA OVERLAY: \" + (link.HrefDecoded ? link.HrefDecoded : link.Href));\n                }\n                // LAZY\n                // await lazyLoadMediaOverlays(publication, mo);\n            }\n        }\n    }\n};\n\nconst findInManifestByID =\n    async (publication: Publication, rootfile: Rootfile, opf: OPF, ID: string, zip: IZip): Promise<Link> => {\n\n        if (opf.Manifest && opf.Manifest.length) {\n            const item = opf.Manifest.find((manItem) => {\n                if (manItem.ID === ID) {\n                    return true;\n                }\n                return false;\n            });\n            if (item && opf.ZipPath) {\n                const linkItem = new Link();\n                linkItem.TypeLink = item.MediaType;\n\n                const itemHrefDecoded = item.HrefDecoded;\n                if (!itemHrefDecoded) {\n                    return Promise.reject(\"item.Href?!\");\n                }\n                linkItem.setHrefDecoded(path.join(path.dirname(opf.ZipPath), itemHrefDecoded)\n                    .replace(/\\\\/g, \"/\"));\n\n                await addRelAndPropertiesToLink(publication, linkItem, item, rootfile, opf);\n                await addMediaOverlay(linkItem, item, rootfile, opf, zip);\n                return linkItem;\n            }\n        }\n        return Promise.reject(`ID ${ID} not found`);\n    };\n\nconst addRendition = async (publication: Publication, _rootfile: Rootfile, opf: OPF, zip: IZip) => {\n\n    if (opf.Metadata && opf.Metadata.Meta && opf.Metadata.Meta.length) {\n        const rendition = new Properties();\n\n        opf.Metadata.Meta.forEach((meta) => {\n            switch (meta.Property) {\n                case \"rendition:layout\": {\n                    switch (meta.Data) {\n                        case \"pre-paginated\": {\n                            rendition.Layout = LayoutEnum.Fixed;\n                            break;\n                        }\n                        case \"reflowable\": {\n                            rendition.Layout = LayoutEnum.Reflowable;\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"rendition:orientation\": {\n                    switch (meta.Data) {\n                        case \"auto\": {\n                            rendition.Orientation = OrientationEnum.Auto;\n                            break;\n                        }\n                        case \"landscape\": {\n                            rendition.Orientation = OrientationEnum.Landscape;\n                            break;\n                        }\n                        case \"portrait\": {\n                            rendition.Orientation = OrientationEnum.Portrait;\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"rendition:spread\": {\n                    switch (meta.Data) {\n                        case \"auto\": {\n                            rendition.Spread = SpreadEnum.Auto;\n                            break;\n                        }\n                        case \"both\": {\n                            rendition.Spread = SpreadEnum.Both;\n                            break;\n                        }\n                        case \"none\": {\n                            rendition.Spread = SpreadEnum.None;\n                            break;\n                        }\n                        case \"landscape\": {\n                            rendition.Spread = SpreadEnum.Landscape;\n                            break;\n                        }\n                        case \"portrait\": { // https://github.com/readium/webpub-manifest/issues/24\n                            rendition.Spread = SpreadEnum.Both;\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"rendition:flow\": {\n                    switch (meta.Data) {\n                        case \"auto\": {\n                            rendition.Overflow = OverflowEnum.Auto;\n                            break;\n                        }\n                        case \"paginated\": {\n                            rendition.Overflow = OverflowEnum.Paginated;\n                            break;\n                        }\n                        case \"scrolled\": {\n                            rendition.Overflow = OverflowEnum.Scrolled;\n                            break;\n                        }\n                        case \"scrolled-continuous\": {\n                            rendition.Overflow = OverflowEnum.ScrolledContinuous;\n                            break;\n                        }\n                    }\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n        });\n\n        if (!rendition.Layout || !rendition.Orientation) {\n\n            let displayOptionsZipPath = \"META-INF/com.apple.ibooks.display-options.xml\";\n            let has = await zipHasEntry(zip, displayOptionsZipPath, undefined);\n            if (has) {\n                debug(\"Info: found iBooks display-options XML\");\n            } else {\n                displayOptionsZipPath = \"META-INF/com.kobobooks.display-options.xml\";\n                has = await zipHasEntry(zip, displayOptionsZipPath, undefined);\n                if (has) {\n                    debug(\"Info: found Kobo display-options XML\");\n                }\n            }\n            if (!has) {\n                debug(\"Info: not found iBooks or Kobo display-options XML\");\n            } else {\n                let displayOptionsZipStream_: IStreamAndLength | undefined;\n                try {\n                    displayOptionsZipStream_ = await zip.entryStreamPromise(displayOptionsZipPath);\n                } catch (err) {\n                    debug(err);\n                }\n                if (displayOptionsZipStream_) {\n                    const displayOptionsZipStream = displayOptionsZipStream_.stream;\n\n                    let displayOptionsZipData: Buffer | undefined;\n                    try {\n                        displayOptionsZipData = await streamToBufferPromise(displayOptionsZipStream);\n                    } catch (err) {\n                        debug(err);\n                    }\n                    if (displayOptionsZipData) {\n                        try {\n                            const displayOptionsStr = displayOptionsZipData.toString(\"utf8\");\n                            const displayOptionsDoc = new xmldom.DOMParser().parseFromString(displayOptionsStr);\n\n                            const displayOptions = XML.deserialize<DisplayOptions>(displayOptionsDoc, DisplayOptions);\n                            displayOptions.ZipPath = displayOptionsZipPath;\n\n                            if (displayOptions && displayOptions.Platforms) {\n                                const renditionPlatformAll = new Properties();\n                                const renditionPlatformIpad = new Properties();\n                                const renditionPlatformIphone = new Properties();\n                                displayOptions.Platforms.forEach((platform) => {\n                                    if (platform.Options) {\n                                        platform.Options.forEach((option) => {\n                                            if (!rendition.Layout) {\n                                                // tslint:disable-next-line:max-line-length\n                                                // https://github.com/readium/architecture/blob/master/streamer/parser/metadata.md#epub-2x-9\n                                                if (option.Name === \"fixed-layout\") {\n                                                    if (option.Value === \"true\") {\n                                                        rendition.Layout = LayoutEnum.Fixed;\n                                                    } else {\n                                                        rendition.Layout = LayoutEnum.Reflowable;\n                                                    }\n                                                }\n                                            }\n                                            if (!rendition.Orientation) {\n                                                // tslint:disable-next-line:max-line-length\n                                                // https://github.com/readium/architecture/blob/master/streamer/parser/metadata.md#epub-2x-10\n                                                if (option.Name === \"orientation-lock\") {\n                                                    const rend = platform.Name === \"*\" ? renditionPlatformAll :\n                                                        (platform.Name === \"ipad\" ? renditionPlatformIpad :\n                                                        (platform.Name === \"iphone\" ? renditionPlatformIphone :\n                                                        renditionPlatformAll));\n                                                    switch (option.Value) {\n                                                        case \"none\": {\n                                                            rend.Orientation = OrientationEnum.Auto;\n                                                            break;\n                                                        }\n                                                        case \"landscape-only\": {\n                                                            rend.Orientation = OrientationEnum.Landscape;\n                                                            break;\n                                                        }\n                                                        case \"portrait-only\": {\n                                                            rend.Orientation = OrientationEnum.Portrait;\n                                                            break;\n                                                        }\n                                                        default: {\n                                                            rend.Orientation = OrientationEnum.Auto;\n                                                            break;\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        });\n                                    }\n                                });\n                                if (renditionPlatformAll.Orientation) {\n                                    rendition.Orientation = renditionPlatformAll.Orientation;\n                                } else if (renditionPlatformIpad.Orientation) {\n                                    rendition.Orientation = renditionPlatformIpad.Orientation;\n                                } else if (renditionPlatformIphone.Orientation) {\n                                    rendition.Orientation = renditionPlatformIphone.Orientation;\n                                }\n                            }\n                        } catch (err) {\n                            debug(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (rendition.Layout || rendition.Orientation || rendition.Overflow || rendition.Page || rendition.Spread) {\n            publication.Metadata.Rendition = rendition;\n        }\n    }\n};\n\nconst fillSpineAndResource = async (publication: Publication, rootfile: Rootfile, opf: OPF, zip: IZip) => {\n\n    if (!opf.ZipPath) {\n        return;\n    }\n\n    if (opf.Spine && opf.Spine.Items && opf.Spine.Items.length) {\n        for (const item of opf.Spine.Items) {\n\n            if (!item.Linear || item.Linear === \"yes\") {\n\n                let linkItem: Link;\n                try {\n                    linkItem = await findInManifestByID(publication, rootfile, opf, item.IDref, zip);\n                } catch (err) {\n                    debug(err);\n                    continue;\n                }\n\n                if (linkItem && linkItem.Href) {\n                    if (!publication.Spine) {\n                        publication.Spine = [];\n                    }\n                    publication.Spine.push(linkItem);\n                }\n            }\n        }\n    }\n\n    if (opf.Manifest && opf.Manifest.length) {\n\n        for (const item of opf.Manifest) {\n\n            const itemHrefDecoded = item.HrefDecoded;\n            if (!itemHrefDecoded) {\n                debug(\"!? item.Href\");\n                continue;\n            }\n            const zipPath = path.join(path.dirname(opf.ZipPath), itemHrefDecoded)\n                .replace(/\\\\/g, \"/\");\n            const linkSpine = findInSpineByHref(publication, zipPath);\n            if (!linkSpine || !linkSpine.Href) {\n\n                const linkItem = new Link();\n                linkItem.TypeLink = item.MediaType;\n\n                linkItem.setHrefDecoded(zipPath);\n\n                await addRelAndPropertiesToLink(publication, linkItem, item, rootfile, opf);\n                await addMediaOverlay(linkItem, item, rootfile, opf, zip);\n\n                if (!publication.Resources) {\n                    publication.Resources = [];\n                }\n                publication.Resources.push(linkItem);\n            }\n        }\n    }\n};\n\nconst fillEncryptionInfo =\n    (publication: Publication, _rootfile: Rootfile, _opf: OPF, encryption: Encryption, lcp: LCP | undefined) => {\n\n        encryption.EncryptedData.forEach((encInfo) => {\n            const encrypted = new Encrypted();\n            encrypted.Algorithm = encInfo.EncryptionMethod.Algorithm;\n\n            if (lcp &&\n                encrypted.Algorithm !== \"http://www.idpf.org/2008/embedding\" &&\n                encrypted.Algorithm !== \"http://ns.adobe.com/pdf/enc#RC\") {\n                encrypted.Profile = lcp.Encryption.Profile;\n                encrypted.Scheme = \"http://readium.org/2014/01/lcp\";\n            }\n            if (encInfo.EncryptionProperties && encInfo.EncryptionProperties.length) {\n\n                encInfo.EncryptionProperties.forEach((prop) => {\n\n                    if (prop.Compression) {\n                        if (prop.Compression.OriginalLength) {\n                            encrypted.OriginalLength = parseFloat(prop.Compression.OriginalLength);\n                        }\n                        if (prop.Compression.Method === \"8\") {\n                            encrypted.Compression = \"deflate\";\n                        } else {\n                            encrypted.Compression = \"none\";\n                        }\n                    }\n                });\n            }\n\n            if (publication.Resources) {\n                publication.Resources.forEach((l, _i, _arr) => {\n\n                    const filePath = l.Href;\n                    if (filePath === encInfo.CipherData.CipherReference.URI) {\n                        if (!l.Properties) {\n                            l.Properties = new Properties();\n                        }\n                        l.Properties.Encrypted = encrypted;\n                    }\n                });\n            }\n\n            if (publication.Spine) {\n                publication.Spine.forEach((l, _i, _arr) => {\n                    const filePath = l.Href;\n                    if (filePath === encInfo.CipherData.CipherReference.URI) {\n                        if (!l.Properties) {\n                            l.Properties = new Properties();\n                        }\n                        l.Properties.Encrypted = encrypted;\n                    }\n                });\n            }\n        });\n    };\n\nconst fillPageListFromNCX = (publication: Publication, _rootfile: Rootfile, _opf: OPF, ncx: NCX) => {\n    if (ncx.PageList && ncx.PageList.PageTarget && ncx.PageList.PageTarget.length) {\n        ncx.PageList.PageTarget.forEach((pageTarget) => {\n            const link = new Link();\n            const srcDecoded = pageTarget.Content.SrcDecoded;\n            if (!srcDecoded) {\n                debug(\"!?srcDecoded\");\n                return; // foreach\n            }\n            const zipPath = path.join(path.dirname(ncx.ZipPath), srcDecoded)\n                .replace(/\\\\/g, \"/\");\n\n            link.setHrefDecoded(zipPath);\n\n            link.Title = pageTarget.Text;\n            if (!publication.PageList) {\n                publication.PageList = [];\n            }\n            publication.PageList.push(link);\n        });\n    }\n};\n\nconst fillPageListFromAdobePageMap = async (\n    publication: Publication,\n    _rootfile: Rootfile,\n    _opf: OPF,\n    zip: IZip,\n    l: Link,\n): Promise<void> => {\n    if (!l.HrefDecoded) {\n        return;\n    }\n    const pageMapContent = await createDocStringFromZipPath(l, zip);\n    if (!pageMapContent) {\n        return;\n    }\n    const pageMapXmlDoc = new xmldom.DOMParser().parseFromString(pageMapContent);\n\n    const pages = pageMapXmlDoc.getElementsByTagName(\"page\");\n    if (pages && pages.length) {\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < pages.length; i += 1) {\n            const page = pages.item(i)!;\n\n            const link = new Link();\n            const href = page.getAttribute(\"href\");\n            const title = page.getAttribute(\"name\");\n            if (href === null || title === null) {\n                continue;\n            }\n\n            if (!publication.PageList) {\n                publication.PageList = [];\n            }\n\n            const hrefDecoded = tryDecodeURI(href);\n            if (!hrefDecoded) {\n                continue;\n            }\n            const zipPath = path.join(path.dirname(l.HrefDecoded), hrefDecoded)\n                .replace(/\\\\/g, \"/\");\n\n            link.setHrefDecoded(zipPath);\n\n            link.Title = title;\n            publication.PageList.push(link);\n        }\n    }\n};\n\nconst createDocStringFromZipPath = async (link: Link, zip: IZip): Promise<string | undefined> => {\n    const linkHrefDecoded = link.HrefDecoded;\n    if (!linkHrefDecoded) {\n        debug(\"!?link.HrefDecoded\");\n        return undefined;\n    }\n    const has = await zipHasEntry(zip, linkHrefDecoded, link.Href);\n    if (!has) {\n        debug(`NOT IN ZIP (createDocStringFromZipPath): ${link.Href} --- ${linkHrefDecoded}`);\n        const zipEntries = await zip.getEntries();\n        for (const zipEntry of zipEntries) {\n            debug(zipEntry);\n        }\n        return undefined;\n    }\n\n    let zipStream_: IStreamAndLength;\n    try {\n        zipStream_ = await zip.entryStreamPromise(linkHrefDecoded);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n    const zipStream = zipStream_.stream;\n\n    let zipData: Buffer;\n    try {\n        zipData = await streamToBufferPromise(zipStream);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    return zipData.toString(\"utf8\");\n};\n\nconst fillTOCFromNCX = (publication: Publication, rootfile: Rootfile, opf: OPF, ncx: NCX) => {\n    if (ncx.Points && ncx.Points.length) {\n        ncx.Points.forEach((point) => {\n            if (!publication.TOC) {\n                publication.TOC = [];\n            }\n            fillTOCFromNavPoint(publication, rootfile, opf, ncx, point, publication.TOC);\n        });\n    }\n};\n\nconst fillLandmarksFromGuide = (publication: Publication, _rootfile: Rootfile, opf: OPF) => {\n    if (opf.Guide && opf.Guide.length) {\n        opf.Guide.forEach((ref) => {\n            if (ref.Href && opf.ZipPath) {\n                const refHrefDecoded = ref.HrefDecoded;\n                if (!refHrefDecoded) {\n                    debug(\"ref.Href?!\");\n                    return; // foreach\n                }\n                const link = new Link();\n                const zipPath = path.join(path.dirname(opf.ZipPath), refHrefDecoded)\n                    .replace(/\\\\/g, \"/\");\n\n                link.setHrefDecoded(zipPath);\n\n                link.Title = ref.Title;\n                if (!publication.Landmarks) {\n                    publication.Landmarks = [];\n                }\n                publication.Landmarks.push(link);\n            }\n        });\n    }\n};\n\nconst fillTOCFromNavPoint =\n    (publication: Publication, rootfile: Rootfile, opf: OPF, ncx: NCX, point: NavPoint, node: Link[]) => {\n\n        const srcDecoded = point.Content.SrcDecoded;\n        if (!srcDecoded) {\n            debug(\"?!point.Content.Src\");\n            return;\n        }\n        const link = new Link();\n        const zipPath = path.join(path.dirname(ncx.ZipPath), srcDecoded)\n            .replace(/\\\\/g, \"/\");\n\n        link.setHrefDecoded(zipPath);\n\n        link.Title = point.Text;\n\n        if (point.Points && point.Points.length) {\n            point.Points.forEach((p) => {\n                if (!link.Children) {\n                    link.Children = [];\n                }\n                fillTOCFromNavPoint(publication, rootfile, opf, ncx, p, link.Children);\n            });\n        }\n\n        node.push(link);\n    };\n\nconst fillSubject = (publication: Publication, _rootfile: Rootfile, opf: OPF) => {\n    if (opf.Metadata && opf.Metadata.Subject && opf.Metadata.Subject.length) {\n        opf.Metadata.Subject.forEach((s) => {\n            const sub = new Subject();\n            if (s.Lang) {\n                sub.Name = {} as IStringMap;\n                sub.Name[s.Lang] = s.Data;\n            } else {\n                sub.Name = s.Data;\n            }\n            sub.Code = s.Term;\n            sub.Scheme = s.Authority;\n            if (!publication.Metadata.Subject) {\n                publication.Metadata.Subject = [];\n            }\n            publication.Metadata.Subject.push(sub);\n        });\n    }\n};\n\nconst fillCalibreSerieInfo = (publication: Publication, _rootfile: Rootfile, opf: OPF) => {\n    let serie: string | undefined;\n    let seriePosition: number | undefined;\n\n    if (opf.Metadata && opf.Metadata.Meta && opf.Metadata.Meta.length) {\n        opf.Metadata.Meta.forEach((m) => {\n            if (m.Name === \"calibre:series\") {\n                serie = m.Content;\n            }\n            if (m.Name === \"calibre:series_index\") {\n                seriePosition = parseFloat(m.Content);\n            }\n        });\n    }\n\n    if (serie) {\n        const contributor = new Contributor();\n        contributor.Name = serie;\n        if (seriePosition) {\n            contributor.Position = seriePosition;\n        }\n        if (!publication.Metadata.BelongsTo) {\n            publication.Metadata.BelongsTo = new BelongsTo();\n        }\n        if (!publication.Metadata.BelongsTo.Series) {\n            publication.Metadata.BelongsTo.Series = [];\n        }\n        publication.Metadata.BelongsTo.Series.push(contributor);\n    }\n};\n\nconst fillTOCFromNavDoc = async (publication: Publication, _rootfile: Rootfile, _opf: OPF, zip: IZip):\n    Promise<void> => {\n\n    const navLink = publication.GetNavDoc();\n    if (!navLink) {\n        return;\n    }\n\n    const navLinkHrefDecoded = navLink.HrefDecoded;\n    if (!navLinkHrefDecoded) {\n        debug(\"!?navLink.HrefDecoded\");\n        return;\n    }\n\n    const has = await zipHasEntry(zip, navLinkHrefDecoded, navLink.Href);\n    if (!has) {\n        debug(`NOT IN ZIP (fillTOCFromNavDoc): ${navLink.Href} --- ${navLinkHrefDecoded}`);\n        const zipEntries = await zip.getEntries();\n        for (const zipEntry of zipEntries) {\n            debug(zipEntry);\n        }\n        return;\n    }\n\n    let navDocZipStream_: IStreamAndLength;\n    try {\n        navDocZipStream_ = await zip.entryStreamPromise(navLinkHrefDecoded);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n    const navDocZipStream = navDocZipStream_.stream;\n\n    let navDocZipData: Buffer;\n    try {\n        navDocZipData = await streamToBufferPromise(navDocZipStream);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    const navDocStr = navDocZipData.toString(\"utf8\");\n    const navXmlDoc = new xmldom.DOMParser().parseFromString(navDocStr);\n\n    const select = xpath.useNamespaces({\n        epub: \"http://www.idpf.org/2007/ops\",\n        xhtml: \"http://www.w3.org/1999/xhtml\",\n    });\n\n    const navs = select(\"/xhtml:html/xhtml:body//xhtml:nav\", navXmlDoc) as Element[];\n    if (navs && navs.length) {\n\n        navs.forEach((navElement: Element) => {\n\n            const epubType = select(\"@epub:type\", navElement) as Attr[];\n            if (epubType && epubType.length) {\n\n                const olElem = select(\"xhtml:ol\", navElement) as Element[];\n\n                const rolesString = epubType[0].value;\n                const rolesArray = parseSpaceSeparatedString(rolesString);\n\n                if (rolesArray.length) {\n                    for (const role of rolesArray) {\n                        switch (role) {\n                            case \"toc\": {\n                                publication.TOC = [];\n                                fillTOCFromNavDocWithOL(select, olElem, publication.TOC, navLinkHrefDecoded);\n                                break;\n                            }\n                            case \"page-list\": {\n                                publication.PageList = [];\n                                fillTOCFromNavDocWithOL(select, olElem, publication.PageList, navLinkHrefDecoded);\n                                break;\n                            }\n                            case \"landmarks\": {\n                                publication.Landmarks = [];\n                                fillTOCFromNavDocWithOL(select, olElem, publication.Landmarks, navLinkHrefDecoded);\n                                break;\n                            }\n                            case \"lot\": {\n                                publication.LOT = [];\n                                fillTOCFromNavDocWithOL(select, olElem, publication.LOT, navLinkHrefDecoded);\n                                break;\n                            }\n                            case \"loa\": {\n                                publication.LOA = [];\n                                fillTOCFromNavDocWithOL(select, olElem, publication.LOA, navLinkHrefDecoded);\n                                break;\n                            }\n                            case \"loi\": {\n                                publication.LOI = [];\n                                fillTOCFromNavDocWithOL(select, olElem, publication.LOI, navLinkHrefDecoded);\n                                break;\n                            }\n                            case \"lov\": {\n                                publication.LOV = [];\n                                fillTOCFromNavDocWithOL(select, olElem, publication.LOV, navLinkHrefDecoded);\n                                break;\n                            }\n                            default: {\n                                break; // \"switch\", not enclosing \"for\" loop\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n};\n\nconst fillTOCFromNavDocWithOL = (\n    select: xpath.XPathSelect,\n    olElems: Element[],\n    children: Link[],\n    navDocPath: string) => {\n\n    olElems.forEach((olElem: Element) => {\n\n        const liElems = select(\"xhtml:li\", olElem) as Element[];\n        if (liElems && liElems.length) {\n\n            liElems.forEach((liElem) => {\n\n                const link = new Link();\n                children.push(link);\n\n                const aElems = select(\"xhtml:a\", liElem) as Element[];\n                if (aElems && aElems.length > 0) {\n\n                    const epubType = select(\"@epub:type\", aElems[0]) as Attr[];\n                    if (epubType && epubType.length) {\n\n                        const rolesString = epubType[0].value;\n                        const rolesArray = parseSpaceSeparatedString(rolesString);\n\n                        if (rolesArray.length) {\n                            link.AddRels(rolesArray);\n                        }\n                    }\n\n                    const aHref = select(\"@href\", aElems[0]) as Attr[];\n                    if (aHref && aHref.length) {\n                        const val = aHref[0].value;\n                        let valDecoded = tryDecodeURI(val);\n                        if (!valDecoded) {\n                            debug(\"!?valDecoded\");\n                            return; // foreach\n                        }\n                        if (val[0] === \"#\") {\n                            valDecoded = path.basename(navDocPath) + valDecoded;\n                        }\n\n                        const zipPath = path.join(path.dirname(navDocPath), valDecoded)\n                            .replace(/\\\\/g, \"/\");\n\n                        link.setHrefDecoded(zipPath);\n                    }\n\n                    let aText = aElems[0].textContent; // select(\"text()\", aElems[0])[0].data;\n                    if (aText && aText.length) {\n                        aText = aText.trim();\n                        aText = aText.replace(/\\s\\s+/g, \" \");\n                        link.Title = aText;\n                    }\n                } else {\n                    const liFirstChild = select(\"xhtml:*[1]\", liElem) as Element[];\n                    if (liFirstChild && liFirstChild.length && liFirstChild[0].textContent) {\n                        link.Title = liFirstChild[0].textContent.trim();\n                    }\n                }\n\n                const olElemsNext = select(\"xhtml:ol\", liElem) as Element[];\n                if (olElemsNext && olElemsNext.length) {\n                    if (!link.Children) {\n                        link.Children = [];\n                    }\n                    fillTOCFromNavDocWithOL(select, olElemsNext, link.Children, navDocPath);\n                }\n            });\n        }\n    });\n};\n\nconst addCoverRel = async (publication: Publication, rootfile: Rootfile, opf: OPF, zip: IZip) => {\n\n    let coverID: string | undefined;\n\n    if (opf.Metadata && opf.Metadata.Meta && opf.Metadata.Meta.length) {\n        opf.Metadata.Meta.find((meta) => {\n            if (meta.Name === \"cover\") {\n                coverID = meta.Content;\n                return true;\n            }\n            return false;\n        });\n    }\n\n    if (coverID) {\n        let manifestInfo: Link;\n        try {\n            manifestInfo = await findInManifestByID(publication, rootfile, opf, coverID, zip);\n        } catch (err) {\n            debug(err);\n            return;\n        }\n        if (manifestInfo && manifestInfo.Href && publication.Resources && publication.Resources.length) {\n\n            const href = manifestInfo.Href;\n            const linky = publication.Resources.find((item, _i, _arr) => {\n                if (item.Href === href) {\n                    return true;\n                }\n                return false;\n            });\n            if (linky) { // publication.Resources[i]\n                linky.AddRel(\"cover\");\n                await addCoverDimensions(publication, linky);\n            }\n        }\n    }\n};\n\nconst findPropertiesInSpineForManifest = (linkEpub: Manifest, _rootfile: Rootfile, opf: OPF): string | undefined => {\n\n    if (opf.Spine && opf.Spine.Items && opf.Spine.Items.length) {\n        const it = opf.Spine.Items.find((item) => {\n            if (item.IDref === linkEpub.ID) {\n                return true;\n            }\n            return false;\n        });\n        if (it && it.Properties) {\n            return it.Properties;\n        }\n    }\n\n    return undefined;\n};\n\nconst findInSpineByHref = (publication: Publication, href: string): Link | undefined => {\n\n    if (publication.Spine && publication.Spine.length) {\n        const ll = publication.Spine.find((l) => {\n            if (l.HrefDecoded === href) {\n                return true;\n            }\n            return false;\n        });\n        if (ll) {\n            return ll;\n        }\n    }\n\n    return undefined;\n};\n\nconst findMetaByRefineAndProperty = (\n    rootfile: Rootfile, opf: OPF, ID: string, property: string): Metafield | undefined => {\n\n    const ret = findAllMetaByRefineAndProperty(rootfile, opf, ID, property);\n    if (ret.length) {\n        return ret[0];\n    }\n    return undefined;\n};\n\nconst findAllMetaByRefineAndProperty = (_rootfile: Rootfile, opf: OPF, ID: string, property: string): Metafield[] => {\n    const metas: Metafield[] = [];\n\n    const refineID = \"#\" + ID;\n\n    if (opf.Metadata && opf.Metadata.Meta) {\n        opf.Metadata.Meta.forEach((metaTag) => {\n            if (metaTag.Refine === refineID && metaTag.Property === property) {\n                metas.push(metaTag);\n            }\n        });\n    }\n\n    return metas;\n};\n\nconst getEpubVersion = (rootfile: Rootfile, opf: OPF): string | undefined => {\n\n    if (rootfile.Version) {\n        return rootfile.Version;\n    } else if (opf.Version) {\n        return opf.Version;\n    }\n\n    return undefined;\n};\n\nconst isEpub3OrMore = (rootfile: Rootfile, opf: OPF): boolean => {\n\n    const version = getEpubVersion(rootfile, opf);\n    return (version === epub3 || version === epub301 || version === epub31);\n};\n\n// const findLinKByHref =\n// (publication: Publication, _rootfile: Rootfile, _opf: OPF, href: string): Link | undefined => {\n//     if (publication.Spine && publication.Spine.length) {\n//         const ll = publication.Spine.find((l) => {\n//             if (href === l.HrefDecoded) {\n//                 return true;\n//             }\n//             return false;\n//         });\n//         if (ll) {\n//             return ll;\n//         }\n//     }\n\n//     return undefined;\n// };\n"]}