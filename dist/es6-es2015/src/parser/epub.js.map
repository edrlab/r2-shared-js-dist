{"version":3,"file":"epub.js","sourceRoot":"","sources":["../../../../src/parser/epub.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as fs from \"fs\";\nimport { imageSize } from \"image-size\";\nimport { ISize } from \"image-size/dist/types/interface\";\nimport * as moment from \"moment\";\nimport * as path from \"path\";\nimport { URL } from \"url\";\nimport * as xmldom from \"xmldom\";\nimport * as xpath from \"xpath\";\n\nimport { MediaOverlayNode, timeStrToSeconds } from \"@models/media-overlay\";\nimport { Metadata } from \"@models/metadata\";\nimport { BelongsTo } from \"@models/metadata-belongsto\";\nimport { Contributor } from \"@models/metadata-contributor\";\nimport {\n    LayoutEnum, OrientationEnum, OverflowEnum, PageEnum, Properties, SpreadEnum,\n} from \"@models/metadata-properties\";\nimport { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { Encrypted } from \"@r2-lcp-js/models/metadata-encrypted\";\nimport { LCP } from \"@r2-lcp-js/parser/epub/lcp\";\nimport { TaJsonDeserialize } from \"@r2-lcp-js/serializable\";\nimport { isHTTP } from \"@r2-utils-js/_utils/http/UrlUtils\";\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\nimport { XML } from \"@r2-utils-js/_utils/xml-js-mapper\";\nimport { IStreamAndLength, IZip } from \"@r2-utils-js/_utils/zip/zip\";\nimport { zipLoadPromise } from \"@r2-utils-js/_utils/zip/zipFactory\";\nimport { Transformers } from \"@transform/transformer\";\n\nimport { tryDecodeURI } from \"../_utils/decodeURI\";\nimport { zipHasEntry } from \"../_utils/zipHasEntry\";\nimport {\n    BCP47_UNKNOWN_LANG as BCP47_UNKNOWN_LANG_, addIdentifier, addLanguage, addMediaOverlaySMIL,\n    addOtherMetadata, addTitle, fillPublicationDate, fillSpineAndResource, fillSubject, fillTOC,\n    findContributorInMeta, findInManifestByID, findMetaByRefineAndProperty, getNcx, getOpf,\n    loadFileStrFromZipPath, parseSpaceSeparatedString, setPublicationDirection,\n} from \"./epub-daisy-common\";\nimport { Container } from \"./epub/container\";\nimport { Rootfile } from \"./epub/container-rootfile\";\nimport { DisplayOptions } from \"./epub/display-options\";\nimport { Encryption } from \"./epub/encryption\";\nimport { NCX } from \"./epub/ncx\";\nimport { OPF } from \"./epub/opf\";\nimport { Manifest } from \"./epub/opf-manifest\";\nimport { SMIL } from \"./epub/smil\";\nimport { Par } from \"./epub/smil-par\";\nimport { Seq } from \"./epub/smil-seq\";\nimport { SeqOrPar } from \"./epub/smil-seq-or-par\";\n\nconst debug = debug_(\"r2:shared#parser/epub\");\n\n// https://github.com/readium/webpub-manifest/issues/52#issuecomment-601686135\nexport const BCP47_UNKNOWN_LANG = BCP47_UNKNOWN_LANG_;\n\nexport const addCoverDimensions = async (publication: Publication, coverLink: Link) => {\n\n    const zipInternal = publication.findFromInternal(\"zip\");\n    if (zipInternal) {\n        const zip = zipInternal.Value as IZip;\n\n        const coverLinkHrefDecoded = coverLink.HrefDecoded;\n        if (!coverLinkHrefDecoded) {\n            return;\n        }\n        const has = await zipHasEntry(zip, coverLinkHrefDecoded, coverLink.Href);\n        if (!has) {\n            debug(`NOT IN ZIP (addCoverDimensions): ${coverLink.Href} --- ${coverLinkHrefDecoded}`);\n            const zipEntries = await zip.getEntries();\n            for (const zipEntry of zipEntries) {\n                debug(zipEntry);\n            }\n            return;\n        }\n        let zipStream: IStreamAndLength;\n        try {\n            zipStream = await zip.entryStreamPromise(coverLinkHrefDecoded);\n        } catch (err) {\n            debug(coverLinkHrefDecoded);\n            debug(coverLink.TypeLink);\n            debug(err);\n            return;\n        }\n\n        let zipData: Buffer;\n        try {\n            zipData = await streamToBufferPromise(zipStream.stream);\n\n            const imageInfo = imageSize(zipData) as ISize;\n            if (imageInfo && imageInfo.width && imageInfo.height) {\n                coverLink.Width = imageInfo.width;\n                coverLink.Height = imageInfo.height;\n\n                if (coverLink.TypeLink &&\n                    coverLink.TypeLink.replace(\"jpeg\", \"jpg\").replace(\"+xml\", \"\")\n                    !== (\"image/\" + imageInfo.type)) {\n                    debug(`Wrong image type? ${coverLink.TypeLink} -- ${imageInfo.type}`);\n                }\n            }\n        } catch (err) {\n            debug(coverLinkHrefDecoded);\n            debug(coverLink.TypeLink);\n            debug(err);\n        }\n    }\n};\n\nexport enum EPUBis {\n    LocalExploded = \"LocalExploded\",\n    LocalPacked = \"LocalPacked\",\n    RemoteExploded = \"RemoteExploded\",\n    RemotePacked = \"RemotePacked\",\n}\nexport function isEPUBlication(urlOrPath: string): EPUBis | undefined {\n    let p = urlOrPath;\n    const http = isHTTP(urlOrPath);\n    if (http) {\n        const url = new URL(urlOrPath);\n        p = url.pathname;\n    } else if (fs.existsSync(path.join(urlOrPath, \"META-INF\", \"container.xml\"))) {\n        return EPUBis.LocalExploded;\n    }\n    const fileName = path.basename(p);\n    const ext = path.extname(fileName).toLowerCase();\n\n    const epub = /\\.epub[3]?$/.test(ext);\n    if (epub) {\n        return http ? EPUBis.RemotePacked : EPUBis.LocalPacked;\n    }\n\n    // filePath.replace(/\\//, \"/\").endsWith(\"META-INF/container.xml\")\n    if (/META-INF[\\/|\\\\]container.xml$/.test(p)) {\n        return http ? EPUBis.RemoteExploded : EPUBis.LocalExploded;\n    }\n\n    return undefined;\n}\n\nexport async function EpubParsePromise(filePath: string): Promise<Publication> {\n\n    const isAnEPUB = isEPUBlication(filePath);\n\n    // // excludes EPUBis.RemoteExploded\n    // const canLoad = isAnEPUB === EPUBis.LocalExploded ||\n    //     isAnEPUB === EPUBis.LocalPacked ||\n    //     isAnEPUB === EPUBis.RemotePacked;\n    // if (!canLoad) {\n    //     // TODO? r2-utils-js zip-ext.ts => variant for HTTP without directory listing? (no deterministic zip entries)\n    //     const err = \"Cannot load exploded remote EPUB (needs filesystem access to list directory contents).\";\n    //     debug(err);\n    //     return Promise.reject(err);\n    // }\n\n    let filePathToLoad = filePath;\n    if (isAnEPUB === EPUBis.LocalExploded) { // (must ensure is directory/folder)\n        filePathToLoad = filePathToLoad.replace(/META-INF[\\/|\\\\]container.xml$/, \"\");\n    } else if (isAnEPUB === EPUBis.RemoteExploded) {\n        const url = new URL(filePathToLoad);\n        url.pathname = url.pathname.replace(/META-INF[\\/|\\\\]container.xml$/, \"\");\n        // contains trailing slash\n        filePathToLoad = url.toString();\n    }\n    let zip: IZip;\n    try {\n        zip = await zipLoadPromise(filePathToLoad);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    if (!zip.hasEntries()) {\n        return Promise.reject(\"EPUB zip empty\");\n    }\n\n    const publication = new Publication();\n    publication.Context = [\"https://readium.org/webpub-manifest/context.jsonld\"];\n    publication.Metadata = new Metadata();\n    publication.Metadata.RDFType = \"http://schema.org/Book\";\n    publication.Metadata.Modified = moment(Date.now()).toDate();\n\n    publication.AddToInternal(\"filename\", path.basename(filePath));\n\n    publication.AddToInternal(\"type\", \"epub\");\n    publication.AddToInternal(\"zip\", zip);\n\n    let lcpl: LCP | undefined;\n    const lcplZipPath = \"META-INF/license.lcpl\";\n    let has = await zipHasEntry(zip, lcplZipPath, undefined);\n    if (has) {\n        let lcplZipStream_: IStreamAndLength;\n        try {\n            lcplZipStream_ = await zip.entryStreamPromise(lcplZipPath);\n        } catch (err) {\n            debug(err);\n            return Promise.reject(err);\n        }\n        const lcplZipStream = lcplZipStream_.stream;\n\n        let lcplZipData: Buffer;\n        try {\n            lcplZipData = await streamToBufferPromise(lcplZipStream);\n        } catch (err) {\n            debug(err);\n            return Promise.reject(err);\n        }\n\n        const lcplStr = lcplZipData.toString(\"utf8\");\n        const lcplJson = global.JSON.parse(lcplStr);\n        // debug(lcplJson);\n        lcpl = TaJsonDeserialize<LCP>(lcplJson, LCP);\n        lcpl.ZipPath = lcplZipPath;\n        lcpl.JsonSource = lcplStr;\n        lcpl.init();\n\n        // breakLength: 100  maxArrayLength: undefined\n        // debug(util.inspect(lcpl,\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n        publication.LCP = lcpl;\n\n        // // breakLength: 100  maxArrayLength: undefined\n        // debug(util.inspect(this.LCP,\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n        // https://github.com/readium/readium-lcp-specs/issues/15#issuecomment-358247286\n        // application/vnd.readium.lcp.license-1.0+json (LEGACY)\n        // application/vnd.readium.lcp.license.v1.0+json (NEW)\n        // application/vnd.readium.license.status.v1.0+json (LSD)\n        const mime = \"application/vnd.readium.lcp.license.v1.0+json\";\n        publication.AddLink(mime, [\"license\"], lcpl.ZipPath, undefined);\n    }\n\n    let encryption: Encryption | undefined;\n    const encZipPath = \"META-INF/encryption.xml\";\n    has = await zipHasEntry(zip, encZipPath, undefined);\n    if (has) {\n        let encryptionXmlZipStream_: IStreamAndLength;\n        try {\n            encryptionXmlZipStream_ = await zip.entryStreamPromise(encZipPath);\n        } catch (err) {\n            debug(err);\n            return Promise.reject(err);\n        }\n        const encryptionXmlZipStream = encryptionXmlZipStream_.stream;\n\n        let encryptionXmlZipData: Buffer;\n        try {\n            encryptionXmlZipData = await streamToBufferPromise(encryptionXmlZipStream);\n        } catch (err) {\n            debug(err);\n            return Promise.reject(err);\n        }\n\n        const encryptionXmlStr = encryptionXmlZipData.toString(\"utf8\");\n        const encryptionXmlDoc = new xmldom.DOMParser().parseFromString(encryptionXmlStr);\n\n        encryption = XML.deserialize<Encryption>(encryptionXmlDoc, Encryption);\n        encryption.ZipPath = encZipPath;\n\n        // breakLength: 100  maxArrayLength: undefined\n        // debug(util.inspect(encryption,\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n    }\n\n    const containerZipPath = \"META-INF/container.xml\";\n\n    let containerXmlZipStream_: IStreamAndLength;\n    try {\n        containerXmlZipStream_ = await zip.entryStreamPromise(containerZipPath);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n    const containerXmlZipStream = containerXmlZipStream_.stream;\n\n    let containerXmlZipData: Buffer;\n    try {\n        containerXmlZipData = await streamToBufferPromise(containerXmlZipStream);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    const containerXmlStr = containerXmlZipData.toString(\"utf8\");\n    const containerXmlDoc = new xmldom.DOMParser().parseFromString(containerXmlStr);\n\n    // debug(containerXmlDoc);\n    // debug(containerXmlStr);\n    // const containerXmlRootElement = xpath.select1(\"/\", containerXmlDoc);\n    // debug(containerXmlRootElement.toString());\n\n    const container = XML.deserialize<Container>(containerXmlDoc, Container);\n    container.ZipPath = containerZipPath;\n    // breakLength: 100  maxArrayLength: undefined\n    // debug(util.inspect(container,\n    //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n    const rootfile = container.Rootfile[0];\n\n    const rootfilePathDecoded = rootfile.PathDecoded;\n    if (!rootfilePathDecoded) {\n        return Promise.reject(\"?!rootfile.PathDecoded\");\n    }\n\n    const opf = await getOpf(zip, rootfilePathDecoded, rootfile.Path);\n\n    // const epubVersion = getEpubVersion(rootfile, opf);\n\n    addLanguage(publication, opf);\n\n    addTitle(publication, rootfile, opf);\n\n    addIdentifier(publication, opf);\n\n    addOtherMetadata(publication, rootfile, opf);\n\n    setPublicationDirection(publication, opf);\n\n    findContributorInMeta(publication, rootfile, opf);\n\n    await fillSpineAndResource(publication, rootfile, opf, zip, addLinkData);\n\n    await addRendition(publication, opf, zip);\n\n    await addCoverRel(publication, rootfile, opf, zip);\n\n    if (encryption) {\n        fillEncryptionInfo(publication, encryption, lcpl);\n    }\n\n    await fillTOCFromNavDoc(publication, zip);\n\n    if (!publication.TOC || !publication.TOC.length) {\n\n        let ncx: NCX | undefined;\n        if (opf.Manifest && opf.Spine.Toc) {\n            const ncxManItem = opf.Manifest.find((manifestItem) => {\n                return manifestItem.ID === opf.Spine.Toc;\n            });\n            if (ncxManItem) {\n                ncx = await getNcx(ncxManItem, opf, zip);\n            }\n        }\n\n        fillTOC(publication, opf, ncx);\n    }\n\n    if (!publication.PageList && publication.Resources) {\n        // EPUB extended with Adobe Digital Editions page map\n        //  https://wiki.mobileread.com/wiki/Adobe_Digital_Editions#Page-map\n        const pageMapLink = publication.Resources.find((item: Link): boolean => {\n            return item.TypeLink === \"application/oebps-page-map+xml\";\n        });\n        if (pageMapLink) {\n            await fillPageListFromAdobePageMap(publication, zip, pageMapLink);\n        }\n    }\n\n    fillCalibreSerieInfo(publication, opf);\n\n    fillSubject(publication, opf);\n\n    fillPublicationDate(publication, rootfile, opf);\n\n    // await fillMediaOverlay(publication, rootfile, opf, zip);\n\n    return publication;\n}\n\n// private filePathToTitle(filePath: string): string {\n//     const fileName = path.basename(filePath);\n//     return slugify(fileName, \"_\").replace(/[\\.]/g, \"_\");\n// }\n\nexport async function getAllMediaOverlays(publication: Publication): Promise<MediaOverlayNode[]> {\n    const mos: MediaOverlayNode[] = [];\n\n    const links: Link[] = ([] as Link[]).\n        concat(publication.Spine ? publication.Spine : []).\n        concat(publication.Resources ? publication.Resources : []);\n\n    for (const link of links) {\n        if (link.MediaOverlays) {\n            const mo = link.MediaOverlays;\n            if (!mo.initialized) {\n                try {\n                    // mo.initialized true/false is automatically handled\n                    await lazyLoadMediaOverlays(publication, mo);\n                } catch (err) {\n                    return Promise.reject(err);\n                }\n            }\n            mos.push(mo);\n        }\n    }\n\n    return Promise.resolve(mos);\n}\n\nexport async function getMediaOverlay(publication: Publication, spineHref: string): Promise<MediaOverlayNode> {\n\n    const links: Link[] = ([] as Link[]).\n        concat(publication.Spine ? publication.Spine : []).\n        concat(publication.Resources ? publication.Resources : []);\n\n    for (const link of links) {\n        if (link.MediaOverlays && link.Href.indexOf(spineHref) >= 0) {\n            const mo = link.MediaOverlays;\n            if (!mo.initialized) {\n                try {\n                    // mo.initialized true/false is automatically handled\n                    await lazyLoadMediaOverlays(publication, mo);\n                } catch (err) {\n                    return Promise.reject(err);\n                }\n            }\n            return Promise.resolve(mo);\n        }\n    }\n\n    return Promise.reject(`No Media Overlays ${spineHref}`);\n}\n\n// mo.initialized true/false is automatically handled\nexport const lazyLoadMediaOverlays = async (publication: Publication, mo: MediaOverlayNode) => {\n\n    if (mo.initialized || !mo.SmilPathInZip) {\n        return;\n    }\n\n    let link: Link | undefined;\n    if (publication.Resources) {\n\n        link = publication.Resources.find((l) => {\n            if (l.Href === mo.SmilPathInZip) {\n                return true;\n            }\n            return false;\n        });\n        if (!link) {\n            if (publication.Spine) {\n                link = publication.Spine.find((l) => {\n                    if (l.Href === mo.SmilPathInZip) {\n                        return true;\n                    }\n                    return false;\n                });\n            }\n        }\n        if (!link) {\n            const err = \"Asset not declared in publication spine/resources! \" + mo.SmilPathInZip;\n            debug(err);\n            return Promise.reject(err);\n        }\n    }\n\n    const zipInternal = publication.findFromInternal(\"zip\");\n    if (!zipInternal) {\n        return;\n    }\n    const zip = zipInternal.Value as IZip;\n\n    const has = await zipHasEntry(zip, mo.SmilPathInZip, undefined);\n    if (!has) {\n        const err = `NOT IN ZIP (lazyLoadMediaOverlays): ${mo.SmilPathInZip}`;\n        debug(err);\n        const zipEntries = await zip.getEntries();\n        for (const zipEntry of zipEntries) {\n            debug(zipEntry);\n        }\n        return Promise.reject(err);\n    }\n\n    let smilZipStream_: IStreamAndLength;\n    try {\n        smilZipStream_ = await zip.entryStreamPromise(mo.SmilPathInZip);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    if (link && link.Properties && link.Properties.Encrypted) {\n        let decryptFail = false;\n        let transformedStream: IStreamAndLength;\n        try {\n            transformedStream = await Transformers.tryStream(\n                publication, link, undefined,\n                smilZipStream_,\n                false,\n                0,\n                0,\n                undefined,\n            );\n        } catch (err) {\n            debug(err);\n            return Promise.reject(err);\n        }\n        if (transformedStream) {\n            smilZipStream_ = transformedStream;\n        } else {\n            decryptFail = true;\n        }\n\n        if (decryptFail) {\n            const err = \"Encryption scheme not supported.\";\n            debug(err);\n            return Promise.reject(err);\n        }\n    }\n\n    const smilZipStream = smilZipStream_.stream;\n\n    let smilZipData: Buffer;\n    try {\n        smilZipData = await streamToBufferPromise(smilZipStream);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    let smilStr = smilZipData.toString(\"utf8\");\n\n    const iStart = smilStr.indexOf(\"<smil\");\n    if (iStart >= 0) {\n        const iEnd = smilStr.indexOf(\">\", iStart);\n        if (iEnd > iStart) {\n            const clip = smilStr.substr(iStart, iEnd - iStart);\n            if (clip.indexOf(\"xmlns\") < 0) {\n                smilStr = smilStr.replace(/<smil/, \"<smil xmlns=\\\"http://www.w3.org/ns/SMIL\\\" \");\n            }\n        }\n    }\n\n    const smilXmlDoc = new xmldom.DOMParser().parseFromString(smilStr);\n    const smil = XML.deserialize<SMIL>(smilXmlDoc, SMIL);\n    smil.ZipPath = mo.SmilPathInZip;\n\n    mo.initialized = true;\n    debug(\"PARSED SMIL: \" + mo.SmilPathInZip);\n\n    // breakLength: 100  maxArrayLength: undefined\n    // debug(util.inspect(smil,\n    //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n    mo.Role = [];\n    mo.Role.push(\"section\");\n\n    // debug(smil);\n    // debug(JSON.stringify(smil, null, 4));\n\n    if (smil.Body) {\n        if (smil.Body.Duration) {\n            mo.duration = timeStrToSeconds(smil.Body.Duration);\n        }\n        if (smil.Body.EpubType) {\n            const roles = parseSpaceSeparatedString(smil.Body.EpubType);\n            for (const role of roles) {\n                if (!role.length) {\n                    return;\n                }\n                if (mo.Role.indexOf(role) < 0) {\n                    mo.Role.push(role);\n                }\n            }\n        }\n        if (smil.Body.TextRef) {\n            const smilBodyTextRefDecoded = smil.Body.TextRefDecoded;\n            if (!smilBodyTextRefDecoded) {\n                debug(\"!?smilBodyTextRefDecoded\");\n            } else {\n                const zipPath = path.join(path.dirname(smil.ZipPath), smilBodyTextRefDecoded)\n                    .replace(/\\\\/g, \"/\");\n                mo.Text = zipPath;\n            }\n        }\n        if (smil.Body.Children && smil.Body.Children.length) {\n\n            const getDur = !smil.Body.Duration && smil.Body.Children.length === 1;\n\n            smil.Body.Children.forEach((seqChild) => {\n                if (getDur && seqChild.Duration) {\n                    mo.duration = timeStrToSeconds(seqChild.Duration);\n                }\n                if (!mo.Children) {\n                    mo.Children = [];\n                }\n                addSeqToMediaOverlay(smil, publication, mo, mo.Children, seqChild);\n            });\n        }\n    }\n\n    return;\n};\n\nconst addSeqToMediaOverlay = (\n    smil: SMIL, publication: Publication,\n    rootMO: MediaOverlayNode, mo: MediaOverlayNode[], seqChild: SeqOrPar) => {\n\n    if (!smil.ZipPath) {\n        return;\n    }\n\n    const moc = new MediaOverlayNode();\n    moc.initialized = rootMO.initialized;\n    mo.push(moc);\n\n    if (seqChild.Duration) {\n        moc.duration = timeStrToSeconds(seqChild.Duration);\n    }\n\n    if (seqChild instanceof Seq) {\n        moc.Role = [];\n        moc.Role.push(\"section\");\n\n        const seq = seqChild as Seq;\n\n        if (seq.EpubType) {\n            const roles = parseSpaceSeparatedString(seq.EpubType);\n            for (const role of roles) {\n                if (!role.length) {\n                    return;\n                }\n                if (moc.Role.indexOf(role) < 0) {\n                    moc.Role.push(role);\n                }\n            }\n        }\n\n        if (seq.TextRef) {\n            const seqTextRefDecoded = seq.TextRefDecoded;\n            if (!seqTextRefDecoded) {\n                debug(\"!?seqTextRefDecoded\");\n            } else {\n                const zipPath = path.join(path.dirname(smil.ZipPath), seqTextRefDecoded)\n                    .replace(/\\\\/g, \"/\");\n                moc.Text = zipPath;\n            }\n        }\n\n        if (seq.Children && seq.Children.length) {\n            seq.Children.forEach((child) => {\n                if (!moc.Children) {\n                    moc.Children = [];\n                }\n                addSeqToMediaOverlay(smil, publication, rootMO, moc.Children, child);\n            });\n        }\n    } else { // Par\n        const par = seqChild as Par;\n\n        if (par.EpubType) {\n            const roles = parseSpaceSeparatedString(par.EpubType);\n            for (const role of roles) {\n                if (!role.length) {\n                    return;\n                }\n                if (!moc.Role) {\n                    moc.Role = [];\n                }\n                if (moc.Role.indexOf(role) < 0) {\n                    moc.Role.push(role);\n                }\n            }\n        }\n\n        if (par.Text && par.Text.Src) {\n            const parTextSrcDcoded = par.Text.SrcDecoded;\n            if (!parTextSrcDcoded) {\n                debug(\"?!parTextSrcDcoded\");\n            } else {\n                const zipPath = path.join(path.dirname(smil.ZipPath), parTextSrcDcoded)\n                    .replace(/\\\\/g, \"/\");\n                moc.Text = zipPath;\n            }\n        }\n        if (par.Audio && par.Audio.Src) {\n            const parAudioSrcDcoded = par.Audio.SrcDecoded;\n            if (!parAudioSrcDcoded) {\n                debug(\"?!parAudioSrcDcoded\");\n            } else {\n                const zipPath = path.join(path.dirname(smil.ZipPath), parAudioSrcDcoded)\n                    .replace(/\\\\/g, \"/\");\n                moc.Audio = zipPath;\n                moc.Audio += \"#t=\";\n                moc.Audio += par.Audio.ClipBegin ? timeStrToSeconds(par.Audio.ClipBegin) : \"0\";\n                if (par.Audio.ClipEnd) {\n                    moc.Audio += \",\";\n                    moc.Audio += timeStrToSeconds(par.Audio.ClipEnd);\n                }\n            }\n        }\n    }\n};\n\nconst addRelAndPropertiesToLink =\n    async (publication: Publication, link: Link, linkEpub: Manifest, opf: OPF) => {\n\n        if (linkEpub.Properties) {\n            await addToLinkFromProperties(publication, link, linkEpub.Properties);\n        }\n        const spineProperties = findPropertiesInSpineForManifest(linkEpub, opf);\n        if (spineProperties) {\n            await addToLinkFromProperties(publication, link, spineProperties);\n        }\n    };\n\nconst addToLinkFromProperties = async (publication: Publication, link: Link, propertiesString: string) => {\n\n    const properties = parseSpaceSeparatedString(propertiesString);\n    const propertiesStruct = new Properties();\n\n    // https://idpf.github.io/epub-vocabs/rendition/\n\n    for (const p of properties) {\n        switch (p) {\n            case \"cover-image\": {\n                link.AddRel(\"cover\");\n                await addCoverDimensions(publication, link);\n                break;\n            }\n            case \"nav\": {\n                link.AddRel(\"contents\");\n                break;\n            }\n            case \"scripted\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"js\");\n                break;\n            }\n            case \"mathml\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"mathml\");\n                break;\n            }\n            case \"onix-record\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"onix\");\n                break;\n            }\n            case \"svg\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"svg\");\n                break;\n            }\n            case \"xmp-record\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"xmp\");\n                break;\n            }\n            case \"remote-resources\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"remote-resources\");\n                break;\n            }\n            case \"page-spread-left\": {\n                propertiesStruct.Page = PageEnum.Left;\n                break;\n            }\n            case \"page-spread-right\": {\n                propertiesStruct.Page = PageEnum.Right;\n                break;\n            }\n            case \"page-spread-center\": {\n                propertiesStruct.Page = PageEnum.Center;\n                break;\n            }\n            case \"rendition:spread-none\": {\n                propertiesStruct.Spread = SpreadEnum.None;\n                break;\n            }\n            case \"rendition:spread-auto\": {\n                propertiesStruct.Spread = SpreadEnum.Auto;\n                break;\n            }\n            case \"rendition:spread-landscape\": {\n                propertiesStruct.Spread = SpreadEnum.Landscape;\n                break;\n            }\n            case \"rendition:spread-portrait\": {\n                propertiesStruct.Spread = SpreadEnum.Both; // https://github.com/readium/webpub-manifest/issues/24\n                break;\n            }\n            case \"rendition:spread-both\": {\n                propertiesStruct.Spread = SpreadEnum.Both;\n                break;\n            }\n            case \"rendition:layout-reflowable\": {\n                propertiesStruct.Layout = LayoutEnum.Reflowable;\n                break;\n            }\n            case \"rendition:layout-pre-paginated\": {\n                propertiesStruct.Layout = LayoutEnum.Fixed;\n                break;\n            }\n            case \"rendition:orientation-auto\": {\n                propertiesStruct.Orientation = OrientationEnum.Auto;\n                break;\n            }\n            case \"rendition:orientation-landscape\": {\n                propertiesStruct.Orientation = OrientationEnum.Landscape;\n                break;\n            }\n            case \"rendition:orientation-portrait\": {\n                propertiesStruct.Orientation = OrientationEnum.Portrait;\n                break;\n            }\n            case \"rendition:flow-auto\": {\n                propertiesStruct.Overflow = OverflowEnum.Auto;\n                break;\n            }\n            case \"rendition:flow-paginated\": {\n                propertiesStruct.Overflow = OverflowEnum.Paginated;\n                break;\n            }\n            case \"rendition:flow-scrolled-continuous\": {\n                propertiesStruct.Overflow = OverflowEnum.ScrolledContinuous;\n                break;\n            }\n            case \"rendition:flow-scrolled-doc\": {\n                propertiesStruct.Overflow = OverflowEnum.Scrolled;\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n\n        if (propertiesStruct.Layout ||\n            propertiesStruct.Orientation ||\n            propertiesStruct.Overflow ||\n            propertiesStruct.Page ||\n            propertiesStruct.Spread ||\n            (propertiesStruct.Contains && propertiesStruct.Contains.length)) {\n\n            link.Properties = propertiesStruct;\n        }\n    }\n};\n\nconst addMediaOverlay = async (link: Link, linkEpub: Manifest, opf: OPF, zip: IZip) => {\n    if (linkEpub.MediaOverlay) {\n        const meta = findMetaByRefineAndProperty(opf, linkEpub.MediaOverlay, \"media:duration\");\n        if (meta) {\n            link.Duration = timeStrToSeconds(meta.Data);\n        }\n\n        const manItemSmil = opf.Manifest.find((mi) => {\n            if (mi.ID === linkEpub.MediaOverlay) {\n                return true;\n            }\n            return false;\n        });\n        if (manItemSmil) {\n            await addMediaOverlaySMIL(link, manItemSmil, opf, zip);\n        }\n    }\n};\n\nconst addRendition = async (publication: Publication, opf: OPF, zip: IZip) => {\n\n    if (opf.Metadata && opf.Metadata.Meta && opf.Metadata.Meta.length) {\n        const rendition = new Properties();\n\n        opf.Metadata.Meta.forEach((meta) => {\n            switch (meta.Property) {\n                case \"rendition:layout\": {\n                    switch (meta.Data) {\n                        case \"pre-paginated\": {\n                            rendition.Layout = LayoutEnum.Fixed;\n                            break;\n                        }\n                        case \"reflowable\": {\n                            rendition.Layout = LayoutEnum.Reflowable;\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"rendition:orientation\": {\n                    switch (meta.Data) {\n                        case \"auto\": {\n                            rendition.Orientation = OrientationEnum.Auto;\n                            break;\n                        }\n                        case \"landscape\": {\n                            rendition.Orientation = OrientationEnum.Landscape;\n                            break;\n                        }\n                        case \"portrait\": {\n                            rendition.Orientation = OrientationEnum.Portrait;\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"rendition:spread\": {\n                    switch (meta.Data) {\n                        case \"auto\": {\n                            rendition.Spread = SpreadEnum.Auto;\n                            break;\n                        }\n                        case \"both\": {\n                            rendition.Spread = SpreadEnum.Both;\n                            break;\n                        }\n                        case \"none\": {\n                            rendition.Spread = SpreadEnum.None;\n                            break;\n                        }\n                        case \"landscape\": {\n                            rendition.Spread = SpreadEnum.Landscape;\n                            break;\n                        }\n                        case \"portrait\": { // https://github.com/readium/webpub-manifest/issues/24\n                            rendition.Spread = SpreadEnum.Both;\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"rendition:flow\": {\n                    switch (meta.Data) {\n                        case \"auto\": {\n                            rendition.Overflow = OverflowEnum.Auto;\n                            break;\n                        }\n                        case \"paginated\": {\n                            rendition.Overflow = OverflowEnum.Paginated;\n                            break;\n                        }\n                        case \"scrolled\": {\n                            rendition.Overflow = OverflowEnum.Scrolled;\n                            break;\n                        }\n                        case \"scrolled-continuous\": {\n                            rendition.Overflow = OverflowEnum.ScrolledContinuous;\n                            break;\n                        }\n                    }\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n        });\n\n        if (!rendition.Layout || !rendition.Orientation) {\n\n            let displayOptionsZipPath = \"META-INF/com.apple.ibooks.display-options.xml\";\n            let has = await zipHasEntry(zip, displayOptionsZipPath, undefined);\n            if (has) {\n                debug(\"Info: found iBooks display-options XML\");\n            } else {\n                displayOptionsZipPath = \"META-INF/com.kobobooks.display-options.xml\";\n                has = await zipHasEntry(zip, displayOptionsZipPath, undefined);\n                if (has) {\n                    debug(\"Info: found Kobo display-options XML\");\n                }\n            }\n            if (!has) {\n                debug(\"Info: not found iBooks or Kobo display-options XML\");\n            } else {\n                let displayOptionsZipStream_: IStreamAndLength | undefined;\n                try {\n                    displayOptionsZipStream_ = await zip.entryStreamPromise(displayOptionsZipPath);\n                } catch (err) {\n                    debug(err);\n                }\n                if (displayOptionsZipStream_) {\n                    const displayOptionsZipStream = displayOptionsZipStream_.stream;\n\n                    let displayOptionsZipData: Buffer | undefined;\n                    try {\n                        displayOptionsZipData = await streamToBufferPromise(displayOptionsZipStream);\n                    } catch (err) {\n                        debug(err);\n                    }\n                    if (displayOptionsZipData) {\n                        try {\n                            const displayOptionsStr = displayOptionsZipData.toString(\"utf8\");\n                            const displayOptionsDoc = new xmldom.DOMParser().parseFromString(displayOptionsStr);\n\n                            const displayOptions = XML.deserialize<DisplayOptions>(displayOptionsDoc, DisplayOptions);\n                            displayOptions.ZipPath = displayOptionsZipPath;\n\n                            if (displayOptions && displayOptions.Platforms) {\n                                const renditionPlatformAll = new Properties();\n                                const renditionPlatformIpad = new Properties();\n                                const renditionPlatformIphone = new Properties();\n                                displayOptions.Platforms.forEach((platform) => {\n                                    if (platform.Options) {\n                                        platform.Options.forEach((option) => {\n                                            if (!rendition.Layout) {\n                                                // tslint:disable-next-line:max-line-length\n                                                // https://github.com/readium/architecture/blob/master/streamer/parser/metadata.md#epub-2x-9\n                                                if (option.Name === \"fixed-layout\") {\n                                                    if (option.Value === \"true\") {\n                                                        rendition.Layout = LayoutEnum.Fixed;\n                                                    } else {\n                                                        rendition.Layout = LayoutEnum.Reflowable;\n                                                    }\n                                                }\n                                            }\n                                            if (!rendition.Orientation) {\n                                                // tslint:disable-next-line:max-line-length\n                                                // https://github.com/readium/architecture/blob/master/streamer/parser/metadata.md#epub-2x-10\n                                                if (option.Name === \"orientation-lock\") {\n                                                    const rend = platform.Name === \"*\" ? renditionPlatformAll :\n                                                        (platform.Name === \"ipad\" ? renditionPlatformIpad :\n                                                            (platform.Name === \"iphone\" ? renditionPlatformIphone :\n                                                                renditionPlatformAll));\n                                                    switch (option.Value) {\n                                                        case \"none\": {\n                                                            rend.Orientation = OrientationEnum.Auto;\n                                                            break;\n                                                        }\n                                                        case \"landscape-only\": {\n                                                            rend.Orientation = OrientationEnum.Landscape;\n                                                            break;\n                                                        }\n                                                        case \"portrait-only\": {\n                                                            rend.Orientation = OrientationEnum.Portrait;\n                                                            break;\n                                                        }\n                                                        default: {\n                                                            rend.Orientation = OrientationEnum.Auto;\n                                                            break;\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        });\n                                    }\n                                });\n                                if (renditionPlatformAll.Orientation) {\n                                    rendition.Orientation = renditionPlatformAll.Orientation;\n                                } else if (renditionPlatformIpad.Orientation) {\n                                    rendition.Orientation = renditionPlatformIpad.Orientation;\n                                } else if (renditionPlatformIphone.Orientation) {\n                                    rendition.Orientation = renditionPlatformIphone.Orientation;\n                                }\n                            }\n                        } catch (err) {\n                            debug(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (rendition.Layout || rendition.Orientation || rendition.Overflow || rendition.Page || rendition.Spread) {\n            publication.Metadata.Rendition = rendition;\n        }\n    }\n};\n\nconst addLinkData = async (\n    publication: Publication, rootfile: Rootfile | undefined,\n    opf: OPF, zip: IZip, linkItem: Link, item: Manifest) => {\n\n    if (rootfile) {\n        await addRelAndPropertiesToLink(publication, linkItem, item, opf);\n    }\n    await addMediaOverlay(linkItem, item, opf, zip);\n};\n\nconst fillEncryptionInfo =\n    (publication: Publication, encryption: Encryption, lcp: LCP | undefined) => {\n\n        encryption.EncryptedData.forEach((encInfo) => {\n            const encrypted = new Encrypted();\n            encrypted.Algorithm = encInfo.EncryptionMethod.Algorithm;\n\n            if (lcp &&\n                encrypted.Algorithm !== \"http://www.idpf.org/2008/embedding\" &&\n                encrypted.Algorithm !== \"http://ns.adobe.com/pdf/enc#RC\") {\n                encrypted.Profile = lcp.Encryption.Profile;\n                encrypted.Scheme = \"http://readium.org/2014/01/lcp\";\n            }\n            if (encInfo.EncryptionProperties && encInfo.EncryptionProperties.length) {\n\n                encInfo.EncryptionProperties.forEach((prop) => {\n\n                    if (prop.Compression) {\n                        if (prop.Compression.OriginalLength) {\n                            encrypted.OriginalLength = parseFloat(prop.Compression.OriginalLength);\n                        }\n                        if (prop.Compression.Method === \"8\") {\n                            encrypted.Compression = \"deflate\";\n                        } else {\n                            encrypted.Compression = \"none\";\n                        }\n                    }\n                });\n            }\n\n            if (publication.Resources) {\n                publication.Resources.forEach((l) => {\n\n                    const filePath = l.Href;\n                    if (filePath === encInfo.CipherData.CipherReference.URI) {\n                        if (!l.Properties) {\n                            l.Properties = new Properties();\n                        }\n                        l.Properties.Encrypted = encrypted;\n                    }\n                });\n            }\n\n            if (publication.Spine) {\n                publication.Spine.forEach((l) => {\n                    const filePath = l.Href;\n                    if (filePath === encInfo.CipherData.CipherReference.URI) {\n                        if (!l.Properties) {\n                            l.Properties = new Properties();\n                        }\n                        l.Properties.Encrypted = encrypted;\n                    }\n                });\n            }\n        });\n    };\n\nconst fillPageListFromAdobePageMap = async (publication: Publication, zip: IZip, l: Link): Promise<void> => {\n    if (!l.HrefDecoded) {\n        return;\n    }\n    const pageMapContent = await loadFileStrFromZipPath(l.Href, l.HrefDecoded, zip);\n    if (!pageMapContent) {\n        return;\n    }\n    const pageMapXmlDoc = new xmldom.DOMParser().parseFromString(pageMapContent);\n\n    const pages = pageMapXmlDoc.getElementsByTagName(\"page\");\n    if (pages && pages.length) {\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < pages.length; i += 1) {\n            const page = pages.item(i)!;\n\n            const link = new Link();\n            const href = page.getAttribute(\"href\");\n            const title = page.getAttribute(\"name\");\n            if (href === null || title === null) {\n                continue;\n            }\n\n            if (!publication.PageList) {\n                publication.PageList = [];\n            }\n\n            const hrefDecoded = tryDecodeURI(href);\n            if (!hrefDecoded) {\n                continue;\n            }\n            const zipPath = path.join(path.dirname(l.HrefDecoded), hrefDecoded)\n                .replace(/\\\\/g, \"/\");\n\n            link.setHrefDecoded(zipPath);\n\n            link.Title = title;\n            publication.PageList.push(link);\n        }\n    }\n};\n\nconst fillCalibreSerieInfo = (publication: Publication, opf: OPF) => {\n    let serie: string | undefined;\n    let seriePosition: number | undefined;\n\n    if (opf.Metadata && opf.Metadata.Meta && opf.Metadata.Meta.length) {\n        opf.Metadata.Meta.forEach((m) => {\n            if (m.Name === \"calibre:series\") {\n                serie = m.Content;\n            }\n            if (m.Name === \"calibre:series_index\") {\n                seriePosition = parseFloat(m.Content);\n            }\n        });\n    }\n\n    if (serie) {\n        const contributor = new Contributor();\n        contributor.Name = serie;\n        if (seriePosition) {\n            contributor.Position = seriePosition;\n        }\n        if (!publication.Metadata.BelongsTo) {\n            publication.Metadata.BelongsTo = new BelongsTo();\n        }\n        if (!publication.Metadata.BelongsTo.Series) {\n            publication.Metadata.BelongsTo.Series = [];\n        }\n        publication.Metadata.BelongsTo.Series.push(contributor);\n    }\n};\n\nconst fillTOCFromNavDoc = async (publication: Publication, zip: IZip):\n    Promise<void> => {\n\n    const navLink = publication.GetNavDoc();\n    if (!navLink) {\n        return;\n    }\n\n    const navLinkHrefDecoded = navLink.HrefDecoded;\n    if (!navLinkHrefDecoded) {\n        debug(\"!?navLink.HrefDecoded\");\n        return;\n    }\n\n    const has = await zipHasEntry(zip, navLinkHrefDecoded, navLink.Href);\n    if (!has) {\n        debug(`NOT IN ZIP (fillTOCFromNavDoc): ${navLink.Href} --- ${navLinkHrefDecoded}`);\n        const zipEntries = await zip.getEntries();\n        for (const zipEntry of zipEntries) {\n            debug(zipEntry);\n        }\n        return;\n    }\n\n    let navDocZipStream_: IStreamAndLength;\n    try {\n        navDocZipStream_ = await zip.entryStreamPromise(navLinkHrefDecoded);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n    const navDocZipStream = navDocZipStream_.stream;\n\n    let navDocZipData: Buffer;\n    try {\n        navDocZipData = await streamToBufferPromise(navDocZipStream);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    const navDocStr = navDocZipData.toString(\"utf8\");\n    const navXmlDoc = new xmldom.DOMParser().parseFromString(navDocStr);\n\n    const select = xpath.useNamespaces({\n        epub: \"http://www.idpf.org/2007/ops\",\n        xhtml: \"http://www.w3.org/1999/xhtml\",\n    });\n\n    const navs = select(\"/xhtml:html/xhtml:body//xhtml:nav\", navXmlDoc) as Element[];\n    if (navs && navs.length) {\n\n        navs.forEach((navElement: Element) => {\n\n            const epubType = select(\"@epub:type\", navElement) as Attr[];\n            if (epubType && epubType.length) {\n\n                const olElem = select(\"xhtml:ol\", navElement) as Element[];\n\n                const rolesString = epubType[0].value;\n                const rolesArray = parseSpaceSeparatedString(rolesString);\n\n                if (rolesArray.length) {\n                    for (const role of rolesArray) {\n                        switch (role) {\n                            case \"toc\": {\n                                publication.TOC = [];\n                                fillTOCFromNavDocWithOL(select, olElem, publication.TOC, navLinkHrefDecoded);\n                                break;\n                            }\n                            case \"page-list\": {\n                                publication.PageList = [];\n                                fillTOCFromNavDocWithOL(select, olElem, publication.PageList, navLinkHrefDecoded);\n                                break;\n                            }\n                            case \"landmarks\": {\n                                publication.Landmarks = [];\n                                fillTOCFromNavDocWithOL(select, olElem, publication.Landmarks, navLinkHrefDecoded);\n                                break;\n                            }\n                            case \"lot\": {\n                                publication.LOT = [];\n                                fillTOCFromNavDocWithOL(select, olElem, publication.LOT, navLinkHrefDecoded);\n                                break;\n                            }\n                            case \"loa\": {\n                                publication.LOA = [];\n                                fillTOCFromNavDocWithOL(select, olElem, publication.LOA, navLinkHrefDecoded);\n                                break;\n                            }\n                            case \"loi\": {\n                                publication.LOI = [];\n                                fillTOCFromNavDocWithOL(select, olElem, publication.LOI, navLinkHrefDecoded);\n                                break;\n                            }\n                            case \"lov\": {\n                                publication.LOV = [];\n                                fillTOCFromNavDocWithOL(select, olElem, publication.LOV, navLinkHrefDecoded);\n                                break;\n                            }\n                            default: {\n                                break; // \"switch\", not enclosing \"for\" loop\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n};\n\nconst fillTOCFromNavDocWithOL = (\n    select: xpath.XPathSelect,\n    olElems: Element[],\n    children: Link[],\n    navDocPath: string) => {\n\n    olElems.forEach((olElem: Element) => {\n\n        const liElems = select(\"xhtml:li\", olElem) as Element[];\n        if (liElems && liElems.length) {\n\n            liElems.forEach((liElem) => {\n\n                const link = new Link();\n                children.push(link);\n\n                const aElems = select(\"xhtml:a\", liElem) as Element[];\n                if (aElems && aElems.length > 0) {\n\n                    const epubType = select(\"@epub:type\", aElems[0]) as Attr[];\n                    if (epubType && epubType.length) {\n\n                        const rolesString = epubType[0].value;\n                        const rolesArray = parseSpaceSeparatedString(rolesString);\n\n                        if (rolesArray.length) {\n                            link.AddRels(rolesArray);\n                        }\n                    }\n\n                    const aHref = select(\"@href\", aElems[0]) as Attr[];\n                    if (aHref && aHref.length) {\n                        const val = aHref[0].value;\n                        let valDecoded = tryDecodeURI(val);\n                        if (!valDecoded) {\n                            debug(\"!?valDecoded\");\n                            return; // foreach\n                        }\n                        if (val[0] === \"#\") {\n                            valDecoded = path.basename(navDocPath) + valDecoded;\n                        }\n\n                        const zipPath = path.join(path.dirname(navDocPath), valDecoded)\n                            .replace(/\\\\/g, \"/\");\n\n                        link.setHrefDecoded(zipPath);\n                    }\n\n                    let aText = aElems[0].textContent; // select(\"text()\", aElems[0])[0].data;\n                    if (aText && aText.length) {\n                        aText = aText.trim();\n                        aText = aText.replace(/\\s\\s+/g, \" \");\n                        link.Title = aText;\n                    }\n                } else {\n                    const liFirstChild = select(\"xhtml:*[1]\", liElem) as Element[];\n                    if (liFirstChild && liFirstChild.length && liFirstChild[0].textContent) {\n                        link.Title = liFirstChild[0].textContent.trim();\n                    }\n                }\n\n                const olElemsNext = select(\"xhtml:ol\", liElem) as Element[];\n                if (olElemsNext && olElemsNext.length) {\n                    if (!link.Children) {\n                        link.Children = [];\n                    }\n                    fillTOCFromNavDocWithOL(select, olElemsNext, link.Children, navDocPath);\n                }\n            });\n        }\n    });\n};\n\nconst addCoverRel = async (publication: Publication, rootfile: Rootfile, opf: OPF, zip: IZip) => {\n\n    let coverID: string | undefined;\n\n    if (opf.Metadata && opf.Metadata.Meta && opf.Metadata.Meta.length) {\n        opf.Metadata.Meta.find((meta) => {\n            if (meta.Name === \"cover\") {\n                coverID = meta.Content;\n                return true;\n            }\n            return false;\n        });\n    }\n\n    if (coverID) {\n        let manifestInfo: Link;\n        try {\n            manifestInfo = await findInManifestByID(publication, rootfile, opf, coverID, zip, addLinkData);\n        } catch (err) {\n            debug(err);\n            return;\n        }\n        if (manifestInfo && manifestInfo.Href && publication.Resources && publication.Resources.length) {\n\n            const href = manifestInfo.Href;\n            const linky = publication.Resources.find((item) => {\n                if (item.Href === href) {\n                    return true;\n                }\n                return false;\n            });\n            if (linky) { // publication.Resources[i]\n                linky.AddRel(\"cover\");\n                await addCoverDimensions(publication, linky);\n            }\n        }\n    }\n};\n\nconst findPropertiesInSpineForManifest = (linkEpub: Manifest, opf: OPF): string | undefined => {\n\n    if (opf.Spine && opf.Spine.Items && opf.Spine.Items.length) {\n        const it = opf.Spine.Items.find((item) => {\n            if (item.IDref === linkEpub.ID) {\n                return true;\n            }\n            return false;\n        });\n        if (it && it.Properties) {\n            return it.Properties;\n        }\n    }\n\n    return undefined;\n};\n\n// const findLinKByHref =\n// (publication: Publication, href: string): Link | undefined => {\n//     if (publication.Spine && publication.Spine.length) {\n//         const ll = publication.Spine.find((l) => {\n//             if (href === l.HrefDecoded) {\n//                 return true;\n//             }\n//             return false;\n//         });\n//         if (ll) {\n//             return ll;\n//         }\n//     }\n\n//     return undefined;\n// };\n\n// const fillMediaOverlay =\n//     async (publication: Publication, rootfile: Rootfile, opf: OPF, zip: IZip) => {\n\n//         if (!publication.Resources) {\n//             return;\n//         }\n\n//         for (const item of publication.Resources) {\n//             if (item.TypeLink !== \"application/smil+xml\") {\n//                 continue;\n//             }\n\n//             const itemHrefDecoded = item.HrefDecoded;\n//             if (!itemHrefDecoded) {\n//                 debug(\"?!item.HrefDecoded\");\n//                 continue;\n//             }\n//             const has = await zipHasEntry(zip, itemHrefDecoded, item.Href);\n//             if (!has) {\n//                 debug(`NOT IN ZIP (fillMediaOverlay): ${item.HrefDecoded} --- ${itemHrefDecoded}`);\n//                 const zipEntries = await zip.getEntries();\n//                 for (const zipEntry of zipEntries) {\n//                     debug(zipEntry);\n//                 }\n//                 continue;\n//             }\n\n//             const manItemsHtmlWithSmil: Manifest[] = [];\n//             opf.Manifest.forEach((manItemHtmlWithSmil) => {\n//                 if (manItemHtmlWithSmil.MediaOverlay) { // HTML\n//                     const manItemSmil = opf.Manifest.find((mi) => {\n//                         if (mi.ID === manItemHtmlWithSmil.MediaOverlay) {\n//                             return true;\n//                         }\n//                         return false;\n//                     });\n//                     if (manItemSmil && opf.ZipPath) {\n//                         const manItemSmilHrefDecoded = manItemSmil.HrefDecoded;\n//                         if (!manItemSmilHrefDecoded) {\n//                             debug(\"!?manItemSmil.HrefDecoded\");\n//                             return; // foreach\n//                         }\n//                         const smilFilePath = path.join(path.dirname(opf.ZipPath), manItemSmilHrefDecoded)\n//                                 .replace(/\\\\/g, \"/\");\n//                         if (smilFilePath === itemHrefDecoded) {\n//                             manItemsHtmlWithSmil.push(manItemHtmlWithSmil);\n//                         } else {\n//                             debug(`smilFilePath !== itemHrefDecoded ?! ${smilFilePath} ${itemHrefDecoded}`);\n//                         }\n//                     }\n//                 }\n//             });\n\n//             const mo = new MediaOverlayNode();\n//             mo.SmilPathInZip = itemHrefDecoded;\n//             mo.initialized = false;\n\n//             manItemsHtmlWithSmil.forEach((manItemHtmlWithSmil) => {\n\n//                 if (!opf.ZipPath) {\n//                     return;\n//                 }\n//                 const manItemHtmlWithSmilHrefDecoded = manItemHtmlWithSmil.HrefDecoded;\n//                 if (!manItemHtmlWithSmilHrefDecoded) {\n//                     debug(\"?!manItemHtmlWithSmil.HrefDecoded\");\n//                     return; // foreach\n//                 }\n//                 const htmlPathInZip = path.join(path.dirname(opf.ZipPath), manItemHtmlWithSmilHrefDecoded)\n//                     .replace(/\\\\/g, \"/\");\n\n//                 const link = findLinKByHref(publication, rootfile, opf, htmlPathInZip);\n//                 if (link) {\n//                     if (link.MediaOverlays) {\n//                         debug(`#### MediaOverlays?! ${htmlPathInZip} => ${link.MediaOverlays.SmilPathInZip}`);\n//                         return; // continue for each\n//                     }\n\n//                     const moURL = mediaOverlayURLPath + \"?\" +\n//                         mediaOverlayURLParam + \"=\" + encodeURIComponent_RFC3986(link.Href);\n\n//                     // legacy method:\n//                     if (!link.Properties) {\n//                         link.Properties = new Properties();\n//                     }\n//                     link.Properties.MediaOverlay = moURL;\n\n//                     // new method:\n//                     // https://w3c.github.io/sync-media-pub/incorporating-synchronized-narration.html#with-webpub\n//                     if (!link.Alternate) {\n//                         link.Alternate = [];\n//                     }\n//                     const moLink = new Link();\n//                     moLink.Href = moURL;\n//                     moLink.TypeLink = \"application/vnd.syncnarr+json\";\n//                     moLink.Duration = link.Duration;\n//                     link.Alternate.push(moLink);\n//                 }\n//             });\n\n//             if (item.Properties && item.Properties.Encrypted) {\n//                 debug(\"ENCRYPTED SMIL MEDIA OVERLAY: \" + item.Href);\n//                 continue;\n//             }\n//             // LAZY\n//             // await lazyLoadMediaOverlays(publication, mo);\n//         }\n\n//         return;\n//     };\n"]}