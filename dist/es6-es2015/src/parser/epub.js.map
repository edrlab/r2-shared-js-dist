{"version":3,"file":"epub.js","sourceRoot":"","sources":["../../../../src/parser/epub.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as fs from \"fs\";\nimport { imageSize } from \"image-size\";\nimport { ISize } from \"image-size/dist/types/interface\";\nimport * as moment from \"moment\";\nimport * as path from \"path\";\nimport * as querystring from \"querystring\";\nimport { JSON as TAJSON } from \"ta-json-x\";\nimport { URL } from \"url\";\nimport * as xmldom from \"xmldom\";\nimport * as xpath from \"xpath\";\n\nimport { MediaOverlayNode, timeStrToSeconds } from \"@models/media-overlay\";\nimport { DirectionEnum, Metadata } from \"@models/metadata\";\nimport { BelongsTo } from \"@models/metadata-belongsto\";\nimport { Contributor } from \"@models/metadata-contributor\";\nimport { MediaOverlay } from \"@models/metadata-media-overlay\";\nimport { IStringMap } from \"@models/metadata-multilang\";\nimport {\n    LayoutEnum, OrientationEnum, OverflowEnum, PageEnum, Properties, SpreadEnum,\n} from \"@models/metadata-properties\";\nimport { Subject } from \"@models/metadata-subject\";\nimport { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { Encrypted } from \"@r2-lcp-js/models/metadata-encrypted\";\nimport { LCP } from \"@r2-lcp-js/parser/epub/lcp\";\nimport { isHTTP } from \"@r2-utils-js/_utils/http/UrlUtils\";\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\nimport { XML } from \"@r2-utils-js/_utils/xml-js-mapper\";\nimport { IStreamAndLength, IZip } from \"@r2-utils-js/_utils/zip/zip\";\nimport { zipLoadPromise } from \"@r2-utils-js/_utils/zip/zipFactory\";\nimport { Transformers } from \"@transform/transformer\";\n\nimport { Container } from \"./epub/container\";\nimport { Rootfile } from \"./epub/container-rootfile\";\nimport { DisplayOptions } from \"./epub/display-options\";\nimport { Encryption } from \"./epub/encryption\";\nimport { NCX } from \"./epub/ncx\";\nimport { NavPoint } from \"./epub/ncx-navpoint\";\nimport { OPF } from \"./epub/opf\";\nimport { Author } from \"./epub/opf-author\";\nimport { Manifest } from \"./epub/opf-manifest\";\nimport { Metafield } from \"./epub/opf-metafield\";\nimport { Title } from \"./epub/opf-title\";\nimport { SMIL } from \"./epub/smil\";\nimport { Par } from \"./epub/smil-par\";\nimport { Seq } from \"./epub/smil-seq\";\nimport { SeqOrPar } from \"./epub/smil-seq-or-par\";\n\nconst debug = debug_(\"r2:shared#parser/epub\");\n\nconst epub3 = \"3.0\";\nconst epub301 = \"3.0.1\";\nconst epub31 = \"3.1\";\n// const epub2 = \"2.0\";\n// const epub201 = \"2.0.1\";\n\nexport const mediaOverlayURLPath = \"media-overlay.json\";\nexport const mediaOverlayURLParam = \"resource\";\n\nexport const addCoverDimensions = async (publication: Publication, coverLink: Link) => {\n\n    const zipInternal = publication.findFromInternal(\"zip\");\n    if (zipInternal) {\n        const zip = zipInternal.Value as IZip;\n        let has = zip.hasEntry(coverLink.Href);\n        if ((zip as any).hasEntryAsync) { // hacky!!! (HTTP fetch)\n            try {\n                has = await (zip as any).hasEntryAsync(coverLink.Href);\n            } catch (err) {\n                console.log(err);\n            }\n        }\n        if (has) {\n            let zipStream: IStreamAndLength;\n            try {\n                zipStream = await zip.entryStreamPromise(coverLink.Href);\n            } catch (err) {\n                debug(coverLink.Href);\n                debug(coverLink.TypeLink);\n                debug(err);\n                return;\n            }\n\n            let zipData: Buffer;\n            try {\n                zipData = await streamToBufferPromise(zipStream.stream);\n\n                const imageInfo = imageSize(zipData) as ISize;\n                if (imageInfo && imageInfo.width && imageInfo.height) {\n                    coverLink.Width = imageInfo.width;\n                    coverLink.Height = imageInfo.height;\n\n                    if (coverLink.TypeLink &&\n                        coverLink.TypeLink.replace(\"jpeg\", \"jpg\").replace(\"+xml\", \"\")\n                        !== (\"image/\" + imageInfo.type)) {\n                        debug(`Wrong image type? ${coverLink.TypeLink} -- ${imageInfo.type}`);\n                    }\n                }\n            } catch (err) {\n                debug(coverLink.Href);\n                debug(coverLink.TypeLink);\n                debug(err);\n            }\n        }\n    }\n};\n\nexport enum EPUBis {\n    LocalExploded = \"LocalExploded\",\n    LocalPacked = \"LocalPacked\",\n    RemoteExploded = \"RemoteExploded\",\n    RemotePacked = \"RemotePacked\",\n}\nexport function isEPUBlication(urlOrPath: string): EPUBis | undefined {\n    let p = urlOrPath;\n    const http = isHTTP(urlOrPath);\n    if (http) {\n        const url = new URL(urlOrPath);\n        p = url.pathname;\n    } else if (fs.existsSync(path.join(urlOrPath, \"META-INF\", \"container.xml\"))) {\n        return EPUBis.LocalExploded;\n    }\n    const fileName = path.basename(p);\n    const ext = path.extname(fileName).toLowerCase();\n\n    const epub = /\\.epub[3]?$/.test(ext);\n    if (epub) {\n        return http ? EPUBis.RemotePacked : EPUBis.LocalPacked;\n    }\n\n    // filePath.replace(/\\//, \"/\").endsWith(\"META-INF/container.xml\")\n    if (/META-INF[\\/|\\\\]container.xml$/.test(p)) {\n        return http ? EPUBis.RemoteExploded : EPUBis.LocalExploded;\n    }\n\n    return undefined;\n}\n\nexport async function EpubParsePromise(filePath: string): Promise<Publication> {\n\n    const isAnEPUB = isEPUBlication(filePath);\n\n    // // excludes EPUBis.RemoteExploded\n    // const canLoad = isAnEPUB === EPUBis.LocalExploded ||\n    //     isAnEPUB === EPUBis.LocalPacked ||\n    //     isAnEPUB === EPUBis.RemotePacked;\n    // if (!canLoad) {\n    //     // TODO? r2-utils-js zip-ext.ts => variant for HTTP without directory listing? (no deterministic zip entries)\n    //     const err = \"Cannot load exploded remote EPUB (needs filesystem access to list directory contents).\";\n    //     debug(err);\n    //     return Promise.reject(err);\n    // }\n\n    let filePathToLoad = filePath;\n    if (isAnEPUB === EPUBis.LocalExploded) { // (must ensure is directory/folder)\n        filePathToLoad = filePathToLoad.replace(/META-INF[\\/|\\\\]container.xml$/, \"\");\n    } else if (isAnEPUB === EPUBis.RemoteExploded) {\n        const url = new URL(filePathToLoad);\n        url.pathname = url.pathname.replace(/META-INF[\\/|\\\\]container.xml$/, \"\");\n        // contains trailing slash\n        filePathToLoad = url.toString();\n    }\n    let zip: IZip;\n    try {\n        zip = await zipLoadPromise(filePathToLoad);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    if (!zip.hasEntries()) {\n        return Promise.reject(\"EPUB zip empty\");\n    }\n\n    const publication = new Publication();\n    publication.Context = [\"https://readium.org/webpub-manifest/context.jsonld\"];\n    publication.Metadata = new Metadata();\n    publication.Metadata.RDFType = \"http://schema.org/Book\";\n    publication.Metadata.Modified = moment(Date.now()).toDate();\n\n    publication.AddToInternal(\"filename\", path.basename(filePath));\n\n    publication.AddToInternal(\"type\", \"epub\");\n    publication.AddToInternal(\"zip\", zip);\n\n    let lcpl: LCP | undefined;\n    const lcplZipPath = \"META-INF/license.lcpl\";\n    let has = zip.hasEntry(lcplZipPath);\n    if ((zip as any).hasEntryAsync) { // hacky!!! (HTTP fetch)\n        try {\n            has = await (zip as any).hasEntryAsync(lcplZipPath);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n    if (has) {\n        let lcplZipStream_: IStreamAndLength;\n        try {\n            lcplZipStream_ = await zip.entryStreamPromise(lcplZipPath);\n        } catch (err) {\n            debug(err);\n            return Promise.reject(err);\n        }\n        const lcplZipStream = lcplZipStream_.stream;\n\n        let lcplZipData: Buffer;\n        try {\n            lcplZipData = await streamToBufferPromise(lcplZipStream);\n        } catch (err) {\n            debug(err);\n            return Promise.reject(err);\n        }\n\n        const lcplStr = lcplZipData.toString(\"utf8\");\n        const lcplJson = global.JSON.parse(lcplStr);\n        // debug(lcplJson);\n        lcpl = TAJSON.deserialize<LCP>(lcplJson, LCP);\n        lcpl.ZipPath = lcplZipPath;\n        lcpl.JsonSource = lcplStr;\n        lcpl.init();\n\n        // breakLength: 100  maxArrayLength: undefined\n        // console.log(util.inspect(lcpl,\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n        publication.LCP = lcpl;\n\n        // // breakLength: 100  maxArrayLength: undefined\n        // console.log(util.inspect(this.LCP,\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n        // https://github.com/readium/readium-lcp-specs/issues/15#issuecomment-358247286\n        // application/vnd.readium.lcp.license-1.0+json (LEGACY)\n        // application/vnd.readium.lcp.license.v1.0+json (NEW)\n        // application/vnd.readium.license.status.v1.0+json (LSD)\n        const mime = \"application/vnd.readium.lcp.license.v1.0+json\";\n        publication.AddLink(mime, [\"license\"], lcpl.ZipPath, undefined);\n    }\n\n    let encryption: Encryption | undefined;\n    const encZipPath = \"META-INF/encryption.xml\";\n    has = zip.hasEntry(encZipPath);\n    if ((zip as any).hasEntryAsync) { // hacky!!! (HTTP fetch)\n        try {\n            has = await (zip as any).hasEntryAsync(encZipPath);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n    if (has) {\n        let encryptionXmlZipStream_: IStreamAndLength;\n        try {\n            encryptionXmlZipStream_ = await zip.entryStreamPromise(encZipPath);\n        } catch (err) {\n            debug(err);\n            return Promise.reject(err);\n        }\n        const encryptionXmlZipStream = encryptionXmlZipStream_.stream;\n\n        let encryptionXmlZipData: Buffer;\n        try {\n            encryptionXmlZipData = await streamToBufferPromise(encryptionXmlZipStream);\n        } catch (err) {\n            debug(err);\n            return Promise.reject(err);\n        }\n\n        const encryptionXmlStr = encryptionXmlZipData.toString(\"utf8\");\n        const encryptionXmlDoc = new xmldom.DOMParser().parseFromString(encryptionXmlStr);\n\n        encryption = XML.deserialize<Encryption>(encryptionXmlDoc, Encryption);\n        encryption.ZipPath = encZipPath;\n\n        // breakLength: 100  maxArrayLength: undefined\n        // console.log(util.inspect(encryption,\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n    }\n\n    const containerZipPath = \"META-INF/container.xml\";\n\n    let containerXmlZipStream_: IStreamAndLength;\n    try {\n        containerXmlZipStream_ = await zip.entryStreamPromise(containerZipPath);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n    const containerXmlZipStream = containerXmlZipStream_.stream;\n\n    let containerXmlZipData: Buffer;\n    try {\n        containerXmlZipData = await streamToBufferPromise(containerXmlZipStream);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    const containerXmlStr = containerXmlZipData.toString(\"utf8\");\n    const containerXmlDoc = new xmldom.DOMParser().parseFromString(containerXmlStr);\n\n    // debug(containerXmlDoc);\n    // debug(containerXmlStr);\n    // const containerXmlRootElement = xpath.select1(\"/\", containerXmlDoc);\n    // debug(containerXmlRootElement.toString());\n\n    const container = XML.deserialize<Container>(containerXmlDoc, Container);\n    container.ZipPath = containerZipPath;\n    // breakLength: 100  maxArrayLength: undefined\n    // console.log(util.inspect(container,\n    //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n    const rootfile = container.Rootfile[0];\n\n    // debug(`${rootfile.Path}:`);\n\n    // let timeBegin = process.hrtime();\n\n    let opfZipStream_: IStreamAndLength;\n    try {\n        opfZipStream_ = await zip.entryStreamPromise(rootfile.Path);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n    const opfZipStream = opfZipStream_.stream;\n\n    // const timeElapsed1 = process.hrtime(timeBegin);\n    // debug(`1) ${timeElapsed1[0]} seconds + ${timeElapsed1[1]} nanoseconds`);\n    // timeBegin = process.hrtime();\n\n    let opfZipData: Buffer;\n    try {\n        opfZipData = await streamToBufferPromise(opfZipStream);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    // debug(`${opfZipData.length} bytes`);\n\n    // const timeElapsed2 = process.hrtime(timeBegin);\n    // debug(`2) ${timeElapsed2[0]} seconds + ${timeElapsed2[1]} nanoseconds`);\n    // timeBegin = process.hrtime();\n\n    const opfStr = opfZipData.toString(\"utf8\");\n\n    // const timeElapsed3 = process.hrtime(timeBegin);\n    // debug(`3) ${timeElapsed3[0]} seconds + ${timeElapsed3[1]} nanoseconds`);\n    // timeBegin = process.hrtime();\n\n    // TODO: this takes some time with large OPF XML data\n    // (typically: many manifest items),\n    // but it remains acceptable.\n    // e.g. BasicTechnicalMathWithCalculus.epub with 2.5MB OPF!\n    const opfDoc = new xmldom.DOMParser().parseFromString(opfStr);\n\n    // const timeElapsed4 = process.hrtime(timeBegin);\n    // debug(`4) ${timeElapsed4[0]} seconds + ${timeElapsed4[1]} nanoseconds`);\n    // const timeBegin = process.hrtime();\n\n    // tslint:disable-next-line:no-string-literal\n    // process.env[\"OPF_PARSE\"] = \"true\";\n    // TODO: this takes a MASSIVE amount of time with large OPF XML data\n    // (typically: many manifest items)\n    // e.g. BasicTechnicalMathWithCalculus.epub with 2.5MB OPF!\n    // culprit: XPath lib ... so we use our own mini XPath parser/matcher\n    // (=> performance gain in orders of magnitude!)\n    const opf = XML.deserialize<OPF>(opfDoc, OPF);\n    // tslint:disable-next-line:no-string-literal\n    // process.env[\"OPF_PARSE\"] = \"false\";\n\n    // const timeElapsed5 = process.hrtime(timeBegin);\n    // debug(`5) ${timeElapsed5[0]} seconds + ${timeElapsed5[1]} nanoseconds`);\n\n    opf.ZipPath = rootfile.Path;\n\n    // breakLength: 100  maxArrayLength: undefined\n    // console.log(util.inspect(opf,\n    //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n    // const epubVersion = getEpubVersion(rootfile, opf);\n\n    let ncx: NCX | undefined;\n    if (opf.Spine.Toc) {\n        const ncxManItem = opf.Manifest.find((manifestItem) => {\n            return manifestItem.ID === opf.Spine.Toc;\n        });\n        if (ncxManItem) {\n            const ncxFilePath = path.join(path.dirname(opf.ZipPath), ncxManItem.Href)\n                .replace(/\\\\/g, \"/\");\n            // debug(\"########## NCX: \"\n            //     + opf.ZipPath\n            //     + \" == \"\n            //     + ncxManItem.Href\n            //     + \" -- \"\n            //     + ncxFilePath);\n\n            let ncxZipStream_: IStreamAndLength;\n            try {\n                ncxZipStream_ = await zip.entryStreamPromise(ncxFilePath);\n            } catch (err) {\n                debug(err);\n                return Promise.reject(err);\n            }\n            const ncxZipStream = ncxZipStream_.stream;\n\n            let ncxZipData: Buffer;\n            try {\n                ncxZipData = await streamToBufferPromise(ncxZipStream);\n            } catch (err) {\n                debug(err);\n                return Promise.reject(err);\n            }\n\n            const ncxStr = ncxZipData.toString(\"utf8\");\n            const ncxDoc = new xmldom.DOMParser().parseFromString(ncxStr);\n            ncx = XML.deserialize<NCX>(ncxDoc, NCX);\n            ncx.ZipPath = ncxFilePath;\n\n            // breakLength: 100  maxArrayLength: undefined\n            // console.log(util.inspect(ncx,\n            //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n        }\n    }\n\n    if (opf.Metadata) {\n        if (opf.Metadata.Language) {\n            publication.Metadata.Language = opf.Metadata.Language;\n        }\n    }\n\n    addTitle(publication, rootfile, opf);\n\n    addIdentifier(publication, rootfile, opf);\n\n    if (opf.Metadata) {\n        if (opf.Metadata.Rights && opf.Metadata.Rights.length) {\n            publication.Metadata.Rights = opf.Metadata.Rights.join(\" \");\n        }\n        if (opf.Metadata.Description && opf.Metadata.Description.length) {\n            publication.Metadata.Description = opf.Metadata.Description[0];\n        }\n        if (opf.Metadata.Publisher && opf.Metadata.Publisher.length) {\n            publication.Metadata.Publisher = [];\n\n            opf.Metadata.Publisher.forEach((pub) => {\n                const contrib = new Contributor();\n                contrib.Name = pub;\n                publication.Metadata.Publisher.push(contrib);\n            });\n        }\n        if (opf.Metadata.Source && opf.Metadata.Source.length) {\n            publication.Metadata.Source = opf.Metadata.Source[0];\n        }\n\n        if (opf.Metadata.Contributor && opf.Metadata.Contributor.length) {\n            opf.Metadata.Contributor.forEach((cont) => {\n                addContributor(publication, rootfile, opf, cont, undefined);\n            });\n        }\n        if (opf.Metadata.Creator && opf.Metadata.Creator.length) {\n            opf.Metadata.Creator.forEach((cont) => {\n                addContributor(publication, rootfile, opf, cont, \"aut\");\n            });\n        }\n\n        if (opf.Metadata.Meta) {\n            const metasDuration: Metafield[] = [];\n            const metasNarrator: Metafield[] = [];\n            const metasActiveClass: Metafield[] = [];\n            const metasPlaybackActiveClass: Metafield[] = [];\n\n            opf.Metadata.Meta.forEach((metaTag) => {\n                if (metaTag.Property === \"media:duration\") {\n                    metasDuration.push(metaTag);\n                }\n                if (metaTag.Property === \"media:narrator\") {\n                    metasNarrator.push(metaTag);\n                }\n                if (metaTag.Property === \"media:active-class\") {\n                    metasActiveClass.push(metaTag);\n                }\n                if (metaTag.Property === \"media:playback-active-class\") {\n                    metasPlaybackActiveClass.push(metaTag);\n                }\n            });\n\n            if (metasDuration.length) {\n                publication.Metadata.Duration = timeStrToSeconds(metasDuration[0].Data);\n            }\n            if (metasNarrator.length) {\n                if (!publication.Metadata.Narrator) {\n                    publication.Metadata.Narrator = [];\n                }\n                metasNarrator.forEach((metaNarrator) => {\n                    const cont = new Contributor();\n                    cont.Name = metaNarrator.Data;\n                    publication.Metadata.Narrator.push(cont);\n                });\n            }\n            if (metasActiveClass.length) {\n                if (!publication.Metadata.MediaOverlay) {\n                    publication.Metadata.MediaOverlay = new MediaOverlay();\n                }\n                publication.Metadata.MediaOverlay.ActiveClass = metasActiveClass[0].Data;\n            }\n            if (metasPlaybackActiveClass.length) {\n                if (!publication.Metadata.MediaOverlay) {\n                    publication.Metadata.MediaOverlay = new MediaOverlay();\n                }\n                publication.Metadata.MediaOverlay.PlaybackActiveClass = metasPlaybackActiveClass[0].Data;\n            }\n        }\n    }\n\n    if (opf.Spine && opf.Spine.PageProgression) {\n        switch (opf.Spine.PageProgression) {\n            case \"auto\": {\n                publication.Metadata.Direction = DirectionEnum.Auto;\n                break;\n            }\n            case \"ltr\": {\n                publication.Metadata.Direction = DirectionEnum.LTR;\n                break;\n            }\n            case \"rtl\": {\n                publication.Metadata.Direction = DirectionEnum.RTL;\n                break;\n            }\n        }\n    }\n\n    if (publication.Metadata.Language && publication.Metadata.Language.length &&\n        (!publication.Metadata.Direction || publication.Metadata.Direction === DirectionEnum.Auto)) {\n\n        const lang = publication.Metadata.Language[0].toLowerCase();\n        if ((lang === \"ar\" || lang.startsWith(\"ar-\") ||\n            lang === \"he\" || lang.startsWith(\"he-\") ||\n            lang === \"fa\" || lang.startsWith(\"fa-\")) ||\n            lang === \"zh-Hant\" ||\n            lang === \"zh-TW\") {\n\n            publication.Metadata.Direction = DirectionEnum.RTL;\n        }\n    }\n\n    if (isEpub3OrMore(rootfile, opf)) {\n        findContributorInMeta(publication, rootfile, opf);\n    }\n    await fillSpineAndResource(publication, rootfile, opf);\n\n    await addRendition(publication, rootfile, opf, zip);\n\n    await addCoverRel(publication, rootfile, opf);\n\n    if (encryption) {\n        fillEncryptionInfo(publication, rootfile, opf, encryption, lcpl);\n    }\n\n    await fillTOCFromNavDoc(publication, rootfile, opf, zip);\n\n    if (!publication.TOC || !publication.TOC.length) {\n        if (ncx) {\n            fillTOCFromNCX(publication, rootfile, opf, ncx);\n            if (!publication.PageList) {\n                fillPageListFromNCX(publication, rootfile, opf, ncx);\n            }\n        }\n        fillLandmarksFromGuide(publication, rootfile, opf);\n    }\n\n    if (!publication.PageList && publication.Resources) {\n        // EPUB extended with Adobe Digital Editions page map\n        //  https://wiki.mobileread.com/wiki/Adobe_Digital_Editions#Page-map\n        const pageMapLink = publication.Resources.find((item: Link): boolean => {\n            return item.TypeLink === \"application/oebps-page-map+xml\";\n        });\n        if (pageMapLink) {\n            const zipPathHref = pageMapLink.Href;\n            await fillPageListFromAdobePageMap(publication, rootfile, opf, zip, zipPathHref);\n        }\n    }\n\n    fillCalibreSerieInfo(publication, rootfile, opf);\n    fillSubject(publication, rootfile, opf);\n\n    fillPublicationDate(publication, rootfile, opf);\n\n    await fillMediaOverlay(publication, rootfile, opf, zip);\n\n    return publication;\n}\n\n// private filePathToTitle(filePath: string): string {\n//     const fileName = path.basename(filePath);\n//     return slugify(fileName, \"_\").replace(/[\\.]/g, \"_\");\n// }\n\nexport async function getAllMediaOverlays(publication: Publication): Promise<MediaOverlayNode[]> {\n    const mos: MediaOverlayNode[] = [];\n\n    if (publication.Spine) {\n        for (const link of publication.Spine) {\n            // publication.Spine.forEach((link) => {\n            if (link.MediaOverlays) {\n                for (const mo of link.MediaOverlays) {\n                    // link.MediaOverlays.forEach((mo) => {\n                    try {\n                        await fillMediaOverlayParse(publication, mo);\n                    } catch (err) {\n                        return Promise.reject(err);\n                    }\n                    mos.push(mo);\n                    // });\n                }\n            }\n            // });\n        }\n    }\n\n    return Promise.resolve(mos);\n}\n\nexport async function getMediaOverlay(publication: Publication, spineHref: string): Promise<MediaOverlayNode[]> {\n    const mos: MediaOverlayNode[] = [];\n\n    if (publication.Spine) {\n        for (const link of publication.Spine) {\n            // publication.Spine.forEach((link) => {\n            if (link.MediaOverlays && link.Href.indexOf(spineHref) >= 0) {\n                for (const mo of link.MediaOverlays) {\n                    // link.MediaOverlays.forEach((mo) => {\n                    try {\n                        await fillMediaOverlayParse(publication, mo);\n                    } catch (err) {\n                        return Promise.reject(err);\n                    }\n                    mos.push(mo);\n                    // });\n                }\n            }\n            // });\n        }\n    }\n\n    return Promise.resolve(mos);\n}\n\nconst fillMediaOverlayParse =\n    async (publication: Publication, mo: MediaOverlayNode) => {\n\n    if (mo.initialized || !mo.SmilPathInZip) {\n        return;\n    }\n\n    let link: Link | undefined;\n    if (publication.Resources) {\n\n        const relativePath = mo.SmilPathInZip;\n\n        link = publication.Resources.find((l) => {\n            if (l.Href === relativePath) {\n                return true;\n            }\n            return false;\n        });\n        if (!link) {\n            if (publication.Spine) {\n                link = publication.Spine.find((l) => {\n                    if (l.Href === relativePath) {\n                        return true;\n                    }\n                    return false;\n                });\n            }\n        }\n        if (!link) {\n            const err = \"Asset not declared in publication spine/resources! \" + relativePath;\n            debug(err);\n            return Promise.reject(err);\n        }\n    }\n\n    const zipInternal = publication.findFromInternal(\"zip\");\n    if (!zipInternal) {\n        return;\n    }\n    const zip = zipInternal.Value as IZip;\n\n    let smilZipStream_: IStreamAndLength;\n    try {\n        smilZipStream_ = await zip.entryStreamPromise(mo.SmilPathInZip);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    if (link && link.Properties && link.Properties.Encrypted) {\n        let decryptFail = false;\n        let transformedStream: IStreamAndLength;\n        try {\n            transformedStream = await Transformers.tryStream(\n                publication, link,\n                smilZipStream_,\n                false, 0, 0);\n        } catch (err) {\n            debug(err);\n            return Promise.reject(err);\n        }\n        if (transformedStream) {\n            smilZipStream_ = transformedStream;\n        } else {\n            decryptFail = true;\n        }\n\n        if (decryptFail) {\n            const err = \"Encryption scheme not supported.\";\n            debug(err);\n            return Promise.reject(err);\n        }\n    }\n\n    const smilZipStream = smilZipStream_.stream;\n\n    let smilZipData: Buffer;\n    try {\n        smilZipData = await streamToBufferPromise(smilZipStream);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    const smilStr = smilZipData.toString(\"utf8\");\n    const smilXmlDoc = new xmldom.DOMParser().parseFromString(smilStr);\n    const smil = XML.deserialize<SMIL>(smilXmlDoc, SMIL);\n    smil.ZipPath = mo.SmilPathInZip;\n\n    mo.initialized = true;\n    debug(\"PARSED SMIL: \" + mo.SmilPathInZip);\n\n    // breakLength: 100  maxArrayLength: undefined\n    // console.log(util.inspect(smil,\n    //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n    mo.Role = [];\n    mo.Role.push(\"section\");\n\n    if (smil.Body) {\n        if (smil.Body.EpubType) {\n            smil.Body.EpubType.trim().split(\" \").forEach((role) => {\n                if (!role.length) {\n                    return;\n                }\n                if (mo.Role.indexOf(role) < 0) {\n                    mo.Role.push(role);\n                }\n            });\n        }\n        if (smil.Body.TextRef) {\n            const zipPath = path.join(path.dirname(smil.ZipPath), smil.Body.TextRef)\n                .replace(/\\\\/g, \"/\");\n            mo.Text = zipPath;\n\n        }\n        if (smil.Body.Children && smil.Body.Children.length) {\n            smil.Body.Children.forEach((seqChild) => {\n                if (!mo.Children) {\n                    mo.Children = [];\n                }\n                addSeqToMediaOverlay(smil, publication, mo, mo.Children, seqChild);\n            });\n        }\n    }\n\n    return;\n};\n\nconst fillMediaOverlay =\n    async (publication: Publication, rootfile: Rootfile, opf: OPF, zip: IZip) => {\n\n        if (!publication.Resources) {\n            return;\n        }\n\n        // no forEach(), because of await/async within the iteration body\n        // publication.Resources.forEach(async (item) => {\n        for (const item of publication.Resources) {\n            if (item.TypeLink !== \"application/smil+xml\") {\n                continue;\n            }\n\n            let has = zip.hasEntry(item.Href);\n            if ((zip as any).hasEntryAsync) { // hacky!!! (HTTP fetch)\n                try {\n                    has = await (zip as any).hasEntryAsync(item.Href);\n                } catch (err) {\n                    console.log(err);\n                }\n            }\n            if (!has) {\n                continue;\n            }\n\n            const manItemsHtmlWithSmil: Manifest[] = [];\n            opf.Manifest.forEach((manItemHtmlWithSmil) => {\n                if (manItemHtmlWithSmil.MediaOverlay) { // HTML\n                    const manItemSmil = opf.Manifest.find((mi) => {\n                        if (mi.ID === manItemHtmlWithSmil.MediaOverlay) {\n                            return true;\n                        }\n                        return false;\n                    });\n                    if (manItemSmil && opf.ZipPath) {\n                        const smilFilePath2 = path.join(path.dirname(opf.ZipPath), manItemSmil.Href)\n                            .replace(/\\\\/g, \"/\");\n                        if (smilFilePath2 === item.Href) {\n                            manItemsHtmlWithSmil.push(manItemHtmlWithSmil);\n                        }\n                    }\n                }\n            });\n\n            const mo = new MediaOverlayNode();\n            mo.SmilPathInZip = item.Href;\n            mo.initialized = false;\n\n            manItemsHtmlWithSmil.forEach((manItemHtmlWithSmil) => {\n\n                if (!opf.ZipPath) {\n                    return;\n                }\n\n                const htmlPathInZip = path.join(path.dirname(opf.ZipPath), manItemHtmlWithSmil.Href)\n                    .replace(/\\\\/g, \"/\");\n\n                const link = findLinKByHref(publication, rootfile, opf, htmlPathInZip);\n                if (link) {\n                    if (!link.MediaOverlays) {\n                        link.MediaOverlays = [];\n                    }\n\n                    const alreadyExists = link.MediaOverlays.find((moo) => {\n                        if (item.Href === moo.SmilPathInZip) {\n                            return true;\n                        }\n                        return false;\n                    });\n                    if (!alreadyExists) {\n                        link.MediaOverlays.push(mo);\n                    }\n\n                    if (!link.Properties) {\n                        link.Properties = new Properties();\n                    }\n                    link.Properties.MediaOverlay = mediaOverlayURLPath + \"?\" +\n                        mediaOverlayURLParam + \"=\" + querystring.escape(link.Href);\n                }\n            });\n\n            if (item.Properties && item.Properties.Encrypted) {\n                debug(\"ENCRYPTED SMIL MEDIA OVERLAY: \" + item.Href);\n                continue;\n            }\n            // LAZY\n            // await fillMediaOverlayParse(publication, mo);\n        }\n\n        return;\n    };\n\nconst addSeqToMediaOverlay = (\n    smil: SMIL, publication: Publication,\n    rootMO: MediaOverlayNode, mo: MediaOverlayNode[], seqChild: SeqOrPar) => {\n\n    if (!smil.ZipPath) {\n        return;\n    }\n\n    const moc = new MediaOverlayNode();\n    moc.initialized = rootMO.initialized;\n    mo.push(moc);\n\n    if (seqChild instanceof Seq) {\n        moc.Role = [];\n        moc.Role.push(\"section\");\n\n        const seq = seqChild as Seq;\n\n        if (seq.EpubType) {\n            seq.EpubType.trim().split(\" \").forEach((role) => {\n                if (!role.length) {\n                    return;\n                }\n                if (moc.Role.indexOf(role) < 0) {\n                    moc.Role.push(role);\n                }\n            });\n        }\n\n        if (seq.TextRef) {\n            const zipPath = path.join(path.dirname(smil.ZipPath), seq.TextRef)\n                .replace(/\\\\/g, \"/\");\n            moc.Text = zipPath;\n        }\n\n        if (seq.Children && seq.Children.length) {\n            seq.Children.forEach((child) => {\n                if (!moc.Children) {\n                    moc.Children = [];\n                }\n                addSeqToMediaOverlay(smil, publication, rootMO, moc.Children, child);\n            });\n        }\n    } else { // Par\n        const par = seqChild as Par;\n\n        if (par.EpubType) {\n            par.EpubType.trim().split(\" \").forEach((role) => {\n                if (!role.length) {\n                    return;\n                }\n                if (!moc.Role) {\n                    moc.Role = [];\n                }\n                if (moc.Role.indexOf(role) < 0) {\n                    moc.Role.push(role);\n                }\n            });\n        }\n\n        if (par.Text && par.Text.Src) {\n            const zipPath = path.join(path.dirname(smil.ZipPath), par.Text.Src)\n                .replace(/\\\\/g, \"/\");\n            moc.Text = zipPath;\n        }\n        if (par.Audio && par.Audio.Src) {\n            const zipPath = path.join(path.dirname(smil.ZipPath), par.Audio.Src)\n                .replace(/\\\\/g, \"/\");\n            moc.Audio = zipPath;\n            moc.Audio += \"#t=\";\n            moc.Audio += par.Audio.ClipBegin ? timeStrToSeconds(par.Audio.ClipBegin) : \"0\";\n            if (par.Audio.ClipEnd) {\n                moc.Audio += \",\";\n                moc.Audio += timeStrToSeconds(par.Audio.ClipEnd);\n            }\n        }\n    }\n};\n\nconst fillPublicationDate = (publication: Publication, rootfile: Rootfile, opf: OPF) => {\n\n    if (opf.Metadata && opf.Metadata.Date && opf.Metadata.Date.length) {\n\n        if (isEpub3OrMore(rootfile, opf) && opf.Metadata.Date[0] && opf.Metadata.Date[0].Data) {\n            const token = opf.Metadata.Date[0].Data;\n            try {\n                const mom = moment(token);\n                if (mom.isValid()) {\n                    publication.Metadata.PublicationDate = mom.toDate();\n                }\n            } catch (err) {\n                console.log(\"INVALID DATE/TIME? \" + token);\n            }\n            return;\n        }\n\n        opf.Metadata.Date.forEach((date) => {\n            if (date.Data && date.Event && date.Event.indexOf(\"publication\") >= 0) {\n                const token = date.Data;\n                try {\n                    const mom = moment(token);\n                    if (mom.isValid()) {\n                        publication.Metadata.PublicationDate = mom.toDate();\n                    }\n                } catch (err) {\n                    console.log(\"INVALID DATE/TIME? \" + token);\n                }\n            }\n        });\n    }\n};\n\nconst findContributorInMeta = (publication: Publication, rootfile: Rootfile, opf: OPF) => {\n\n    if (opf.Metadata && opf.Metadata.Meta) {\n        opf.Metadata.Meta.forEach((meta) => {\n            if (meta.Property === \"dcterms:creator\" || meta.Property === \"dcterms:contributor\") {\n                const cont = new Author();\n                cont.Data = meta.Data;\n                cont.ID = meta.ID;\n                addContributor(publication, rootfile, opf, cont, undefined);\n            }\n        });\n    }\n};\n\nconst addContributor = (\n    publication: Publication, rootfile: Rootfile, opf: OPF, cont: Author, forcedRole: string | undefined) => {\n\n    const contributor = new Contributor();\n    let role: string | undefined;\n\n    // const epubVersion = getEpubVersion(rootfile, opf);\n\n    if (isEpub3OrMore(rootfile, opf)) {\n\n        if (cont.FileAs) {\n            contributor.SortAs = cont.FileAs;\n        } else {\n            const metaFileAs = findMetaByRefineAndProperty(rootfile, opf, cont.ID, \"file-as\");\n            if (metaFileAs && metaFileAs.Property === \"file-as\") {\n                contributor.SortAs = metaFileAs.Data;\n            }\n        }\n\n        const metaRole = findMetaByRefineAndProperty(rootfile, opf, cont.ID, \"role\");\n        if (metaRole && metaRole.Property === \"role\") {\n            role = metaRole.Data;\n        }\n        if (!role && forcedRole) {\n            role = forcedRole;\n        }\n\n        const metaAlt = findAllMetaByRefineAndProperty(rootfile, opf, cont.ID, \"alternate-script\");\n        if (metaAlt && metaAlt.length) {\n            contributor.Name = {} as IStringMap;\n\n            metaAlt.forEach((m) => {\n                if (m.Lang) {\n                    (contributor.Name as IStringMap)[m.Lang] = m.Data;\n                }\n            });\n\n            // https://github.com/readium/architecture/blob/master/streamer/parser/metadata.md#title\n            const xmlLang: string = cont.Lang || opf.Lang;\n            if (xmlLang) {\n                contributor.Name[xmlLang.toLowerCase()] = cont.Data;\n            } else if (publication.Metadata &&\n                publication.Metadata.Language &&\n                publication.Metadata.Language.length &&\n                !contributor.Name[publication.Metadata.Language[0].toLowerCase()]) {\n                contributor.Name[publication.Metadata.Language[0].toLowerCase()] = cont.Data;\n            } else {\n                // tslint:disable-next-line: no-string-literal\n                contributor.Name[\"_\"] = cont.Data;\n            }\n        } else {\n            contributor.Name = cont.Data;\n        }\n    } else {\n        contributor.Name = cont.Data;\n        role = cont.Role;\n        if (!role && forcedRole) {\n            role = forcedRole;\n        }\n    }\n\n    if (role) {\n        switch (role) {\n            case \"aut\": {\n                if (!publication.Metadata.Author) {\n                    publication.Metadata.Author = [];\n                }\n                publication.Metadata.Author.push(contributor);\n                break;\n            }\n            case \"trl\": {\n                if (!publication.Metadata.Translator) {\n                    publication.Metadata.Translator = [];\n                }\n                publication.Metadata.Translator.push(contributor);\n                break;\n            }\n            case \"art\": {\n                if (!publication.Metadata.Artist) {\n                    publication.Metadata.Artist = [];\n                }\n                publication.Metadata.Artist.push(contributor);\n                break;\n            }\n            case \"edt\": {\n                if (!publication.Metadata.Editor) {\n                    publication.Metadata.Editor = [];\n                }\n                publication.Metadata.Editor.push(contributor);\n                break;\n            }\n            case \"ill\": {\n                if (!publication.Metadata.Illustrator) {\n                    publication.Metadata.Illustrator = [];\n                }\n                publication.Metadata.Illustrator.push(contributor);\n                break;\n            }\n            case \"ltr\": {\n                if (!publication.Metadata.Letterer) {\n                    publication.Metadata.Letterer = [];\n                }\n                publication.Metadata.Letterer.push(contributor);\n                break;\n            }\n            case \"pen\": {\n                if (!publication.Metadata.Penciler) {\n                    publication.Metadata.Penciler = [];\n                }\n                publication.Metadata.Penciler.push(contributor);\n                break;\n            }\n            case \"clr\": {\n                if (!publication.Metadata.Colorist) {\n                    publication.Metadata.Colorist = [];\n                }\n                publication.Metadata.Colorist.push(contributor);\n                break;\n            }\n            case \"ink\": {\n                if (!publication.Metadata.Inker) {\n                    publication.Metadata.Inker = [];\n                }\n                publication.Metadata.Inker.push(contributor);\n                break;\n            }\n            case \"nrt\": {\n                if (!publication.Metadata.Narrator) {\n                    publication.Metadata.Narrator = [];\n                }\n                publication.Metadata.Narrator.push(contributor);\n                break;\n            }\n            case \"pbl\": {\n                if (!publication.Metadata.Publisher) {\n                    publication.Metadata.Publisher = [];\n                }\n                publication.Metadata.Publisher.push(contributor);\n                break;\n            }\n            default: {\n                contributor.Role = [role];\n\n                if (!publication.Metadata.Contributor) {\n                    publication.Metadata.Contributor = [];\n                }\n                publication.Metadata.Contributor.push(contributor);\n            }\n        }\n    }\n};\n\nconst addIdentifier = (publication: Publication, _rootfile: Rootfile, opf: OPF) => {\n    if (opf.Metadata && opf.Metadata.Identifier) {\n        if (opf.UniqueIdentifier && opf.Metadata.Identifier.length > 1) {\n            opf.Metadata.Identifier.forEach((iden) => {\n                if (iden.ID === opf.UniqueIdentifier) {\n                    publication.Metadata.Identifier = iden.Data;\n                }\n            });\n        } else if (opf.Metadata.Identifier.length > 0) {\n            publication.Metadata.Identifier = opf.Metadata.Identifier[0].Data;\n        }\n    }\n};\n\nconst addTitle = (publication: Publication, rootfile: Rootfile, opf: OPF) => {\n\n    if (isEpub3OrMore(rootfile, opf)) {\n        let mainTitle: Title | undefined;\n        let subTitle: Title | undefined;\n        let subTitleDisplaySeq = 0;\n\n        if (opf.Metadata &&\n            opf.Metadata.Title &&\n            opf.Metadata.Title.length) {\n\n            if (opf.Metadata.Meta) {\n                const tt = opf.Metadata.Title.find((title) => {\n                    const refineID = \"#\" + title.ID;\n\n                    const m = opf.Metadata.Meta.find((meta) => {\n                        // meta.Property === \"title-type\"\n                        if (meta.Data === \"main\" && meta.Refine === refineID) {\n                            return true;\n                        }\n                        return false;\n                    });\n                    if (m) {\n                        return true;\n                    }\n                    return false;\n                });\n                if (tt) {\n                    mainTitle = tt;\n                }\n\n                opf.Metadata.Title.forEach((title) => {\n                    const refineID = \"#\" + title.ID;\n\n                    const m = opf.Metadata.Meta.find((meta) => {\n                        // meta.Property === \"title-type\"\n                        if (meta.Data === \"subtitle\" && meta.Refine === refineID) {\n                            return true;\n                        }\n                        return false;\n                    });\n                    if (m) {\n                        let titleDisplaySeq = 0;\n                        const mds = opf.Metadata.Meta.find((meta) => {\n                            if (meta.Property === \"display-seq\" && meta.Refine === refineID) {\n                                return true;\n                            }\n                            return false;\n                        });\n                        if (mds) {\n                            try {\n                                titleDisplaySeq = parseInt(mds.Data, 10);\n                            } catch (err) {\n                                debug(err);\n                                debug(mds.Data);\n                                titleDisplaySeq = 0;\n                            }\n                            if (isNaN(titleDisplaySeq)) {\n                                debug(\"NaN\");\n                                debug(mds.Data);\n                                titleDisplaySeq = 0;\n                            }\n                        } else {\n                            titleDisplaySeq = 0;\n                        }\n                        if (!subTitle || titleDisplaySeq < subTitleDisplaySeq) {\n                            subTitle = title;\n                            subTitleDisplaySeq = titleDisplaySeq;\n                        }\n                    }\n                });\n            }\n\n            if (!mainTitle) {\n                mainTitle = opf.Metadata.Title[0];\n            }\n        }\n\n        if (mainTitle) {\n            const metaAlt = findAllMetaByRefineAndProperty(rootfile, opf, mainTitle.ID, \"alternate-script\");\n            if (metaAlt && metaAlt.length) {\n                publication.Metadata.Title = {} as IStringMap;\n\n                metaAlt.forEach((m) => {\n                    if (m.Lang) {\n                        (publication.Metadata.Title as IStringMap)[m.Lang.toLowerCase()] = m.Data;\n                    }\n                });\n\n                // https://github.com/readium/architecture/blob/master/streamer/parser/metadata.md#title\n                const xmlLang: string = mainTitle.Lang || opf.Lang;\n                if (xmlLang) {\n                    publication.Metadata.Title[xmlLang.toLowerCase()] = mainTitle.Data;\n                } else if (publication.Metadata.Language &&\n                    publication.Metadata.Language.length &&\n                    !publication.Metadata.Title[publication.Metadata.Language[0].toLowerCase()]) {\n                    publication.Metadata.Title[publication.Metadata.Language[0].toLowerCase()] = mainTitle.Data;\n                } else {\n                    // tslint:disable-next-line: no-string-literal\n                    publication.Metadata.Title[\"_\"] = mainTitle.Data;\n                }\n\n            } else {\n                publication.Metadata.Title = mainTitle.Data;\n            }\n        }\n\n        if (subTitle) {\n            const metaAlt = findAllMetaByRefineAndProperty(rootfile, opf, subTitle.ID, \"alternate-script\");\n            if (metaAlt && metaAlt.length) {\n                publication.Metadata.SubTitle = {} as IStringMap;\n\n                metaAlt.forEach((m) => {\n                    if (m.Lang) {\n                        (publication.Metadata.SubTitle as IStringMap)[m.Lang.toLowerCase()] = m.Data;\n                    }\n                });\n\n                // https://github.com/readium/architecture/blob/master/streamer/parser/metadata.md#title\n                const xmlLang: string = subTitle.Lang || opf.Lang;\n                if (xmlLang) {\n                    publication.Metadata.SubTitle[xmlLang.toLowerCase()] = subTitle.Data;\n                } else if (publication.Metadata.Language &&\n                    publication.Metadata.Language.length &&\n                    !publication.Metadata.SubTitle[publication.Metadata.Language[0].toLowerCase()]) {\n                    publication.Metadata.SubTitle[publication.Metadata.Language[0].toLowerCase()] = subTitle.Data;\n                } else {\n                    // tslint:disable-next-line: no-string-literal\n                    publication.Metadata.SubTitle[\"_\"] = subTitle.Data;\n                }\n\n            } else {\n                publication.Metadata.SubTitle = subTitle.Data;\n            }\n        }\n\n    } else {\n        if (opf.Metadata &&\n            opf.Metadata.Title &&\n            opf.Metadata.Title.length) {\n\n            publication.Metadata.Title = opf.Metadata.Title[0].Data;\n        }\n    }\n};\n\nconst addRelAndPropertiesToLink =\n    async (publication: Publication, link: Link, linkEpub: Manifest, rootfile: Rootfile, opf: OPF) => {\n\n        if (linkEpub.Properties) {\n            await addToLinkFromProperties(publication, link, linkEpub.Properties);\n        }\n        const spineProperties = findPropertiesInSpineForManifest(linkEpub, rootfile, opf);\n        if (spineProperties) {\n            await addToLinkFromProperties(publication, link, spineProperties);\n        }\n    };\n\nconst addToLinkFromProperties = async (publication: Publication, link: Link, propertiesString: string) => {\n\n    const properties = propertiesString.trim().split(\" \");\n\n    const propertiesStruct = new Properties();\n\n    // https://idpf.github.io/epub-vocabs/rendition/\n\n    // no forEach(), because of await/async within the iteration body\n    // properties.forEach(async (p) => {\n    for (const p of properties) {\n        switch (p) {\n            case \"cover-image\": {\n                link.AddRel(\"cover\");\n                await addCoverDimensions(publication, link);\n                break;\n            }\n            case \"nav\": {\n                link.AddRel(\"contents\");\n                break;\n            }\n            case \"scripted\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"js\");\n                break;\n            }\n            case \"mathml\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"mathml\");\n                break;\n            }\n            case \"onix-record\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"onix\");\n                break;\n            }\n            case \"svg\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"svg\");\n                break;\n            }\n            case \"xmp-record\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"xmp\");\n                break;\n            }\n            case \"remote-resources\": {\n                if (!propertiesStruct.Contains) {\n                    propertiesStruct.Contains = [];\n                }\n                propertiesStruct.Contains.push(\"remote-resources\");\n                break;\n            }\n            case \"page-spread-left\": {\n                propertiesStruct.Page = PageEnum.Left;\n                break;\n            }\n            case \"page-spread-right\": {\n                propertiesStruct.Page = PageEnum.Right;\n                break;\n            }\n            case \"page-spread-center\": {\n                propertiesStruct.Page = PageEnum.Center;\n                break;\n            }\n            case \"rendition:spread-none\": {\n                propertiesStruct.Spread = SpreadEnum.None;\n                break;\n            }\n            case \"rendition:spread-auto\": {\n                propertiesStruct.Spread = SpreadEnum.Auto;\n                break;\n            }\n            case \"rendition:spread-landscape\": {\n                propertiesStruct.Spread = SpreadEnum.Landscape;\n                break;\n            }\n            case \"rendition:spread-portrait\": {\n                propertiesStruct.Spread = SpreadEnum.Both; // https://github.com/readium/webpub-manifest/issues/24\n                break;\n            }\n            case \"rendition:spread-both\": {\n                propertiesStruct.Spread = SpreadEnum.Both;\n                break;\n            }\n            case \"rendition:layout-reflowable\": {\n                propertiesStruct.Layout = LayoutEnum.Reflowable;\n                break;\n            }\n            case \"rendition:layout-pre-paginated\": {\n                propertiesStruct.Layout = LayoutEnum.Fixed;\n                break;\n            }\n            case \"rendition:orientation-auto\": {\n                propertiesStruct.Orientation = OrientationEnum.Auto;\n                break;\n            }\n            case \"rendition:orientation-landscape\": {\n                propertiesStruct.Orientation = OrientationEnum.Landscape;\n                break;\n            }\n            case \"rendition:orientation-portrait\": {\n                propertiesStruct.Orientation = OrientationEnum.Portrait;\n                break;\n            }\n            case \"rendition:flow-auto\": {\n                propertiesStruct.Overflow = OverflowEnum.Auto;\n                break;\n            }\n            case \"rendition:flow-paginated\": {\n                propertiesStruct.Overflow = OverflowEnum.Paginated;\n                break;\n            }\n            case \"rendition:flow-scrolled-continuous\": {\n                propertiesStruct.Overflow = OverflowEnum.ScrolledContinuous;\n                break;\n            }\n            case \"rendition:flow-scrolled-doc\": {\n                propertiesStruct.Overflow = OverflowEnum.Scrolled;\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n\n        if (propertiesStruct.Layout ||\n            propertiesStruct.Orientation ||\n            propertiesStruct.Overflow ||\n            propertiesStruct.Page ||\n            propertiesStruct.Spread ||\n            (propertiesStruct.Contains && propertiesStruct.Contains.length)) {\n\n            link.Properties = propertiesStruct;\n        }\n    }\n};\n\nconst addMediaOverlay = (link: Link, linkEpub: Manifest, rootfile: Rootfile, opf: OPF) => {\n    if (linkEpub.MediaOverlay) {\n        const meta = findMetaByRefineAndProperty(rootfile, opf, linkEpub.MediaOverlay, \"media:duration\");\n        if (meta) {\n            link.Duration = timeStrToSeconds(meta.Data);\n        }\n    }\n};\n\nconst findInManifestByID =\n    async (publication: Publication, rootfile: Rootfile, opf: OPF, ID: string): Promise<Link> => {\n\n        if (opf.Manifest && opf.Manifest.length) {\n            const item = opf.Manifest.find((manItem) => {\n                if (manItem.ID === ID) {\n                    return true;\n                }\n                return false;\n            });\n            if (item && opf.ZipPath) {\n                const linkItem = new Link();\n                linkItem.TypeLink = item.MediaType;\n                const zipPath = path.join(path.dirname(opf.ZipPath), item.Href)\n                    .replace(/\\\\/g, \"/\");\n                linkItem.Href = zipPath;\n                await addRelAndPropertiesToLink(publication, linkItem, item, rootfile, opf);\n                addMediaOverlay(linkItem, item, rootfile, opf);\n                return linkItem;\n            }\n        }\n        return Promise.reject(`ID ${ID} not found`);\n    };\n\nconst addRendition = async (publication: Publication, _rootfile: Rootfile, opf: OPF, zip: IZip) => {\n\n    if (opf.Metadata && opf.Metadata.Meta && opf.Metadata.Meta.length) {\n        const rendition = new Properties();\n\n        opf.Metadata.Meta.forEach((meta) => {\n            switch (meta.Property) {\n                case \"rendition:layout\": {\n                    switch (meta.Data) {\n                        case \"pre-paginated\": {\n                            rendition.Layout = LayoutEnum.Fixed;\n                            break;\n                        }\n                        case \"reflowable\": {\n                            rendition.Layout = LayoutEnum.Reflowable;\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"rendition:orientation\": {\n                    switch (meta.Data) {\n                        case \"auto\": {\n                            rendition.Orientation = OrientationEnum.Auto;\n                            break;\n                        }\n                        case \"landscape\": {\n                            rendition.Orientation = OrientationEnum.Landscape;\n                            break;\n                        }\n                        case \"portrait\": {\n                            rendition.Orientation = OrientationEnum.Portrait;\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"rendition:spread\": {\n                    switch (meta.Data) {\n                        case \"auto\": {\n                            rendition.Spread = SpreadEnum.Auto;\n                            break;\n                        }\n                        case \"both\": {\n                            rendition.Spread = SpreadEnum.Both;\n                            break;\n                        }\n                        case \"none\": {\n                            rendition.Spread = SpreadEnum.None;\n                            break;\n                        }\n                        case \"landscape\": {\n                            rendition.Spread = SpreadEnum.Landscape;\n                            break;\n                        }\n                        case \"portrait\": { // https://github.com/readium/webpub-manifest/issues/24\n                            rendition.Spread = SpreadEnum.Both;\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"rendition:flow\": {\n                    switch (meta.Data) {\n                        case \"auto\": {\n                            rendition.Overflow = OverflowEnum.Auto;\n                            break;\n                        }\n                        case \"paginated\": {\n                            rendition.Overflow = OverflowEnum.Paginated;\n                            break;\n                        }\n                        case \"scrolled\": {\n                            rendition.Overflow = OverflowEnum.Scrolled;\n                            break;\n                        }\n                        case \"scrolled-continuous\": {\n                            rendition.Overflow = OverflowEnum.ScrolledContinuous;\n                            break;\n                        }\n                    }\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n        });\n\n        if (!rendition.Layout || !rendition.Orientation) {\n\n            let displayOptionsZipPath = \"META-INF/com.apple.ibooks.display-options.xml\";\n            let has = zip.hasEntry(displayOptionsZipPath);\n            if ((zip as any).hasEntryAsync) { // hacky!!! (HTTP fetch)\n                try {\n                    has = await (zip as any).hasEntryAsync(displayOptionsZipPath);\n                } catch (err) {\n                    console.log(err);\n                }\n            }\n            if (has) {\n                debug(\"Info: found iBooks display-options XML\");\n            } else {\n                displayOptionsZipPath = \"META-INF/com.kobobooks.display-options.xml\";\n                has = zip.hasEntry(displayOptionsZipPath);\n                if ((zip as any).hasEntryAsync) { // hacky!!! (HTTP fetch)\n                    try {\n                        has = await (zip as any).hasEntryAsync(displayOptionsZipPath);\n                    } catch (err) {\n                        console.log(err);\n                    }\n                }\n                if (has) {\n                    debug(\"Info: found Kobo display-options XML\");\n                }\n            }\n            if (!has) {\n                debug(\"Info: not found iBooks or Kobo display-options XML\");\n            } else {\n                let displayOptionsZipStream_: IStreamAndLength | undefined;\n                try {\n                    displayOptionsZipStream_ = await zip.entryStreamPromise(displayOptionsZipPath);\n                } catch (err) {\n                    debug(err);\n                }\n                if (displayOptionsZipStream_) {\n                    const displayOptionsZipStream = displayOptionsZipStream_.stream;\n\n                    let displayOptionsZipData: Buffer | undefined;\n                    try {\n                        displayOptionsZipData = await streamToBufferPromise(displayOptionsZipStream);\n                    } catch (err) {\n                        debug(err);\n                    }\n                    if (displayOptionsZipData) {\n                        try {\n                            const displayOptionsStr = displayOptionsZipData.toString(\"utf8\");\n                            const displayOptionsDoc = new xmldom.DOMParser().parseFromString(displayOptionsStr);\n\n                            const displayOptions = XML.deserialize<DisplayOptions>(displayOptionsDoc, DisplayOptions);\n                            displayOptions.ZipPath = displayOptionsZipPath;\n\n                            if (displayOptions && displayOptions.Platforms) {\n                                const renditionPlatformAll = new Properties();\n                                const renditionPlatformIpad = new Properties();\n                                const renditionPlatformIphone = new Properties();\n                                displayOptions.Platforms.forEach((platform) => {\n                                    if (platform.Options) {\n                                        platform.Options.forEach((option) => {\n                                            if (!rendition.Layout) {\n                                                // tslint:disable-next-line:max-line-length\n                                                // https://github.com/readium/architecture/blob/master/streamer/parser/metadata.md#epub-2x-9\n                                                if (option.Name === \"fixed-layout\") {\n                                                    if (option.Value === \"true\") {\n                                                        rendition.Layout = LayoutEnum.Fixed;\n                                                    } else {\n                                                        rendition.Layout = LayoutEnum.Reflowable;\n                                                    }\n                                                }\n                                            }\n                                            if (!rendition.Orientation) {\n                                                // tslint:disable-next-line:max-line-length\n                                                // https://github.com/readium/architecture/blob/master/streamer/parser/metadata.md#epub-2x-10\n                                                if (option.Name === \"orientation-lock\") {\n                                                    const rend = platform.Name === \"*\" ? renditionPlatformAll :\n                                                        (platform.Name === \"ipad\" ? renditionPlatformIpad :\n                                                        (platform.Name === \"iphone\" ? renditionPlatformIphone :\n                                                        renditionPlatformAll));\n                                                    switch (option.Value) {\n                                                        case \"none\": {\n                                                            rend.Orientation = OrientationEnum.Auto;\n                                                            break;\n                                                        }\n                                                        case \"landscape-only\": {\n                                                            rend.Orientation = OrientationEnum.Landscape;\n                                                            break;\n                                                        }\n                                                        case \"portrait-only\": {\n                                                            rend.Orientation = OrientationEnum.Portrait;\n                                                            break;\n                                                        }\n                                                        default: {\n                                                            rend.Orientation = OrientationEnum.Auto;\n                                                            break;\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        });\n                                    }\n                                });\n                                if (renditionPlatformAll.Orientation) {\n                                    rendition.Orientation = renditionPlatformAll.Orientation;\n                                } else if (renditionPlatformIpad.Orientation) {\n                                    rendition.Orientation = renditionPlatformIpad.Orientation;\n                                } else if (renditionPlatformIphone.Orientation) {\n                                    rendition.Orientation = renditionPlatformIphone.Orientation;\n                                }\n                            }\n                        } catch (err) {\n                            debug(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (rendition.Layout || rendition.Orientation || rendition.Overflow || rendition.Page || rendition.Spread) {\n            publication.Metadata.Rendition = rendition;\n        }\n    }\n};\n\nconst fillSpineAndResource = async (publication: Publication, rootfile: Rootfile, opf: OPF) => {\n\n    if (!opf.ZipPath) {\n        return;\n    }\n\n    if (opf.Spine && opf.Spine.Items && opf.Spine.Items.length) {\n        // no forEach(), because of await/async within the iteration body\n        // opf.Spine.Items.forEach(async (item) => {\n        for (const item of opf.Spine.Items) {\n\n            if (!item.Linear || item.Linear === \"yes\") {\n\n                let linkItem: Link;\n                try {\n                    linkItem = await findInManifestByID(publication, rootfile, opf, item.IDref);\n                } catch (err) {\n                    debug(err);\n                    continue;\n                }\n\n                if (linkItem && linkItem.Href) {\n                    if (!publication.Spine) {\n                        publication.Spine = [];\n                    }\n                    publication.Spine.push(linkItem);\n                }\n            }\n        }\n    }\n\n    if (opf.Manifest && opf.Manifest.length) {\n\n        // no forEach(), because of await/async within the iteration body\n        // opf.Manifest.forEach(async (item) => {\n        for (const item of opf.Manifest) {\n\n            const zipPath = path.join(path.dirname(opf.ZipPath), item.Href)\n                .replace(/\\\\/g, \"/\");\n            const linkSpine = findInSpineByHref(publication, zipPath);\n            if (!linkSpine || !linkSpine.Href) {\n\n                const linkItem = new Link();\n                linkItem.TypeLink = item.MediaType;\n                linkItem.Href = zipPath;\n                await addRelAndPropertiesToLink(publication, linkItem, item, rootfile, opf);\n                addMediaOverlay(linkItem, item, rootfile, opf);\n\n                if (!publication.Resources) {\n                    publication.Resources = [];\n                }\n                publication.Resources.push(linkItem);\n            }\n        }\n    }\n};\n\nconst fillEncryptionInfo =\n    (publication: Publication, _rootfile: Rootfile, _opf: OPF, encryption: Encryption, lcp: LCP | undefined) => {\n\n        encryption.EncryptedData.forEach((encInfo) => {\n            const encrypted = new Encrypted();\n            encrypted.Algorithm = encInfo.EncryptionMethod.Algorithm;\n\n            if (lcp &&\n                encrypted.Algorithm !== \"http://www.idpf.org/2008/embedding\" &&\n                encrypted.Algorithm !== \"http://ns.adobe.com/pdf/enc#RC\") {\n                encrypted.Profile = lcp.Encryption.Profile;\n                encrypted.Scheme = \"http://readium.org/2014/01/lcp\";\n            }\n            if (encInfo.EncryptionProperties && encInfo.EncryptionProperties.length) {\n\n                encInfo.EncryptionProperties.forEach((prop) => {\n\n                    if (prop.Compression) {\n                        if (prop.Compression.OriginalLength) {\n                            encrypted.OriginalLength = parseFloat(prop.Compression.OriginalLength);\n                        }\n                        if (prop.Compression.Method === \"8\") {\n                            encrypted.Compression = \"deflate\";\n                        } else {\n                            encrypted.Compression = \"none\";\n                        }\n                    }\n                });\n            }\n\n            if (publication.Resources) {\n                publication.Resources.forEach((l, _i, _arr) => {\n\n                    const filePath = l.Href;\n                    if (filePath === encInfo.CipherData.CipherReference.URI) {\n                        if (!l.Properties) {\n                            l.Properties = new Properties();\n                        }\n                        l.Properties.Encrypted = encrypted;\n                    }\n                });\n            }\n\n            if (publication.Spine) {\n                publication.Spine.forEach((l, _i, _arr) => {\n                    const filePath = l.Href;\n                    if (filePath === encInfo.CipherData.CipherReference.URI) {\n                        if (!l.Properties) {\n                            l.Properties = new Properties();\n                        }\n                        l.Properties.Encrypted = encrypted;\n                    }\n                });\n            }\n        });\n    };\n\nconst fillPageListFromNCX = (publication: Publication, _rootfile: Rootfile, _opf: OPF, ncx: NCX) => {\n    if (ncx.PageList && ncx.PageList.PageTarget && ncx.PageList.PageTarget.length) {\n        ncx.PageList.PageTarget.forEach((pageTarget) => {\n            const link = new Link();\n            const zipPath = path.join(path.dirname(ncx.ZipPath), pageTarget.Content.Src)\n                .replace(/\\\\/g, \"/\");\n            link.Href = zipPath;\n            link.Title = pageTarget.Text;\n            if (!publication.PageList) {\n                publication.PageList = [];\n            }\n            publication.PageList.push(link);\n        });\n    }\n};\n\nconst fillPageListFromAdobePageMap = async (\n    publication: Publication,\n    _rootfile: Rootfile,\n    _opf: OPF,\n    zip: IZip,\n    pageMapZipPath: string,\n): Promise<void> => {\n    const pageMapDocStr = await createDocStringFromZipPath(pageMapZipPath, zip);\n    if (!pageMapDocStr) {\n        return;\n    }\n    const pageMapXmlDoc = new xmldom.DOMParser().parseFromString(pageMapDocStr);\n\n    const pages = pageMapXmlDoc.getElementsByTagName(\"page\");\n    if (pages && pages.length) {\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < pages.length; i += 1) {\n            const page = pages.item(i)!;\n\n            const link = new Link();\n            const href = page.getAttribute(\"href\");\n            const title = page.getAttribute(\"name\");\n            if (href === null || title === null) {\n                continue;\n            }\n\n            if (!publication.PageList) {\n                publication.PageList = [];\n            }\n\n            const zipPath = path.join(path.dirname(pageMapZipPath), href)\n                .replace(/\\\\/g, \"/\");\n\n            link.Href = zipPath;\n            link.Title = title;\n            publication.PageList.push(link);\n        }\n    }\n};\n\nconst createDocStringFromZipPath = async (filePath: string, zip: IZip): Promise<string | undefined> => {\n    let has = zip.hasEntry(filePath);\n    if ((zip as any).hasEntryAsync) { // hacky!!! (HTTP fetch)\n        try {\n            has = await (zip as any).hasEntryAsync(filePath);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n    if (!has) {\n        return undefined;\n    }\n\n    let zipStream_: IStreamAndLength;\n    try {\n        zipStream_ = await zip.entryStreamPromise(filePath);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n    const zipStream = zipStream_.stream;\n\n    let zipData: Buffer;\n    try {\n        zipData = await streamToBufferPromise(zipStream);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    return zipData.toString(\"utf8\");\n};\n\nconst fillTOCFromNCX = (publication: Publication, rootfile: Rootfile, opf: OPF, ncx: NCX) => {\n    if (ncx.Points && ncx.Points.length) {\n        ncx.Points.forEach((point) => {\n            if (!publication.TOC) {\n                publication.TOC = [];\n            }\n            fillTOCFromNavPoint(publication, rootfile, opf, ncx, point, publication.TOC);\n        });\n    }\n};\n\nconst fillLandmarksFromGuide = (publication: Publication, _rootfile: Rootfile, opf: OPF) => {\n    if (opf.Guide && opf.Guide.length) {\n        opf.Guide.forEach((ref) => {\n            if (ref.Href && opf.ZipPath) {\n                const link = new Link();\n                const zipPath = path.join(path.dirname(opf.ZipPath), ref.Href)\n                    .replace(/\\\\/g, \"/\");\n                link.Href = zipPath;\n                link.Title = ref.Title;\n                if (!publication.Landmarks) {\n                    publication.Landmarks = [];\n                }\n                publication.Landmarks.push(link);\n            }\n        });\n    }\n};\n\nconst fillTOCFromNavPoint =\n    (publication: Publication, rootfile: Rootfile, opf: OPF, ncx: NCX, point: NavPoint, node: Link[]) => {\n\n        const link = new Link();\n        const zipPath = path.join(path.dirname(ncx.ZipPath), point.Content.Src)\n            .replace(/\\\\/g, \"/\");\n        link.Href = zipPath;\n        link.Title = point.Text;\n\n        if (point.Points && point.Points.length) {\n            point.Points.forEach((p) => {\n                if (!link.Children) {\n                    link.Children = [];\n                }\n                fillTOCFromNavPoint(publication, rootfile, opf, ncx, p, link.Children);\n            });\n        }\n\n        node.push(link);\n    };\n\nconst fillSubject = (publication: Publication, _rootfile: Rootfile, opf: OPF) => {\n    if (opf.Metadata && opf.Metadata.Subject && opf.Metadata.Subject.length) {\n        opf.Metadata.Subject.forEach((s) => {\n            const sub = new Subject();\n            if (s.Lang) {\n                sub.Name = {} as IStringMap;\n                sub.Name[s.Lang] = s.Data;\n            } else {\n                sub.Name = s.Data;\n            }\n            sub.Code = s.Term;\n            sub.Scheme = s.Authority;\n            if (!publication.Metadata.Subject) {\n                publication.Metadata.Subject = [];\n            }\n            publication.Metadata.Subject.push(sub);\n        });\n    }\n};\n\nconst fillCalibreSerieInfo = (publication: Publication, _rootfile: Rootfile, opf: OPF) => {\n    let serie: string | undefined;\n    let seriePosition: number | undefined;\n\n    if (opf.Metadata && opf.Metadata.Meta && opf.Metadata.Meta.length) {\n        opf.Metadata.Meta.forEach((m) => {\n            if (m.Name === \"calibre:series\") {\n                serie = m.Content;\n            }\n            if (m.Name === \"calibre:series_index\") {\n                seriePosition = parseFloat(m.Content);\n            }\n        });\n    }\n\n    if (serie) {\n        const contributor = new Contributor();\n        contributor.Name = serie;\n        if (seriePosition) {\n            contributor.Position = seriePosition;\n        }\n        if (!publication.Metadata.BelongsTo) {\n            publication.Metadata.BelongsTo = new BelongsTo();\n        }\n        if (!publication.Metadata.BelongsTo.Series) {\n            publication.Metadata.BelongsTo.Series = [];\n        }\n        publication.Metadata.BelongsTo.Series.push(contributor);\n    }\n};\n\nconst fillTOCFromNavDoc = async (publication: Publication, _rootfile: Rootfile, _opf: OPF, zip: IZip):\n    Promise<void> => {\n\n    const navLink = publication.GetNavDoc();\n    if (!navLink) {\n        return;\n    }\n\n    const navDocFilePath = navLink.Href;\n\n    let has = zip.hasEntry(navDocFilePath);\n    if ((zip as any).hasEntryAsync) { // hacky!!! (HTTP fetch)\n        try {\n            has = await (zip as any).hasEntryAsync(navDocFilePath);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n    if (!has) {\n        return;\n    }\n\n    let navDocZipStream_: IStreamAndLength;\n    try {\n        navDocZipStream_ = await zip.entryStreamPromise(navDocFilePath);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n    const navDocZipStream = navDocZipStream_.stream;\n\n    let navDocZipData: Buffer;\n    try {\n        navDocZipData = await streamToBufferPromise(navDocZipStream);\n    } catch (err) {\n        debug(err);\n        return Promise.reject(err);\n    }\n\n    const navDocStr = navDocZipData.toString(\"utf8\");\n    const navXmlDoc = new xmldom.DOMParser().parseFromString(navDocStr);\n\n    const select = xpath.useNamespaces({\n        epub: \"http://www.idpf.org/2007/ops\",\n        xhtml: \"http://www.w3.org/1999/xhtml\",\n    });\n\n    const navs = select(\"/xhtml:html/xhtml:body//xhtml:nav\", navXmlDoc) as Element[];\n    if (navs && navs.length) {\n\n        navs.forEach((navElement: Element) => {\n\n            const typeNav = select(\"@epub:type\", navElement);\n            if (typeNav && typeNav.length) {\n\n                const olElem = select(\"xhtml:ol\", navElement) as Element[];\n\n                const roles = (typeNav[0] as Attr).value;\n                const role = roles.trim().split(\" \")[0]; // TODO assumes only single epub:type in space-separated value?\n                switch (role) {\n\n                    case \"toc\": {\n                        publication.TOC = [];\n                        fillTOCFromNavDocWithOL(select, olElem, publication.TOC, navLink.Href);\n                        break;\n                    }\n                    case \"page-list\": {\n                        publication.PageList = [];\n                        fillTOCFromNavDocWithOL(select, olElem, publication.PageList, navLink.Href);\n                        break;\n                    }\n                    case \"landmarks\": {\n                        publication.Landmarks = [];\n                        fillTOCFromNavDocWithOL(select, olElem, publication.Landmarks, navLink.Href);\n                        break;\n                    }\n                    case \"lot\": {\n                        publication.LOT = [];\n                        fillTOCFromNavDocWithOL(select, olElem, publication.LOT, navLink.Href);\n                        break;\n                    }\n                    case \"loa\": {\n                        publication.LOA = [];\n                        fillTOCFromNavDocWithOL(select, olElem, publication.LOA, navLink.Href);\n                        break;\n                    }\n                    case \"loi\": {\n                        publication.LOI = [];\n                        fillTOCFromNavDocWithOL(select, olElem, publication.LOI, navLink.Href);\n                        break;\n                    }\n                    case \"lov\": {\n                        publication.LOV = [];\n                        fillTOCFromNavDocWithOL(select, olElem, publication.LOV, navLink.Href);\n                        break;\n                    }\n                    default: {\n                        break;\n                    }\n                }\n            }\n        });\n    }\n};\n\nconst fillTOCFromNavDocWithOL = (select: any, olElems: Element[], node: Link[], navDocPath: string) => {\n\n    olElems.forEach((olElem: Element) => {\n\n        const liElems = select(\"xhtml:li\", olElem);\n        if (liElems && liElems.length) {\n\n            liElems.forEach((liElem: Element) => {\n\n                const link = new Link();\n                node.push(link);\n\n                const aElems = select(\"xhtml:a\", liElem);\n                if (aElems && aElems.length > 0) {\n\n                    const aHref = select(\"@href\", aElems[0]);\n                    if (aHref && aHref.length) {\n                        let val = (aHref[0] as Attr).value;\n                        if (val[0] === \"#\") {\n                            val = path.basename(navDocPath) + val;\n                        }\n\n                        const zipPath = path.join(path.dirname(navDocPath), val)\n                            .replace(/\\\\/g, \"/\");\n                        link.Href = zipPath;\n                    }\n\n                    let aText = aElems[0].textContent; // select(\"text()\", aElems[0])[0].data;\n                    if (aText && aText.length) {\n                        aText = aText.trim();\n                        aText = aText.replace(/\\s\\s+/g, \" \");\n                        link.Title = aText;\n                    }\n                } else {\n                    const liFirstChild = select(\"xhtml:*[1]\", liElem);\n                    if (liFirstChild && liFirstChild.length && liFirstChild[0].textContent) {\n                        link.Title = liFirstChild[0].textContent.trim();\n                    }\n                }\n\n                const olElemsNext = select(\"xhtml:ol\", liElem);\n                if (olElemsNext && olElemsNext.length) {\n                    if (!link.Children) {\n                        link.Children = [];\n                    }\n                    fillTOCFromNavDocWithOL(select, olElemsNext, link.Children, navDocPath);\n                }\n            });\n        }\n    });\n};\n\nconst addCoverRel = async (publication: Publication, rootfile: Rootfile, opf: OPF) => {\n\n    let coverID: string | undefined;\n\n    if (opf.Metadata && opf.Metadata.Meta && opf.Metadata.Meta.length) {\n        opf.Metadata.Meta.find((meta) => {\n            if (meta.Name === \"cover\") {\n                coverID = meta.Content;\n                return true;\n            }\n            return false;\n        });\n    }\n\n    if (coverID) {\n        let manifestInfo: Link;\n        try {\n            manifestInfo = await findInManifestByID(publication, rootfile, opf, coverID);\n        } catch (err) {\n            debug(err);\n            return;\n        }\n        if (manifestInfo && manifestInfo.Href && publication.Resources && publication.Resources.length) {\n\n            const href = manifestInfo.Href;\n            const linky = publication.Resources.find((item, _i, _arr) => {\n                if (item.Href === href) {\n                    return true;\n                }\n                return false;\n            });\n            if (linky) { // publication.Resources[i]\n                linky.AddRel(\"cover\");\n                await addCoverDimensions(publication, linky);\n            }\n        }\n    }\n};\n\nconst findPropertiesInSpineForManifest = (linkEpub: Manifest, _rootfile: Rootfile, opf: OPF): string | undefined => {\n\n    if (opf.Spine && opf.Spine.Items && opf.Spine.Items.length) {\n        const it = opf.Spine.Items.find((item) => {\n            if (item.IDref === linkEpub.ID) {\n                return true;\n            }\n            return false;\n        });\n        if (it && it.Properties) {\n            return it.Properties;\n        }\n    }\n\n    return undefined;\n};\n\nconst findInSpineByHref = (publication: Publication, href: string): Link | undefined => {\n\n    if (publication.Spine && publication.Spine.length) {\n        const ll = publication.Spine.find((l) => {\n            if (l.Href === href) {\n                return true;\n            }\n            return false;\n        });\n        if (ll) {\n            return ll;\n        }\n    }\n\n    return undefined;\n};\n\nconst findMetaByRefineAndProperty = (\n    rootfile: Rootfile, opf: OPF, ID: string, property: string): Metafield | undefined => {\n\n    const ret = findAllMetaByRefineAndProperty(rootfile, opf, ID, property);\n    if (ret.length) {\n        return ret[0];\n    }\n    return undefined;\n};\n\nconst findAllMetaByRefineAndProperty = (_rootfile: Rootfile, opf: OPF, ID: string, property: string): Metafield[] => {\n    const metas: Metafield[] = [];\n\n    const refineID = \"#\" + ID;\n\n    if (opf.Metadata && opf.Metadata.Meta) {\n        opf.Metadata.Meta.forEach((metaTag) => {\n            if (metaTag.Refine === refineID && metaTag.Property === property) {\n                metas.push(metaTag);\n            }\n        });\n    }\n\n    return metas;\n};\n\nconst getEpubVersion = (rootfile: Rootfile, opf: OPF): string | undefined => {\n\n    if (rootfile.Version) {\n        return rootfile.Version;\n    } else if (opf.Version) {\n        return opf.Version;\n    }\n\n    return undefined;\n};\n\nconst isEpub3OrMore = (rootfile: Rootfile, opf: OPF): boolean => {\n\n    const version = getEpubVersion(rootfile, opf);\n    return (version === epub3 || version === epub301 || version === epub31);\n};\n\nconst findLinKByHref = (publication: Publication, _rootfile: Rootfile, _opf: OPF, href: string): Link | undefined => {\n    if (publication.Spine && publication.Spine.length) {\n        const ll = publication.Spine.find((l) => {\n            const pathInZip = l.Href;\n\n            if (href === pathInZip) {\n                return true;\n            }\n            return false;\n        });\n        if (ll) {\n            return ll;\n        }\n    }\n\n    return undefined;\n};\n"]}